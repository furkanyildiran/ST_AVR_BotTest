
RF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003020  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  080030e0  080030e0  000130e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034a4  080034a4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080034a4  080034a4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034a4  080034a4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034a4  080034a4  000134a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a8  080034a8  000134a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080034ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000088  08003534  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003534  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baa3  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002338  00000000  00000000  0002bb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000055c7  00000000  00000000  0002de8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  00033458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d8b  00000000  00000000  00034960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0da  00000000  00000000  0004e6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092797  00000000  00000000  0005b7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000edf5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000194c  00000000  00000000  000edfac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030c8 	.word	0x080030c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	080030c8 	.word	0x080030c8

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	2510      	movs	r5, #16
{
 800024c:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	221c      	movs	r2, #28
 8000250:	2100      	movs	r1, #0
 8000252:	a806      	add	r0, sp, #24
 8000254:	f002 fac6 	bl	80027e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	002a      	movs	r2, r5
 800025a:	2100      	movs	r1, #0
 800025c:	a801      	add	r0, sp, #4
 800025e:	f002 fac1 	bl	80027e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8000262:	2330      	movs	r3, #48	; 0x30
 8000264:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8000266:	23c0      	movs	r3, #192	; 0xc0
 8000268:	025b      	lsls	r3, r3, #9
 800026a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	02db      	lsls	r3, r3, #11
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000270:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000272:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV4;
 8000274:	2303      	movs	r3, #3
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000276:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800027c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800027e:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV4;
 8000282:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f000 ff2a 	bl	80010dc <HAL_RCC_OscConfig>
 8000288:	2800      	cmp	r0, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800028c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800028e:	e7fe      	b.n	800028e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000294:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000296:	0021      	movs	r1, r4
 8000298:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800029e:	f001 f9a5 	bl	80015ec <HAL_RCC_ClockConfig>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x62>
 80002a6:	b672      	cpsid	i
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <SystemClock_Config+0x60>
}
 80002aa:	b013      	add	sp, #76	; 0x4c
 80002ac:	bd30      	pop	{r4, r5, pc}
	...

080002b0 <main>:
{
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 80002b4:	f000 faf4 	bl	80008a0 <HAL_Init>
  SystemClock_Config();
 80002b8:	f7ff ffc6 	bl	8000248 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002bc:	2214      	movs	r2, #20
 80002be:	2100      	movs	r1, #0
 80002c0:	a80f      	add	r0, sp, #60	; 0x3c
 80002c2:	f002 fa8f 	bl	80027e4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c6:	2180      	movs	r1, #128	; 0x80
 80002c8:	4cba      	ldr	r4, [pc, #744]	; (80005b4 <main+0x304>)
 80002ca:	0309      	lsls	r1, r1, #12
 80002cc:	6962      	ldr	r2, [r4, #20]
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin
 80002ce:	26bc      	movs	r6, #188	; 0xbc
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d0:	430a      	orrs	r2, r1
 80002d2:	6162      	str	r2, [r4, #20]
 80002d4:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin
 80002d6:	0136      	lsls	r6, r6, #4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d8:	400b      	ands	r3, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002da:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002dc:	9307      	str	r3, [sp, #28]
 80002de:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	6962      	ldr	r2, [r4, #20]
 80002e2:	0289      	lsls	r1, r1, #10
 80002e4:	430a      	orrs	r2, r1
 80002e6:	6162      	str	r2, [r4, #20]
 80002e8:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin
 80002ea:	48b3      	ldr	r0, [pc, #716]	; (80005b8 <main+0x308>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ec:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	9308      	str	r3, [sp, #32]
 80002f2:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	6962      	ldr	r2, [r4, #20]
 80002f6:	02c9      	lsls	r1, r1, #11
 80002f8:	430a      	orrs	r2, r1
 80002fa:	6162      	str	r2, [r4, #20]
 80002fc:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin
 80002fe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	400b      	ands	r3, r1
 8000302:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin
 8000304:	0031      	movs	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, nRF_CE_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin
 8000308:	f000 fee2 	bl	80010d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2180      	movs	r1, #128	; 0x80
 8000310:	48aa      	ldr	r0, [pc, #680]	; (80005bc <main+0x30c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000312:	2500      	movs	r5, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000314:	f000 fedc 	bl	80010d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000318:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800031a:	48a8      	ldr	r0, [pc, #672]	; (80005bc <main+0x30c>)
 800031c:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800031e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000320:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000324:	f000 fe10 	bl	8000f48 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000328:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_7;
 800032a:	23a1      	movs	r3, #161	; 0xa1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032c:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032e:	a90f      	add	r1, sp, #60	; 0x3c
 8000330:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_7;
 8000332:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000334:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000338:	f000 fe06 	bl	8000f48 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033c:	489e      	ldr	r0, [pc, #632]	; (80005b8 <main+0x308>)
 800033e:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = nRF_CE_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin
 8000340:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000348:	f000 fdfe 	bl	8000f48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800034c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800034e:	489b      	ldr	r0, [pc, #620]	; (80005bc <main+0x30c>)
 8000350:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000352:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000358:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035a:	f000 fdf5 	bl	8000f48 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800035e:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000360:	002a      	movs	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000362:	433b      	orrs	r3, r7
 8000364:	6163      	str	r3, [r4, #20]
 8000366:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000368:	0029      	movs	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800036a:	403b      	ands	r3, r7
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800036c:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800036e:	9306      	str	r3, [sp, #24]
 8000370:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000372:	f000 fcdf 	bl	8000d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000376:	2009      	movs	r0, #9
 8000378:	f000 fd06 	bl	8000d88 <HAL_NVIC_EnableIRQ>
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800037c:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Instance = SPI1;
 800037e:	4c90      	ldr	r4, [pc, #576]	; (80005c0 <main+0x310>)
 8000380:	4b90      	ldr	r3, [pc, #576]	; (80005c4 <main+0x314>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000382:	00d2      	lsls	r2, r2, #3
  hspi1.Instance = SPI1;
 8000384:	6023      	str	r3, [r4, #0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000386:	2310      	movs	r3, #16
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000388:	2682      	movs	r6, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800038a:	60e2      	str	r2, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800038c:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800038e:	61e3      	str	r3, [r4, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000390:	3b09      	subs	r3, #9
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000392:	0076      	lsls	r6, r6, #1
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000394:	0092      	lsls	r2, r2, #2
  hspi1.Init.CRCPolynomial = 7;
 8000396:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000398:	0020      	movs	r0, r4
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800039a:	19db      	adds	r3, r3, r7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800039c:	6066      	str	r6, [r4, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800039e:	60a5      	str	r5, [r4, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a0:	6125      	str	r5, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a2:	6165      	str	r5, [r4, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003a4:	61a2      	str	r2, [r4, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003a6:	6225      	str	r5, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a8:	6265      	str	r5, [r4, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003aa:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ac:	6325      	str	r5, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003ae:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b0:	f001 face 	bl	8001950 <HAL_SPI_Init>
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	d001      	beq.n	80003bc <main+0x10c>
 80003b8:	b672      	cpsid	i
  while (1)
 80003ba:	e7fe      	b.n	80003ba <main+0x10a>
  hspi2.Instance = SPI2;
 80003bc:	4d82      	ldr	r5, [pc, #520]	; (80005c8 <main+0x318>)
 80003be:	4b83      	ldr	r3, [pc, #524]	; (80005cc <main+0x31c>)
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003c0:	61e8      	str	r0, [r5, #28]
  hspi2.Instance = SPI2;
 80003c2:	602b      	str	r3, [r5, #0]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80003c4:	2380      	movs	r3, #128	; 0x80
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	60ab      	str	r3, [r5, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ca:	23e0      	movs	r3, #224	; 0xe0
 80003cc:	00db      	lsls	r3, r3, #3
 80003ce:	60eb      	str	r3, [r5, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80003d0:	2302      	movs	r3, #2
 80003d2:	612b      	str	r3, [r5, #16]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003d4:	33ff      	adds	r3, #255	; 0xff
 80003d6:	33ff      	adds	r3, #255	; 0xff
 80003d8:	61ab      	str	r3, [r5, #24]
  hspi2.Init.CRCPolynomial = 7;
 80003da:	3bfa      	subs	r3, #250	; 0xfa
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003dc:	6228      	str	r0, [r5, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003de:	6268      	str	r0, [r5, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e0:	62a8      	str	r0, [r5, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003e2:	3bff      	subs	r3, #255	; 0xff
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003e4:	6328      	str	r0, [r5, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003e6:	6368      	str	r0, [r5, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003e8:	0028      	movs	r0, r5
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003ea:	606e      	str	r6, [r5, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80003ec:	616f      	str	r7, [r5, #20]
  hspi2.Init.CRCPolynomial = 7;
 80003ee:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003f0:	f001 faae 	bl	8001950 <HAL_SPI_Init>
 80003f4:	9003      	str	r0, [sp, #12]
 80003f6:	2800      	cmp	r0, #0
 80003f8:	d001      	beq.n	80003fe <main+0x14e>
 80003fa:	b672      	cpsid	i
  while (1)
 80003fc:	e7fe      	b.n	80003fc <main+0x14c>
  ADC_ChannelConfTypeDef sConfig = {0};
 80003fe:	220c      	movs	r2, #12
 8000400:	9903      	ldr	r1, [sp, #12]
 8000402:	a80f      	add	r0, sp, #60	; 0x3c
 8000404:	f002 f9ee 	bl	80027e4 <memset>
  hadc.Instance = ADC1;
 8000408:	4e71      	ldr	r6, [pc, #452]	; (80005d0 <main+0x320>)
 800040a:	4b72      	ldr	r3, [pc, #456]	; (80005d4 <main+0x324>)
  hadc.Init.DMAContinuousRequests = DISABLE;
 800040c:	9a03      	ldr	r2, [sp, #12]
  hadc.Instance = ADC1;
 800040e:	6033      	str	r3, [r6, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000410:	9b03      	ldr	r3, [sp, #12]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000412:	0030      	movs	r0, r6
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000414:	6073      	str	r3, [r6, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	60b3      	str	r3, [r6, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000418:	60f3      	str	r3, [r6, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800041a:	2304      	movs	r3, #4
 800041c:	6173      	str	r3, [r6, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	025b      	lsls	r3, r3, #9
 8000422:	61b3      	str	r3, [r6, #24]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000424:	23c2      	movs	r3, #194	; 0xc2
 8000426:	33ff      	adds	r3, #255	; 0xff
 8000428:	61f3      	str	r3, [r6, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800042a:	9b03      	ldr	r3, [sp, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800042c:	6137      	str	r7, [r6, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800042e:	6233      	str	r3, [r6, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000430:	1d73      	adds	r3, r6, #5
 8000432:	77da      	strb	r2, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000434:	62b7      	str	r7, [r6, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000436:	f000 fab7 	bl	80009a8 <HAL_ADC_Init>
 800043a:	2800      	cmp	r0, #0
 800043c:	d001      	beq.n	8000442 <main+0x192>
 800043e:	b672      	cpsid	i
  while (1)
 8000440:	e7fe      	b.n	8000440 <main+0x190>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	015b      	lsls	r3, r3, #5
 8000446:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000448:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800044a:	0030      	movs	r0, r6
 800044c:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Channel = ADC_CHANNEL_1;
 800044e:	970f      	str	r7, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000450:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000452:	f000 fbe9 	bl	8000c28 <HAL_ADC_ConfigChannel>
 8000456:	2800      	cmp	r0, #0
 8000458:	d001      	beq.n	800045e <main+0x1ae>
 800045a:	b672      	cpsid	i
  while (1)
 800045c:	e7fe      	b.n	800045c <main+0x1ac>
  sConfig.Channel = ADC_CHANNEL_4;
 800045e:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000460:	0030      	movs	r0, r6
 8000462:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Channel = ADC_CHANNEL_4;
 8000464:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000466:	f000 fbdf 	bl	8000c28 <HAL_ADC_ConfigChannel>
 800046a:	2800      	cmp	r0, #0
 800046c:	d001      	beq.n	8000472 <main+0x1c2>
 800046e:	b672      	cpsid	i
  while (1)
 8000470:	e7fe      	b.n	8000470 <main+0x1c0>
  ST7735_TFT_init(&hspi2);
 8000472:	0028      	movs	r0, r5
 8000474:	f001 fe24 	bl	80020c0 <ST7735_TFT_init>
  ST7735_TFT_setOrientation(TURN180_DEGREES);
 8000478:	0038      	movs	r0, r7
 800047a:	f001 fe5d 	bl	8002138 <ST7735_TFT_setOrientation>
  uint8_t prev_direction = 5, curr_direction = 5;
 800047e:	230f      	movs	r3, #15
 8000480:	2505      	movs	r5, #5
 8000482:	aa02      	add	r2, sp, #8
 8000484:	189b      	adds	r3, r3, r2
  ST7735_TFT_fillScreen(BLUE);
 8000486:	201f      	movs	r0, #31
  uint8_t prev_direction = 5, curr_direction = 5;
 8000488:	701d      	strb	r5, [r3, #0]
  ST7735_TFT_fillScreen(BLUE);
 800048a:	f001 febb 	bl	8002204 <ST7735_TFT_fillScreen>
  nRF24L01_init(&hspi1, &nrf);
 800048e:	0020      	movs	r0, r4
		  curr_direction = 5;
 8000490:	002c      	movs	r4, r5
  nRF24L01_init(&hspi1, &nrf);
 8000492:	4951      	ldr	r1, [pc, #324]	; (80005d8 <main+0x328>)
 8000494:	f002 f862 	bl	800255c <nRF24L01_init>
  uint8_t prev_direction = 5, curr_direction = 5;
 8000498:	9503      	str	r5, [sp, #12]
	  }else if((joystick[1] > 4000) && (joystick[0] < 4000 && joystick[0] > 0)){
 800049a:	27fa      	movs	r7, #250	; 0xfa
 800049c:	013f      	lsls	r7, r7, #4
	  HAL_ADC_Start_DMA(&hadc, joystick, 2);
 800049e:	250f      	movs	r5, #15
 80004a0:	4e4e      	ldr	r6, [pc, #312]	; (80005dc <main+0x32c>)
 80004a2:	2202      	movs	r2, #2
 80004a4:	0031      	movs	r1, r6
 80004a6:	484a      	ldr	r0, [pc, #296]	; (80005d0 <main+0x320>)
 80004a8:	f000 fb26 	bl	8000af8 <HAL_ADC_Start_DMA>
	  if((joystick[0] == 0) && (joystick[1] < 4000 && joystick[1] > 0)){
 80004ac:	6832      	ldr	r2, [r6, #0]
 80004ae:	ab02      	add	r3, sp, #8
 80004b0:	18ed      	adds	r5, r5, r3
 80004b2:	4b4b      	ldr	r3, [pc, #300]	; (80005e0 <main+0x330>)
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	d141      	bne.n	800053c <main+0x28c>
 80004b8:	6871      	ldr	r1, [r6, #4]
 80004ba:	3901      	subs	r1, #1
 80004bc:	4299      	cmp	r1, r3
 80004be:	d845      	bhi.n	800054c <main+0x29c>
		  curr_direction = 1;
 80004c0:	2301      	movs	r3, #1
		  curr_direction = 2;
 80004c2:	702b      	strb	r3, [r5, #0]
	  if(prev_direction != curr_direction){
 80004c4:	782e      	ldrb	r6, [r5, #0]
 80004c6:	9b03      	ldr	r3, [sp, #12]
 80004c8:	42b3      	cmp	r3, r6
 80004ca:	d0e8      	beq.n	800049e <main+0x1ee>
		  sprintf(line0,"J1 : %-4ld",joystick[0]);
 80004cc:	4945      	ldr	r1, [pc, #276]	; (80005e4 <main+0x334>)
 80004ce:	a80a      	add	r0, sp, #40	; 0x28
 80004d0:	f002 f990 	bl	80027f4 <siprintf>
		  sprintf(line1,"J2 : %-4ld",joystick[1]);
 80004d4:	4b41      	ldr	r3, [pc, #260]	; (80005dc <main+0x32c>)
 80004d6:	4944      	ldr	r1, [pc, #272]	; (80005e8 <main+0x338>)
 80004d8:	685a      	ldr	r2, [r3, #4]
 80004da:	a80f      	add	r0, sp, #60	; 0x3c
 80004dc:	f002 f98a 	bl	80027f4 <siprintf>
		  ST7735_TFT_Paint(0, 127, 0, 40, BLUE);
 80004e0:	271f      	movs	r7, #31
 80004e2:	2200      	movs	r2, #0
 80004e4:	2328      	movs	r3, #40	; 0x28
 80004e6:	0010      	movs	r0, r2
 80004e8:	217f      	movs	r1, #127	; 0x7f
 80004ea:	9700      	str	r7, [sp, #0]
 80004ec:	f001 fe58 	bl	80021a0 <ST7735_TFT_Paint>
		  ST7735_TFT_writeString(line0, 5, 5, YELLOW, BLUE);
 80004f0:	0022      	movs	r2, r4
 80004f2:	0021      	movs	r1, r4
 80004f4:	4b3d      	ldr	r3, [pc, #244]	; (80005ec <main+0x33c>)
 80004f6:	a80a      	add	r0, sp, #40	; 0x28
 80004f8:	9700      	str	r7, [sp, #0]
 80004fa:	f001 fee7 	bl	80022cc <ST7735_TFT_writeString>
		  ST7735_TFT_writeString(line1, 5, 15, YELLOW, BLUE);
 80004fe:	4b3b      	ldr	r3, [pc, #236]	; (80005ec <main+0x33c>)
 8000500:	220f      	movs	r2, #15
 8000502:	0021      	movs	r1, r4
 8000504:	9700      	str	r7, [sp, #0]
 8000506:	a80f      	add	r0, sp, #60	; 0x3c
 8000508:	f001 fee0 	bl	80022cc <ST7735_TFT_writeString>
		  if(curr_direction == 1) ST7735_TFT_writeString("LEFT Direction", 5, 25, YELLOW, BLUE);
 800050c:	782b      	ldrb	r3, [r5, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d130      	bne.n	8000574 <main+0x2c4>
 8000512:	2219      	movs	r2, #25
 8000514:	0021      	movs	r1, r4
 8000516:	4b35      	ldr	r3, [pc, #212]	; (80005ec <main+0x33c>)
 8000518:	4835      	ldr	r0, [pc, #212]	; (80005f0 <main+0x340>)
 800051a:	9700      	str	r7, [sp, #0]
		  else if(curr_direction == 5) ST7735_TFT_writeString("    STOPPED", 5, 25, YELLOW, BLUE);
 800051c:	f001 fed6 	bl	80022cc <ST7735_TFT_writeString>
		  nRF24L01_Transmit(&curr_direction, 1);
 8000520:	200f      	movs	r0, #15
 8000522:	ab02      	add	r3, sp, #8
 8000524:	2101      	movs	r1, #1
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	f002 f8dc 	bl	80026e4 <nRF24L01_Transmit>
		  nRF24L01_listen();
 800052c:	f002 f91a 	bl	8002764 <nRF24L01_listen>
		  HAL_Delay(300);
 8000530:	2096      	movs	r0, #150	; 0x96
 8000532:	0040      	lsls	r0, r0, #1
 8000534:	f000 f9d6 	bl	80008e4 <HAL_Delay>
	  if(prev_direction != curr_direction){
 8000538:	9603      	str	r6, [sp, #12]
 800053a:	e7ae      	b.n	800049a <main+0x1ea>
	  else if((joystick[0] > 4000) && (joystick[1] < 4000 && joystick[1] > 0)){
 800053c:	42ba      	cmp	r2, r7
 800053e:	d905      	bls.n	800054c <main+0x29c>
 8000540:	6871      	ldr	r1, [r6, #4]
 8000542:	3901      	subs	r1, #1
 8000544:	4299      	cmp	r1, r3
 8000546:	d801      	bhi.n	800054c <main+0x29c>
		  curr_direction = 2;
 8000548:	2302      	movs	r3, #2
 800054a:	e7ba      	b.n	80004c2 <main+0x212>
	  }else if((joystick[1] == 0) && (joystick[0] < 4000 && joystick[0] > 0)){
 800054c:	6871      	ldr	r1, [r6, #4]
 800054e:	1e50      	subs	r0, r2, #1
 8000550:	2900      	cmp	r1, #0
 8000552:	d103      	bne.n	800055c <main+0x2ac>
 8000554:	4298      	cmp	r0, r3
 8000556:	d8b5      	bhi.n	80004c4 <main+0x214>
		  curr_direction = 3;
 8000558:	2303      	movs	r3, #3
 800055a:	e7b2      	b.n	80004c2 <main+0x212>
	  }else if((joystick[1] > 4000) && (joystick[0] < 4000 && joystick[0] > 0)){
 800055c:	42b9      	cmp	r1, r7
 800055e:	d903      	bls.n	8000568 <main+0x2b8>
 8000560:	4298      	cmp	r0, r3
 8000562:	d8af      	bhi.n	80004c4 <main+0x214>
		  curr_direction = 4;
 8000564:	2304      	movs	r3, #4
 8000566:	e7ac      	b.n	80004c2 <main+0x212>
	  }else if((joystick[0] > 0 && joystick[0] < 4000) && (joystick[1] > 0 && joystick[1] < 4000)){
 8000568:	4298      	cmp	r0, r3
 800056a:	d8ab      	bhi.n	80004c4 <main+0x214>
 800056c:	42b9      	cmp	r1, r7
 800056e:	d0a9      	beq.n	80004c4 <main+0x214>
		  curr_direction = 5;
 8000570:	702c      	strb	r4, [r5, #0]
 8000572:	e7a7      	b.n	80004c4 <main+0x214>
		  else if(curr_direction == 2) ST7735_TFT_writeString("RIGHT Direction", 5, 25, YELLOW, BLUE);
 8000574:	2b02      	cmp	r3, #2
 8000576:	d105      	bne.n	8000584 <main+0x2d4>
 8000578:	2219      	movs	r2, #25
 800057a:	0021      	movs	r1, r4
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <main+0x33c>)
 800057e:	481d      	ldr	r0, [pc, #116]	; (80005f4 <main+0x344>)
 8000580:	9700      	str	r7, [sp, #0]
 8000582:	e7cb      	b.n	800051c <main+0x26c>
		  else if(curr_direction == 3) ST7735_TFT_writeString("BACKWARD Direct", 5, 25, YELLOW, BLUE);
 8000584:	2b03      	cmp	r3, #3
 8000586:	d105      	bne.n	8000594 <main+0x2e4>
 8000588:	2219      	movs	r2, #25
 800058a:	0021      	movs	r1, r4
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <main+0x33c>)
 800058e:	481a      	ldr	r0, [pc, #104]	; (80005f8 <main+0x348>)
 8000590:	9700      	str	r7, [sp, #0]
 8000592:	e7c3      	b.n	800051c <main+0x26c>
		  else if(curr_direction == 4) ST7735_TFT_writeString("FORWARD  Direct", 5, 25, YELLOW, BLUE);
 8000594:	2b04      	cmp	r3, #4
 8000596:	d105      	bne.n	80005a4 <main+0x2f4>
 8000598:	2219      	movs	r2, #25
 800059a:	0021      	movs	r1, r4
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <main+0x33c>)
 800059e:	4817      	ldr	r0, [pc, #92]	; (80005fc <main+0x34c>)
 80005a0:	9700      	str	r7, [sp, #0]
 80005a2:	e7bb      	b.n	800051c <main+0x26c>
		  else if(curr_direction == 5) ST7735_TFT_writeString("    STOPPED", 5, 25, YELLOW, BLUE);
 80005a4:	2b05      	cmp	r3, #5
 80005a6:	d1bb      	bne.n	8000520 <main+0x270>
 80005a8:	2219      	movs	r2, #25
 80005aa:	0021      	movs	r1, r4
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <main+0x33c>)
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <main+0x350>)
 80005b0:	9700      	str	r7, [sp, #0]
 80005b2:	e7b3      	b.n	800051c <main+0x26c>
 80005b4:	40021000 	.word	0x40021000
 80005b8:	48000400 	.word	0x48000400
 80005bc:	48000800 	.word	0x48000800
 80005c0:	20000128 	.word	0x20000128
 80005c4:	40013000 	.word	0x40013000
 80005c8:	2000018c 	.word	0x2000018c
 80005cc:	40003800 	.word	0x40003800
 80005d0:	200000a4 	.word	0x200000a4
 80005d4:	40012400 	.word	0x40012400
 80005d8:	20000000 	.word	0x20000000
 80005dc:	200001f0 	.word	0x200001f0
 80005e0:	00000f9e 	.word	0x00000f9e
 80005e4:	080030e0 	.word	0x080030e0
 80005e8:	080030eb 	.word	0x080030eb
 80005ec:	0000ffe0 	.word	0x0000ffe0
 80005f0:	080030f6 	.word	0x080030f6
 80005f4:	08003105 	.word	0x08003105
 80005f8:	08003115 	.word	0x08003115
 80005fc:	08003125 	.word	0x08003125
 8000600:	08003135 	.word	0x08003135

08000604 <Error_Handler>:
 8000604:	b672      	cpsid	i
  while (1)
 8000606:	e7fe      	b.n	8000606 <Error_Handler+0x2>

08000608 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000608:	2001      	movs	r0, #1
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_MspInit+0x2c>)
{
 800060c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	6999      	ldr	r1, [r3, #24]
 8000610:	4301      	orrs	r1, r0
 8000612:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4002      	ands	r2, r0
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	69da      	ldr	r2, [r3, #28]
 8000622:	430a      	orrs	r2, r1
 8000624:	61da      	str	r2, [r3, #28]
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	400b      	ands	r3, r1
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	b002      	add	sp, #8
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	0005      	movs	r5, r0
 800063c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	2214      	movs	r2, #20
 8000640:	2100      	movs	r1, #0
 8000642:	a803      	add	r0, sp, #12
 8000644:	f002 f8ce 	bl	80027e4 <memset>
  if(hadc->Instance==ADC1)
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <HAL_ADC_MspInit+0x84>)
 800064a:	682a      	ldr	r2, [r5, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	d133      	bne.n	80006b8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000650:	2680      	movs	r6, #128	; 0x80

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <HAL_ADC_MspInit+0x88>)
 8000656:	00b6      	lsls	r6, r6, #2
 8000658:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065c:	4332      	orrs	r2, r6
 800065e:	619a      	str	r2, [r3, #24]
 8000660:	699a      	ldr	r2, [r3, #24]
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000664:	4032      	ands	r2, r6
 8000666:	9201      	str	r2, [sp, #4]
 8000668:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	430a      	orrs	r2, r1
 8000670:	615a      	str	r2, [r3, #20]
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	400b      	ands	r3, r1
 8000676:	9302      	str	r3, [sp, #8]
 8000678:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800067a:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800067e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000680:	3b0f      	subs	r3, #15
 8000682:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f000 fc60 	bl	8000f48 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000688:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 800068a:	4c0e      	ldr	r4, [pc, #56]	; (80006c4 <HAL_ADC_MspInit+0x8c>)
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x90>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800068e:	60e2      	str	r2, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	0112      	lsls	r2, r2, #4
    hdma_adc.Instance = DMA1_Channel1;
 8000694:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000696:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000698:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800069a:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800069c:	0020      	movs	r0, r4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069e:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a0:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006a2:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80006a4:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80006a6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80006a8:	f000 fb94 	bl	8000dd4 <HAL_DMA_Init>
 80006ac:	2800      	cmp	r0, #0
 80006ae:	d001      	beq.n	80006b4 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 80006b0:	f7ff ffa8 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80006b4:	632c      	str	r4, [r5, #48]	; 0x30
 80006b6:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006b8:	b008      	add	sp, #32
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	40012400 	.word	0x40012400
 80006c0:	40021000 	.word	0x40021000
 80006c4:	200000e4 	.word	0x200000e4
 80006c8:	40020008 	.word	0x40020008

080006cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	0004      	movs	r4, r0
 80006d0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	2214      	movs	r2, #20
 80006d4:	2100      	movs	r1, #0
 80006d6:	a805      	add	r0, sp, #20
 80006d8:	f002 f884 	bl	80027e4 <memset>
  if(hspi->Instance==SPI1)
 80006dc:	6823      	ldr	r3, [r4, #0]
 80006de:	4a2b      	ldr	r2, [pc, #172]	; (800078c <HAL_SPI_MspInit+0xc0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d11e      	bne.n	8000722 <HAL_SPI_MspInit+0x56>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006e4:	2080      	movs	r0, #128	; 0x80
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <HAL_SPI_MspInit+0xc4>)
 80006e8:	0140      	lsls	r0, r0, #5
 80006ea:	6999      	ldr	r1, [r3, #24]
 80006ec:	4301      	orrs	r1, r0
 80006ee:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006f2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006f6:	4002      	ands	r2, r0
 80006f8:	9200      	str	r2, [sp, #0]
 80006fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	430a      	orrs	r2, r1
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	400b      	ands	r3, r1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	9b01      	ldr	r3, [sp, #4]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800070a:	2338      	movs	r3, #56	; 0x38
 800070c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	3b36      	subs	r3, #54	; 0x36
 8000710:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	3301      	adds	r3, #1
 8000714:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	481f      	ldr	r0, [pc, #124]	; (8000794 <HAL_SPI_MspInit+0xc8>)
 8000718:	a905      	add	r1, sp, #20
 800071a:	f000 fc15 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800071e:	b00b      	add	sp, #44	; 0x2c
 8000720:	bd30      	pop	{r4, r5, pc}
  else if(hspi->Instance==SPI2)
 8000722:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <HAL_SPI_MspInit+0xcc>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d1fa      	bne.n	800071e <HAL_SPI_MspInit+0x52>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000728:	2080      	movs	r0, #128	; 0x80
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <HAL_SPI_MspInit+0xc4>)
 800072c:	01c0      	lsls	r0, r0, #7
 800072e:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000732:	4301      	orrs	r1, r0
 8000734:	61d9      	str	r1, [r3, #28]
 8000736:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000738:	2403      	movs	r4, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 800073a:	4002      	ands	r2, r0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800073c:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_SPI2_CLK_ENABLE();
 800073e:	9202      	str	r2, [sp, #8]
 8000740:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	6959      	ldr	r1, [r3, #20]
 8000744:	0300      	lsls	r0, r0, #12
 8000746:	4301      	orrs	r1, r0
 8000748:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800074c:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000750:	4002      	ands	r2, r0
 8000752:	9203      	str	r2, [sp, #12]
 8000754:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	4810      	ldr	r0, [pc, #64]	; (800079c <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	430a      	orrs	r2, r1
 800075c:	615a      	str	r2, [r3, #20]
 800075e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	400b      	ands	r3, r1
 8000764:	9304      	str	r3, [sp, #16]
 8000766:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000768:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800076c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800076e:	3b07      	subs	r3, #7
 8000770:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000772:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f000 fbe8 	bl	8000f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000782:	3305      	adds	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000788:	9309      	str	r3, [sp, #36]	; 0x24
 800078a:	e7c4      	b.n	8000716 <HAL_SPI_MspInit+0x4a>
 800078c:	40013000 	.word	0x40013000
 8000790:	40021000 	.word	0x40021000
 8000794:	48000400 	.word	0x48000400
 8000798:	40003800 	.word	0x40003800
 800079c:	48000800 	.word	0x48000800

080007a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler>

080007a2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler>

080007a4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 f889 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bd10      	pop	{r4, pc}

080007b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80007b2:	4802      	ldr	r0, [pc, #8]	; (80007bc <DMA1_Channel1_IRQHandler+0xc>)
 80007b4:	f000 fb7e 	bl	8000eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007b8:	bd10      	pop	{r4, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	200000e4 	.word	0x200000e4

080007c0 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c0:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <_sbrk+0x30>)
 80007c2:	490c      	ldr	r1, [pc, #48]	; (80007f4 <_sbrk+0x34>)
{
 80007c4:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c6:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c8:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <_sbrk+0x38>)
{
 80007ca:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80007cc:	6810      	ldr	r0, [r2, #0]
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d101      	bne.n	80007d6 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <_sbrk+0x3c>)
 80007d4:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d6:	6810      	ldr	r0, [r2, #0]
 80007d8:	18c3      	adds	r3, r0, r3
 80007da:	428b      	cmp	r3, r1
 80007dc:	d906      	bls.n	80007ec <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80007de:	f001 ffd7 	bl	8002790 <__errno>
 80007e2:	230c      	movs	r3, #12
 80007e4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80007e6:	2001      	movs	r0, #1
 80007e8:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80007ea:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80007ec:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80007ee:	e7fc      	b.n	80007ea <_sbrk+0x2a>
 80007f0:	00000400 	.word	0x00000400
 80007f4:	20004000 	.word	0x20004000
 80007f8:	200001f8 	.word	0x200001f8
 80007fc:	20000228 	.word	0x20000228

08000800 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000800:	4770      	bx	lr
	...

08000804 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000806:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000808:	f7ff fffa 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490d      	ldr	r1, [pc, #52]	; (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0a      	ldr	r4, [pc, #40]	; (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000832:	f001 ffb3 	bl	800279c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff fd3b 	bl	80002b0 <main>

0800083a <LoopForever>:

LoopForever:
    b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   r0, =_estack
 800083c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000848:	080034ac 	.word	0x080034ac
  ldr r2, =_sbss
 800084c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000850:	20000224 	.word	0x20000224

08000854 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_COMP_IRQHandler>
	...

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	20fa      	movs	r0, #250	; 0xfa
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_InitTick+0x3c>)
 8000860:	0080      	lsls	r0, r0, #2
 8000862:	7819      	ldrb	r1, [r3, #0]
 8000864:	f7ff fc64 	bl	8000130 <__udivsi3>
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_InitTick+0x40>)
 800086a:	0001      	movs	r1, r0
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	f7ff fc5f 	bl	8000130 <__udivsi3>
 8000872:	f000 fa95 	bl	8000da0 <HAL_SYSTICK_Config>
 8000876:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000878:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087a:	2c00      	cmp	r4, #0
 800087c:	d109      	bne.n	8000892 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	2d03      	cmp	r5, #3
 8000880:	d807      	bhi.n	8000892 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000882:	3802      	subs	r0, #2
 8000884:	0022      	movs	r2, r4
 8000886:	0029      	movs	r1, r5
 8000888:	f000 fa54 	bl	8000d34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800088c:	0020      	movs	r0, r4
 800088e:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_InitTick+0x44>)
 8000890:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	20000010 	.word	0x20000010
 8000898:	2000000c 	.word	0x2000000c
 800089c:	20000014 	.word	0x20000014

080008a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	2310      	movs	r3, #16
 80008a2:	4a06      	ldr	r2, [pc, #24]	; (80008bc <HAL_Init+0x1c>)
{
 80008a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008aa:	430b      	orrs	r3, r1
 80008ac:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	f7ff ffd3 	bl	8000858 <HAL_InitTick>
  HAL_MspInit();
 80008b2:	f7ff fea9 	bl	8000608 <HAL_MspInit>
}
 80008b6:	2000      	movs	r0, #0
 80008b8:	bd10      	pop	{r4, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008c0:	4a03      	ldr	r2, [pc, #12]	; (80008d0 <HAL_IncTick+0x10>)
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <HAL_IncTick+0x14>)
 80008c4:	6811      	ldr	r1, [r2, #0]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	185b      	adds	r3, r3, r1
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	4770      	bx	lr
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	200001fc 	.word	0x200001fc
 80008d4:	20000010 	.word	0x20000010

080008d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008d8:	4b01      	ldr	r3, [pc, #4]	; (80008e0 <HAL_GetTick+0x8>)
 80008da:	6818      	ldr	r0, [r3, #0]
}
 80008dc:	4770      	bx	lr
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	200001fc 	.word	0x200001fc

080008e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff fff6 	bl	80008d8 <HAL_GetTick>
 80008ec:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ee:	1c63      	adds	r3, r4, #1
 80008f0:	d002      	beq.n	80008f8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <HAL_Delay+0x20>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008f8:	f7ff ffee 	bl	80008d8 <HAL_GetTick>
 80008fc:	1b40      	subs	r0, r0, r5
 80008fe:	42a0      	cmp	r0, r4
 8000900:	d3fa      	bcc.n	80008f8 <HAL_Delay+0x14>
  {
  }
}
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	20000010 	.word	0x20000010

08000908 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000908:	2300      	movs	r3, #0
{
 800090a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800090c:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800090e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000910:	6803      	ldr	r3, [r0, #0]
{
 8000912:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	400a      	ands	r2, r1
 8000918:	2a01      	cmp	r2, #1
 800091a:	d107      	bne.n	800092c <ADC_Enable+0x24>
 800091c:	6819      	ldr	r1, [r3, #0]
 800091e:	4211      	tst	r1, r2
 8000920:	d001      	beq.n	8000926 <ADC_Enable+0x1e>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000922:	2000      	movs	r0, #0
}
 8000924:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	0412      	lsls	r2, r2, #16
 800092a:	d4fa      	bmi.n	8000922 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800092c:	6899      	ldr	r1, [r3, #8]
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <ADC_Enable+0x94>)
 8000930:	4211      	tst	r1, r2
 8000932:	d008      	beq.n	8000946 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000934:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000936:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000938:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800093a:	4313      	orrs	r3, r2
 800093c:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800093e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000940:	4303      	orrs	r3, r0
 8000942:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000944:	e7ee      	b.n	8000924 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8000946:	2201      	movs	r2, #1
 8000948:	6899      	ldr	r1, [r3, #8]
 800094a:	430a      	orrs	r2, r1
 800094c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <ADC_Enable+0x98>)
 8000950:	4914      	ldr	r1, [pc, #80]	; (80009a4 <ADC_Enable+0x9c>)
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	f7ff fbec 	bl	8000130 <__udivsi3>
 8000958:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800095a:	9b01      	ldr	r3, [sp, #4]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d119      	bne.n	8000994 <ADC_Enable+0x8c>
    tickstart = HAL_GetTick();
 8000960:	f7ff ffba 	bl	80008d8 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000964:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000966:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	422b      	tst	r3, r5
 800096e:	d1d8      	bne.n	8000922 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000970:	f7ff ffb2 	bl	80008d8 <HAL_GetTick>
 8000974:	1b80      	subs	r0, r0, r6
 8000976:	2802      	cmp	r0, #2
 8000978:	d9f6      	bls.n	8000968 <ADC_Enable+0x60>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	422b      	tst	r3, r5
 8000980:	d1f2      	bne.n	8000968 <ADC_Enable+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000982:	2310      	movs	r3, #16
 8000984:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          return HAL_ERROR;
 8000986:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000988:	4313      	orrs	r3, r2
 800098a:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800098c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800098e:	431d      	orrs	r5, r3
 8000990:	63e5      	str	r5, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000992:	e7c7      	b.n	8000924 <ADC_Enable+0x1c>
      wait_loop_index--;
 8000994:	9b01      	ldr	r3, [sp, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	e7de      	b.n	800095a <ADC_Enable+0x52>
 800099c:	80000017 	.word	0x80000017
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	000f4240 	.word	0x000f4240

080009a8 <HAL_ADC_Init>:
{
 80009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009aa:	0004      	movs	r4, r0
    return HAL_ERROR;
 80009ac:	2001      	movs	r0, #1
  if(hadc == NULL)
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d100      	bne.n	80009b4 <HAL_ADC_Init+0xc>
 80009b2:	e080      	b.n	8000ab6 <HAL_ADC_Init+0x10e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d106      	bne.n	80009c8 <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
 80009ba:	0022      	movs	r2, r4
 80009bc:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80009be:	63e3      	str	r3, [r4, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80009c0:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80009c2:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80009c4:	f7ff fe38 	bl	8000638 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80009ca:	06db      	lsls	r3, r3, #27
 80009cc:	d500      	bpl.n	80009d0 <HAL_ADC_Init+0x28>
 80009ce:	e087      	b.n	8000ae0 <HAL_ADC_Init+0x138>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	2204      	movs	r2, #4
 80009d4:	6899      	ldr	r1, [r3, #8]
 80009d6:	0008      	movs	r0, r1
 80009d8:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80009da:	4211      	tst	r1, r2
 80009dc:	d000      	beq.n	80009e0 <HAL_ADC_Init+0x38>
 80009de:	e07f      	b.n	8000ae0 <HAL_ADC_Init+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 80009e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009e2:	4942      	ldr	r1, [pc, #264]	; (8000aec <HAL_ADC_Init+0x144>)
 80009e4:	4011      	ands	r1, r2
 80009e6:	2202      	movs	r2, #2
 80009e8:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80009ea:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80009ec:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	400a      	ands	r2, r1
 80009f2:	2a01      	cmp	r2, #1
 80009f4:	d105      	bne.n	8000a02 <HAL_ADC_Init+0x5a>
 80009f6:	6819      	ldr	r1, [r3, #0]
 80009f8:	4211      	tst	r1, r2
 80009fa:	d10e      	bne.n	8000a1a <HAL_ADC_Init+0x72>
 80009fc:	68da      	ldr	r2, [r3, #12]
 80009fe:	0412      	lsls	r2, r2, #16
 8000a00:	d40b      	bmi.n	8000a1a <HAL_ADC_Init+0x72>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000a02:	2118      	movs	r1, #24
 8000a04:	68da      	ldr	r2, [r3, #12]
 8000a06:	438a      	bics	r2, r1
 8000a08:	68a1      	ldr	r1, [r4, #8]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000a0e:	6919      	ldr	r1, [r3, #16]
 8000a10:	6862      	ldr	r2, [r4, #4]
 8000a12:	0089      	lsls	r1, r1, #2
 8000a14:	0889      	lsrs	r1, r1, #2
 8000a16:	4311      	orrs	r1, r2
 8000a18:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000a1a:	68da      	ldr	r2, [r3, #12]
 8000a1c:	4934      	ldr	r1, [pc, #208]	; (8000af0 <HAL_ADC_Init+0x148>)
 8000a1e:	400a      	ands	r2, r1
 8000a20:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000a22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a24:	7e26      	ldrb	r6, [r4, #24]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000a26:	1e57      	subs	r7, r2, #1
 8000a28:	1e7a      	subs	r2, r7, #1
 8000a2a:	4197      	sbcs	r7, r2
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000a2c:	7e61      	ldrb	r1, [r4, #25]
 8000a2e:	68e2      	ldr	r2, [r4, #12]
 8000a30:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a32:	03b6      	lsls	r6, r6, #14
 8000a34:	430e      	orrs	r6, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a36:	7ea5      	ldrb	r5, [r4, #26]
 8000a38:	4316      	orrs	r6, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000a3a:	6922      	ldr	r2, [r4, #16]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a3c:	0369      	lsls	r1, r5, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000a3e:	033f      	lsls	r7, r7, #12
 8000a40:	430e      	orrs	r6, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000a42:	2a02      	cmp	r2, #2
 8000a44:	d100      	bne.n	8000a48 <HAL_ADC_Init+0xa0>
 8000a46:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000a48:	1d62      	adds	r2, r4, #5
 8000a4a:	7fd2      	ldrb	r2, [r2, #31]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a4c:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000a4e:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000a50:	4332      	orrs	r2, r6
 8000a52:	433a      	orrs	r2, r7
 8000a54:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a56:	2901      	cmp	r1, #1
 8000a58:	d104      	bne.n	8000a64 <HAL_ADC_Init+0xbc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d12c      	bne.n	8000ab8 <HAL_ADC_Init+0x110>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a64:	20c2      	movs	r0, #194	; 0xc2
 8000a66:	69e1      	ldr	r1, [r4, #28]
 8000a68:	30ff      	adds	r0, #255	; 0xff
 8000a6a:	4281      	cmp	r1, r0
 8000a6c:	d002      	beq.n	8000a74 <HAL_ADC_Init+0xcc>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000a6e:	6a20      	ldr	r0, [r4, #32]
 8000a70:	4301      	orrs	r1, r0
 8000a72:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a74:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000a76:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a78:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000a7a:	4311      	orrs	r1, r2
 8000a7c:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a80:	4281      	cmp	r1, r0
 8000a82:	d002      	beq.n	8000a8a <HAL_ADC_Init+0xe2>
 8000a84:	1e48      	subs	r0, r1, #1
 8000a86:	2806      	cmp	r0, #6
 8000a88:	d807      	bhi.n	8000a9a <HAL_ADC_Init+0xf2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a8a:	2507      	movs	r5, #7
 8000a8c:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000a8e:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000a90:	43a8      	bics	r0, r5
 8000a92:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000a94:	6958      	ldr	r0, [r3, #20]
 8000a96:	4301      	orrs	r1, r0
 8000a98:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4915      	ldr	r1, [pc, #84]	; (8000af4 <HAL_ADC_Init+0x14c>)
 8000a9e:	400b      	ands	r3, r1
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d111      	bne.n	8000ac8 <HAL_ADC_Init+0x120>
      ADC_CLEAR_ERRORCODE(hadc);
 8000aa4:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000aa6:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000aa8:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000aac:	4393      	bics	r3, r2
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ab8:	2020      	movs	r0, #32
 8000aba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000abc:	4328      	orrs	r0, r5
 8000abe:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000ac2:	4301      	orrs	r1, r0
 8000ac4:	63e1      	str	r1, [r4, #60]	; 0x3c
 8000ac6:	e7cd      	b.n	8000a64 <HAL_ADC_Init+0xbc>
      ADC_STATE_CLR_SET(hadc->State,
 8000ac8:	2212      	movs	r2, #18
 8000aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000acc:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000ace:	4393      	bics	r3, r2
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ada:	4303      	orrs	r3, r0
 8000adc:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8000ade:	e7ea      	b.n	8000ab6 <HAL_ADC_Init+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000ae4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000aea:	e7e4      	b.n	8000ab6 <HAL_ADC_Init+0x10e>
 8000aec:	fffffefd 	.word	0xfffffefd
 8000af0:	fffe0219 	.word	0xfffe0219
 8000af4:	833fffe7 	.word	0x833fffe7

08000af8 <HAL_ADC_Start_DMA>:
{
 8000af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000afa:	6803      	ldr	r3, [r0, #0]
{
 8000afc:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000afe:	689b      	ldr	r3, [r3, #8]
{
 8000b00:	000e      	movs	r6, r1
    tmp_hal_status = HAL_BUSY;
 8000b02:	2002      	movs	r0, #2
{
 8000b04:	9201      	str	r2, [sp, #4]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b06:	075b      	lsls	r3, r3, #29
 8000b08:	d430      	bmi.n	8000b6c <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8000b0a:	0027      	movs	r7, r4
 8000b0c:	3734      	adds	r7, #52	; 0x34
 8000b0e:	783b      	ldrb	r3, [r7, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d02b      	beq.n	8000b6c <HAL_ADC_Start_DMA+0x74>
 8000b14:	2301      	movs	r3, #1
 8000b16:	703b      	strb	r3, [r7, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000b18:	7e63      	ldrb	r3, [r4, #25]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d127      	bne.n	8000b6e <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8000b1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b20:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000b22:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000b24:	401a      	ands	r2, r3
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	63a3      	str	r3, [r4, #56]	; 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 8000b2e:	63e5      	str	r5, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8000b30:	703d      	strb	r5, [r7, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b32:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b36:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b38:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_ADC_Start_DMA+0x8c>)
 8000b3c:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_ADC_Start_DMA+0x90>)
 8000b40:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b42:	231c      	movs	r3, #28
 8000b44:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000b46:	684a      	ldr	r2, [r1, #4]
 8000b48:	3b0c      	subs	r3, #12
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	68ca      	ldr	r2, [r1, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b56:	0032      	movs	r2, r6
 8000b58:	9b01      	ldr	r3, [sp, #4]
 8000b5a:	3140      	adds	r1, #64	; 0x40
 8000b5c:	f000 f96c 	bl	8000e38 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000b60:	2304      	movs	r3, #4
 8000b62:	0028      	movs	r0, r5
 8000b64:	6822      	ldr	r2, [r4, #0]
 8000b66:	6891      	ldr	r1, [r2, #8]
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	6093      	str	r3, [r2, #8]
}
 8000b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000b6e:	0020      	movs	r0, r4
 8000b70:	f7ff feca 	bl	8000908 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d0d2      	beq.n	8000b1e <HAL_ADC_Start_DMA+0x26>
 8000b78:	e7f8      	b.n	8000b6c <HAL_ADC_Start_DMA+0x74>
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	fffff0fe 	.word	0xfffff0fe
 8000b80:	08000b91 	.word	0x08000b91
 8000b84:	08000c03 	.word	0x08000c03
 8000b88:	08000c0f 	.word	0x08000c0f

08000b8c <HAL_ADC_ConvCpltCallback>:
 8000b8c:	4770      	bx	lr
	...

08000b90 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000b90:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b92:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000b94:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000b96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000b98:	4211      	tst	r1, r2
 8000b9a:	d12a      	bne.n	8000bf2 <ADC_DMAConvCplt+0x62>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b9c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000b9e:	32b1      	adds	r2, #177	; 0xb1
 8000ba0:	32ff      	adds	r2, #255	; 0xff
 8000ba2:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ba4:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ba6:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	0109      	lsls	r1, r1, #4
 8000bac:	68d0      	ldr	r0, [r2, #12]
 8000bae:	4208      	tst	r0, r1
 8000bb0:	d112      	bne.n	8000bd8 <ADC_DMAConvCplt+0x48>
 8000bb2:	7e99      	ldrb	r1, [r3, #26]
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	d10f      	bne.n	8000bd8 <ADC_DMAConvCplt+0x48>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000bb8:	6811      	ldr	r1, [r2, #0]
 8000bba:	0709      	lsls	r1, r1, #28
 8000bbc:	d50c      	bpl.n	8000bd8 <ADC_DMAConvCplt+0x48>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000bbe:	6891      	ldr	r1, [r2, #8]
 8000bc0:	0749      	lsls	r1, r1, #29
 8000bc2:	d40d      	bmi.n	8000be0 <ADC_DMAConvCplt+0x50>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000bc4:	200c      	movs	r0, #12
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	4381      	bics	r1, r0
 8000bca:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bce:	490b      	ldr	r1, [pc, #44]	; (8000bfc <ADC_DMAConvCplt+0x6c>)
 8000bd0:	4011      	ands	r1, r2
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ffd7 	bl	8000b8c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000bde:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000be0:	2220      	movs	r2, #32
 8000be2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000be4:	430a      	orrs	r2, r1
 8000be6:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be8:	2201      	movs	r2, #1
 8000bea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000bec:	430a      	orrs	r2, r1
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bf0:	e7f2      	b.n	8000bd8 <ADC_DMAConvCplt+0x48>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4798      	blx	r3
}
 8000bf8:	e7f1      	b.n	8000bde <ADC_DMAConvCplt+0x4e>
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	fffffefe 	.word	0xfffffefe

08000c00 <HAL_ADC_ConvHalfCpltCallback>:
 8000c00:	4770      	bx	lr

08000c02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000c02:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000c04:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000c06:	f7ff fffb 	bl	8000c00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000c0a:	bd10      	pop	{r4, pc}

08000c0c <HAL_ADC_ErrorCallback>:
 8000c0c:	4770      	bx	lr

08000c0e <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000c0e:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c10:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000c12:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000c14:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000c16:	4313      	orrs	r3, r2
 8000c18:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8000c22:	f7ff fff3 	bl	8000c0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000c26:	bd10      	pop	{r4, pc}

08000c28 <HAL_ADC_ConfigChannel>:
{
 8000c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000c2a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8000c2c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000c2e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000c30:	3434      	adds	r4, #52	; 0x34
 8000c32:	7822      	ldrb	r2, [r4, #0]
{
 8000c34:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c36:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8000c38:	2002      	movs	r0, #2
 8000c3a:	2a01      	cmp	r2, #1
 8000c3c:	d02b      	beq.n	8000c96 <HAL_ADC_ConfigChannel+0x6e>
 8000c3e:	3801      	subs	r0, #1
 8000c40:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	6896      	ldr	r6, [r2, #8]
 8000c46:	0776      	lsls	r6, r6, #29
 8000c48:	d461      	bmi.n	8000d0e <HAL_ADC_ConfigChannel+0xe6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000c4a:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8000c4c:	4f32      	ldr	r7, [pc, #200]	; (8000d18 <HAL_ADC_ConfigChannel+0xf0>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000c4e:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000c50:	001e      	movs	r6, r3
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000c52:	4684      	mov	ip, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 8000c54:	6848      	ldr	r0, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000c56:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8000c58:	42b8      	cmp	r0, r7
 8000c5a:	d040      	beq.n	8000cde <HAL_ADC_ConfigChannel+0xb6>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000c5c:	4660      	mov	r0, ip
 8000c5e:	6a97      	ldr	r7, [r2, #40]	; 0x28
 8000c60:	4338      	orrs	r0, r7
 8000c62:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c64:	2080      	movs	r0, #128	; 0x80
 8000c66:	0540      	lsls	r0, r0, #21
 8000c68:	4285      	cmp	r5, r0
 8000c6a:	d00f      	beq.n	8000c8c <HAL_ADC_ConfigChannel+0x64>
 8000c6c:	3d01      	subs	r5, #1
 8000c6e:	2d06      	cmp	r5, #6
 8000c70:	d90c      	bls.n	8000c8c <HAL_ADC_ConfigChannel+0x64>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000c72:	2007      	movs	r0, #7
 8000c74:	6955      	ldr	r5, [r2, #20]
 8000c76:	6889      	ldr	r1, [r1, #8]
 8000c78:	4005      	ands	r5, r0
 8000c7a:	42a9      	cmp	r1, r5
 8000c7c:	d006      	beq.n	8000c8c <HAL_ADC_ConfigChannel+0x64>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c7e:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000c80:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c82:	4385      	bics	r5, r0
 8000c84:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000c86:	6955      	ldr	r5, [r2, #20]
 8000c88:	4329      	orrs	r1, r5
 8000c8a:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000c8c:	2e02      	cmp	r6, #2
 8000c8e:	d903      	bls.n	8000c98 <HAL_ADC_ConfigChannel+0x70>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c90:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000c92:	2300      	movs	r3, #0
 8000c94:	7023      	strb	r3, [r4, #0]
}
 8000c96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000c98:	4820      	ldr	r0, [pc, #128]	; (8000d1c <HAL_ADC_ConfigChannel+0xf4>)
 8000c9a:	6801      	ldr	r1, [r0, #0]
 8000c9c:	2b10      	cmp	r3, #16
 8000c9e:	d01b      	beq.n	8000cd8 <HAL_ADC_ConfigChannel+0xb0>
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	3a11      	subs	r2, #17
 8000ca4:	4255      	negs	r5, r2
 8000ca6:	416a      	adcs	r2, r5
 8000ca8:	4d1d      	ldr	r5, [pc, #116]	; (8000d20 <HAL_ADC_ConfigChannel+0xf8>)
 8000caa:	4252      	negs	r2, r2
 8000cac:	402a      	ands	r2, r5
 8000cae:	2580      	movs	r5, #128	; 0x80
 8000cb0:	046d      	lsls	r5, r5, #17
 8000cb2:	1952      	adds	r2, r2, r5
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	d1e9      	bne.n	8000c90 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_ADC_ConfigChannel+0xfc>)
 8000cbe:	491a      	ldr	r1, [pc, #104]	; (8000d28 <HAL_ADC_ConfigChannel+0x100>)
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	f7ff fa35 	bl	8000130 <__udivsi3>
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	4343      	muls	r3, r0
            wait_loop_index--;
 8000cca:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000ccc:	9b01      	ldr	r3, [sp, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0de      	beq.n	8000c90 <HAL_ADC_ConfigChannel+0x68>
            wait_loop_index--;
 8000cd2:	9b01      	ldr	r3, [sp, #4]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	e7f8      	b.n	8000cca <HAL_ADC_ConfigChannel+0xa2>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	0412      	lsls	r2, r2, #16
 8000cdc:	e7ea      	b.n	8000cb4 <HAL_ADC_ConfigChannel+0x8c>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000cde:	4660      	mov	r0, ip
 8000ce0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000ce2:	4381      	bics	r1, r0
 8000ce4:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ce6:	2e02      	cmp	r6, #2
 8000ce8:	d8d2      	bhi.n	8000c90 <HAL_ADC_ConfigChannel+0x68>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000cea:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <HAL_ADC_ConfigChannel+0xf4>)
 8000cec:	6811      	ldr	r1, [r2, #0]
 8000cee:	2b10      	cmp	r3, #16
 8000cf0:	d00b      	beq.n	8000d0a <HAL_ADC_ConfigChannel+0xe2>
 8000cf2:	3b11      	subs	r3, #17
 8000cf4:	4258      	negs	r0, r3
 8000cf6:	4143      	adcs	r3, r0
 8000cf8:	20c0      	movs	r0, #192	; 0xc0
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	0400      	lsls	r0, r0, #16
 8000cfe:	4003      	ands	r3, r0
 8000d00:	480a      	ldr	r0, [pc, #40]	; (8000d2c <HAL_ADC_ConfigChannel+0x104>)
 8000d02:	181b      	adds	r3, r3, r0
 8000d04:	400b      	ands	r3, r1
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e7c2      	b.n	8000c90 <HAL_ADC_ConfigChannel+0x68>
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_ADC_ConfigChannel+0x108>)
 8000d0c:	e7fa      	b.n	8000d04 <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d0e:	2220      	movs	r2, #32
 8000d10:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d12:	430a      	orrs	r2, r1
 8000d14:	639a      	str	r2, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000d16:	e7bc      	b.n	8000c92 <HAL_ADC_ConfigChannel+0x6a>
 8000d18:	00001001 	.word	0x00001001
 8000d1c:	40012708 	.word	0x40012708
 8000d20:	ff400000 	.word	0xff400000
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	000f4240 	.word	0x000f4240
 8000d2c:	feffffff 	.word	0xfeffffff
 8000d30:	ff7fffff 	.word	0xff7fffff

08000d34 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d34:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d36:	25ff      	movs	r5, #255	; 0xff
 8000d38:	2403      	movs	r4, #3
 8000d3a:	002a      	movs	r2, r5
 8000d3c:	4004      	ands	r4, r0
 8000d3e:	00e4      	lsls	r4, r4, #3
 8000d40:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d42:	0189      	lsls	r1, r1, #6
 8000d44:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d46:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d48:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	db0a      	blt.n	8000d66 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d50:	24c0      	movs	r4, #192	; 0xc0
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_NVIC_SetPriority+0x4c>)
 8000d54:	0880      	lsrs	r0, r0, #2
 8000d56:	0080      	lsls	r0, r0, #2
 8000d58:	18c0      	adds	r0, r0, r3
 8000d5a:	00a4      	lsls	r4, r4, #2
 8000d5c:	5903      	ldr	r3, [r0, r4]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	4311      	orrs	r1, r2
 8000d62:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000d64:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d66:	200f      	movs	r0, #15
 8000d68:	4003      	ands	r3, r0
 8000d6a:	3b08      	subs	r3, #8
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_NVIC_SetPriority+0x50>)
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	181b      	adds	r3, r3, r0
 8000d74:	69d8      	ldr	r0, [r3, #28]
 8000d76:	4002      	ands	r2, r0
 8000d78:	4311      	orrs	r1, r2
 8000d7a:	61d9      	str	r1, [r3, #28]
 8000d7c:	e7f2      	b.n	8000d64 <HAL_NVIC_SetPriority+0x30>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	db05      	blt.n	8000d98 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8c:	231f      	movs	r3, #31
 8000d8e:	4018      	ands	r0, r3
 8000d90:	3b1e      	subs	r3, #30
 8000d92:	4083      	lsls	r3, r0
 8000d94:	4a01      	ldr	r2, [pc, #4]	; (8000d9c <HAL_NVIC_EnableIRQ+0x14>)
 8000d96:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d98:	4770      	bx	lr
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	1e43      	subs	r3, r0, #1
 8000da4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d20d      	bcs.n	8000dc8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	6a03      	ldr	r3, [r0, #32]
 8000db6:	0609      	lsls	r1, r1, #24
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dc8:	4770      	bx	lr
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	e000e010 	.word	0xe000e010
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8000dd8:	2001      	movs	r0, #1
  if (NULL == hdma)
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d024      	beq.n	8000e28 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dde:	2302      	movs	r3, #2
 8000de0:	1ca5      	adds	r5, r4, #2
 8000de2:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000de4:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8000de8:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dea:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dec:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000dee:	6863      	ldr	r3, [r4, #4]
 8000df0:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df2:	68e1      	ldr	r1, [r4, #12]
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6921      	ldr	r1, [r4, #16]
 8000df8:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfa:	6961      	ldr	r1, [r4, #20]
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	69a1      	ldr	r1, [r4, #24]
 8000e00:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e02:	69e1      	ldr	r1, [r4, #28]
 8000e04:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000e06:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e08:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_DMA_Init+0x5c>)
 8000e0c:	2114      	movs	r1, #20
 8000e0e:	18c0      	adds	r0, r0, r3
 8000e10:	f7ff f98e 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e16:	0080      	lsls	r0, r0, #2
 8000e18:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e1a:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e1c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000e1e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e20:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000e22:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8000e24:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000e26:	77e0      	strb	r0, [r4, #31]
}
 8000e28:	bd70      	pop	{r4, r5, r6, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	ffffc00f 	.word	0xffffc00f
 8000e30:	bffdfff8 	.word	0xbffdfff8
 8000e34:	40020000 	.word	0x40020000

08000e38 <HAL_DMA_Start_IT>:
{
 8000e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000e3a:	1c45      	adds	r5, r0, #1
{
 8000e3c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8000e3e:	7feb      	ldrb	r3, [r5, #31]
{
 8000e40:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000e42:	2002      	movs	r0, #2
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d027      	beq.n	8000e98 <HAL_DMA_Start_IT+0x60>
 8000e48:	2301      	movs	r3, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8000e4a:	1827      	adds	r7, r4, r0
  __HAL_LOCK(hdma);
 8000e4c:	77eb      	strb	r3, [r5, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8000e4e:	7ffb      	ldrb	r3, [r7, #31]
 8000e50:	2600      	movs	r6, #0
 8000e52:	469c      	mov	ip, r3
 8000e54:	4660      	mov	r0, ip
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2801      	cmp	r0, #1
 8000e5a:	d128      	bne.n	8000eae <HAL_DMA_Start_IT+0x76>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e5c:	3001      	adds	r0, #1
 8000e5e:	77f8      	strb	r0, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e60:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e62:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e64:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e66:	6c26      	ldr	r6, [r4, #64]	; 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e68:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e6a:	40b3      	lsls	r3, r6
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e6c:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e6e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000e70:	606b      	str	r3, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8000e72:	9b01      	ldr	r3, [sp, #4]
 8000e74:	6043      	str	r3, [r0, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e76:	6863      	ldr	r3, [r4, #4]
 8000e78:	2b10      	cmp	r3, #16
 8000e7a:	d10e      	bne.n	8000e9a <HAL_DMA_Start_IT+0x62>
    hdma->Instance->CPAR = DstAddress;
 8000e7c:	6082      	str	r2, [r0, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e7e:	60c1      	str	r1, [r0, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8000e80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e82:	6802      	ldr	r2, [r0, #0]
    if (NULL != hdma->XferHalfCpltCallback)
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00b      	beq.n	8000ea0 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e88:	230e      	movs	r3, #14
 8000e8a:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e8c:	6003      	str	r3, [r0, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	6802      	ldr	r2, [r0, #0]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e96:	2000      	movs	r0, #0
}
 8000e98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000e9a:	6081      	str	r1, [r0, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e9c:	60c2      	str	r2, [r0, #12]
 8000e9e:	e7ef      	b.n	8000e80 <HAL_DMA_Start_IT+0x48>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ea0:	230a      	movs	r3, #10
 8000ea2:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ea4:	2204      	movs	r2, #4
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ea6:	6003      	str	r3, [r0, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ea8:	6803      	ldr	r3, [r0, #0]
 8000eaa:	4393      	bics	r3, r2
 8000eac:	e7ee      	b.n	8000e8c <HAL_DMA_Start_IT+0x54>
    status = HAL_BUSY;
 8000eae:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8000eb0:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8000eb2:	e7f1      	b.n	8000e98 <HAL_DMA_Start_IT+0x60>

08000eb4 <HAL_DMA_IRQHandler>:
{
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000eb6:	2704      	movs	r7, #4
 8000eb8:	003e      	movs	r6, r7
 8000eba:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ebc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ebe:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ec0:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000ec2:	6803      	ldr	r3, [r0, #0]
 8000ec4:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ec6:	4235      	tst	r5, r6
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0x32>
 8000eca:	423c      	tst	r4, r7
 8000ecc:	d00b      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ece:	6819      	ldr	r1, [r3, #0]
 8000ed0:	0689      	lsls	r1, r1, #26
 8000ed2:	d402      	bmi.n	8000eda <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	43b9      	bics	r1, r7
 8000ed8:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8000eda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000edc:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d019      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8000ee2:	4798      	blx	r3
}
 8000ee4:	e017      	b.n	8000f16 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000ee6:	2702      	movs	r7, #2
 8000ee8:	003e      	movs	r6, r7
 8000eea:	408e      	lsls	r6, r1
 8000eec:	4235      	tst	r5, r6
 8000eee:	d013      	beq.n	8000f18 <HAL_DMA_IRQHandler+0x64>
 8000ef0:	423c      	tst	r4, r7
 8000ef2:	d011      	beq.n	8000f18 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ef4:	6819      	ldr	r1, [r3, #0]
 8000ef6:	0689      	lsls	r1, r1, #26
 8000ef8:	d406      	bmi.n	8000f08 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000efa:	240a      	movs	r4, #10
 8000efc:	6819      	ldr	r1, [r3, #0]
 8000efe:	43a1      	bics	r1, r4
 8000f00:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000f02:	2101      	movs	r1, #1
 8000f04:	19c3      	adds	r3, r0, r7
 8000f06:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f08:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	1c43      	adds	r3, r0, #1
 8000f0e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8000f10:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if (hdma->XferErrorCallback != NULL)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d1e5      	bne.n	8000ee2 <HAL_DMA_IRQHandler+0x2e>
}
 8000f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f18:	2608      	movs	r6, #8
 8000f1a:	0037      	movs	r7, r6
 8000f1c:	408f      	lsls	r7, r1
 8000f1e:	423d      	tst	r5, r7
 8000f20:	d0f9      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x62>
 8000f22:	4234      	tst	r4, r6
 8000f24:	d0f7      	beq.n	8000f16 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f26:	250e      	movs	r5, #14
 8000f28:	681c      	ldr	r4, [r3, #0]
 8000f2a:	43ac      	bics	r4, r5
 8000f2c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	001c      	movs	r4, r3
 8000f32:	408c      	lsls	r4, r1
 8000f34:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f36:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f38:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000f3a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	18c3      	adds	r3, r0, r3
 8000f40:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8000f42:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000f44:	e7e5      	b.n	8000f12 <HAL_DMA_IRQHandler+0x5e>
	...

08000f48 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f48:	4a5a      	ldr	r2, [pc, #360]	; (80010b4 <HAL_GPIO_Init+0x16c>)
{
 8000f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f4c:	1882      	adds	r2, r0, r2
 8000f4e:	1e54      	subs	r4, r2, #1
 8000f50:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
{
 8000f54:	b089      	sub	sp, #36	; 0x24
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f56:	3204      	adds	r2, #4
{
 8000f58:	9103      	str	r1, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f5a:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5c:	9a03      	ldr	r2, [sp, #12]
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	0014      	movs	r4, r2
 8000f62:	40dc      	lsrs	r4, r3
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  } 
}
 8000f66:	b009      	add	sp, #36	; 0x24
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	000d      	movs	r5, r1
 8000f6e:	0014      	movs	r4, r2
 8000f70:	409d      	lsls	r5, r3
 8000f72:	402c      	ands	r4, r5
 8000f74:	468c      	mov	ip, r1
 8000f76:	9402      	str	r4, [sp, #8]
    if (iocurrent != 0x00u)
 8000f78:	422a      	tst	r2, r5
 8000f7a:	d100      	bne.n	8000f7e <HAL_GPIO_Init+0x36>
 8000f7c:	e098      	b.n	80010b0 <HAL_GPIO_Init+0x168>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f7e:	2403      	movs	r4, #3
 8000f80:	9a03      	ldr	r2, [sp, #12]
 8000f82:	005e      	lsls	r6, r3, #1
 8000f84:	6852      	ldr	r2, [r2, #4]
 8000f86:	9201      	str	r2, [sp, #4]
 8000f88:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f8a:	40b4      	lsls	r4, r6
 8000f8c:	43e1      	mvns	r1, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f8e:	1e54      	subs	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f90:	9104      	str	r1, [sp, #16]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f92:	4564      	cmp	r4, ip
 8000f94:	d82a      	bhi.n	8000fec <HAL_GPIO_Init+0xa4>
        temp = GPIOx->OSPEEDR;
 8000f96:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f98:	400f      	ands	r7, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f9a:	9903      	ldr	r1, [sp, #12]
 8000f9c:	68cc      	ldr	r4, [r1, #12]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9e:	9901      	ldr	r1, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa0:	40b4      	lsls	r4, r6
 8000fa2:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8000fa4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000fa6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa8:	43ac      	bics	r4, r5
 8000faa:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fac:	090c      	lsrs	r4, r1, #4
 8000fae:	4661      	mov	r1, ip
 8000fb0:	400c      	ands	r4, r1
 8000fb2:	409c      	lsls	r4, r3
 8000fb4:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000fb6:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000fb8:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fba:	9904      	ldr	r1, [sp, #16]
 8000fbc:	400d      	ands	r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fbe:	9903      	ldr	r1, [sp, #12]
 8000fc0:	688c      	ldr	r4, [r1, #8]
 8000fc2:	40b4      	lsls	r4, r6
 8000fc4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000fc6:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	2a02      	cmp	r2, #2
 8000fca:	d111      	bne.n	8000ff0 <HAL_GPIO_Init+0xa8>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fcc:	2507      	movs	r5, #7
 8000fce:	210f      	movs	r1, #15
 8000fd0:	401d      	ands	r5, r3
 8000fd2:	00ad      	lsls	r5, r5, #2
 8000fd4:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000fd6:	08dc      	lsrs	r4, r3, #3
 8000fd8:	00a4      	lsls	r4, r4, #2
 8000fda:	1904      	adds	r4, r0, r4
 8000fdc:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fde:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe0:	9903      	ldr	r1, [sp, #12]
 8000fe2:	6909      	ldr	r1, [r1, #16]
 8000fe4:	40a9      	lsls	r1, r5
 8000fe6:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000fe8:	6227      	str	r7, [r4, #32]
 8000fea:	e001      	b.n	8000ff0 <HAL_GPIO_Init+0xa8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fec:	2a03      	cmp	r2, #3
 8000fee:	d1e3      	bne.n	8000fb8 <HAL_GPIO_Init+0x70>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff0:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8000ff2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ff4:	9904      	ldr	r1, [sp, #16]
 8000ff6:	4021      	ands	r1, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff8:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8000ffa:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ffc:	22c0      	movs	r2, #192	; 0xc0
 8000ffe:	9901      	ldr	r1, [sp, #4]
 8001000:	0292      	lsls	r2, r2, #10
 8001002:	4211      	tst	r1, r2
 8001004:	d054      	beq.n	80010b0 <HAL_GPIO_Init+0x168>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001006:	2601      	movs	r6, #1
 8001008:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <HAL_GPIO_Init+0x170>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100a:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100c:	6994      	ldr	r4, [r2, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800100e:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4334      	orrs	r4, r6
 8001012:	6194      	str	r4, [r2, #24]
 8001014:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001016:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4032      	ands	r2, r6
 800101a:	9207      	str	r2, [sp, #28]
 800101c:	9a07      	ldr	r2, [sp, #28]
        temp = SYSCFG->EXTICR[position >> 2u];
 800101e:	4a27      	ldr	r2, [pc, #156]	; (80010bc <HAL_GPIO_Init+0x174>)
 8001020:	00a4      	lsls	r4, r4, #2
 8001022:	18a4      	adds	r4, r4, r2
 8001024:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001026:	403d      	ands	r5, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8001028:	4694      	mov	ip, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102a:	220f      	movs	r2, #15
 800102c:	00ad      	lsls	r5, r5, #2
 800102e:	40aa      	lsls	r2, r5
 8001030:	4661      	mov	r1, ip
 8001032:	4391      	bics	r1, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001034:	2290      	movs	r2, #144	; 0x90
 8001036:	05d2      	lsls	r2, r2, #23
 8001038:	4694      	mov	ip, r2
 800103a:	2200      	movs	r2, #0
 800103c:	4560      	cmp	r0, ip
 800103e:	d00d      	beq.n	800105c <HAL_GPIO_Init+0x114>
 8001040:	4a1f      	ldr	r2, [pc, #124]	; (80010c0 <HAL_GPIO_Init+0x178>)
 8001042:	4694      	mov	ip, r2
 8001044:	0032      	movs	r2, r6
 8001046:	4560      	cmp	r0, ip
 8001048:	d008      	beq.n	800105c <HAL_GPIO_Init+0x114>
 800104a:	4e1e      	ldr	r6, [pc, #120]	; (80010c4 <HAL_GPIO_Init+0x17c>)
 800104c:	1892      	adds	r2, r2, r2
 800104e:	42b0      	cmp	r0, r6
 8001050:	d004      	beq.n	800105c <HAL_GPIO_Init+0x114>
 8001052:	4e1d      	ldr	r6, [pc, #116]	; (80010c8 <HAL_GPIO_Init+0x180>)
 8001054:	003a      	movs	r2, r7
 8001056:	42b0      	cmp	r0, r6
 8001058:	d000      	beq.n	800105c <HAL_GPIO_Init+0x114>
 800105a:	9a05      	ldr	r2, [sp, #20]
 800105c:	40aa      	lsls	r2, r5
 800105e:	430a      	orrs	r2, r1
        temp &= ~(iocurrent);
 8001060:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001062:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8001064:	000d      	movs	r5, r1
        temp = EXTI->RTSR;
 8001066:	4a19      	ldr	r2, [pc, #100]	; (80010cc <HAL_GPIO_Init+0x184>)
        temp &= ~(iocurrent);
 8001068:	43cc      	mvns	r4, r1
        temp = EXTI->RTSR;
 800106a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106c:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 800106e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001070:	02c9      	lsls	r1, r1, #11
 8001072:	d401      	bmi.n	8001078 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 8001074:	0035      	movs	r5, r6
 8001076:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8001078:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800107a:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800107c:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800107e:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001080:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001082:	0289      	lsls	r1, r1, #10
 8001084:	d401      	bmi.n	800108a <HAL_GPIO_Init+0x142>
        temp &= ~(iocurrent);
 8001086:	0035      	movs	r5, r6
 8001088:	4025      	ands	r5, r4
        EXTI->FTSR = temp;
 800108a:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800108c:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800108e:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001090:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8001092:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001094:	0389      	lsls	r1, r1, #14
 8001096:	d401      	bmi.n	800109c <HAL_GPIO_Init+0x154>
        temp &= ~(iocurrent);
 8001098:	0035      	movs	r5, r6
 800109a:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800109c:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 800109e:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80010a0:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a2:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 80010a4:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a6:	03c9      	lsls	r1, r1, #15
 80010a8:	d401      	bmi.n	80010ae <HAL_GPIO_Init+0x166>
        temp &= ~(iocurrent);
 80010aa:	4025      	ands	r5, r4
 80010ac:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80010ae:	6016      	str	r6, [r2, #0]
    position++;
 80010b0:	3301      	adds	r3, #1
 80010b2:	e753      	b.n	8000f5c <HAL_GPIO_Init+0x14>
 80010b4:	b7fff000 	.word	0xb7fff000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	48000400 	.word	0x48000400
 80010c4:	48000800 	.word	0x48000800
 80010c8:	48000c00 	.word	0x48000c00
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	d001      	beq.n	80010d8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80010da:	e7fc      	b.n	80010d6 <HAL_GPIO_WritePin+0x6>

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010de:	0004      	movs	r4, r0
 80010e0:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d04e      	beq.n	8001184 <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e6:	6803      	ldr	r3, [r0, #0]
 80010e8:	07db      	lsls	r3, r3, #31
 80010ea:	d433      	bmi.n	8001154 <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	079b      	lsls	r3, r3, #30
 80010f0:	d500      	bpl.n	80010f4 <HAL_RCC_OscConfig+0x18>
 80010f2:	e08a      	b.n	800120a <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	071b      	lsls	r3, r3, #28
 80010f8:	d500      	bpl.n	80010fc <HAL_RCC_OscConfig+0x20>
 80010fa:	e0ca      	b.n	8001292 <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	075b      	lsls	r3, r3, #29
 8001100:	d500      	bpl.n	8001104 <HAL_RCC_OscConfig+0x28>
 8001102:	e0ed      	b.n	80012e0 <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	06db      	lsls	r3, r3, #27
 8001108:	d51a      	bpl.n	8001140 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800110a:	6962      	ldr	r2, [r4, #20]
 800110c:	2304      	movs	r3, #4
 800110e:	4dbc      	ldr	r5, [pc, #752]	; (8001400 <HAL_RCC_OscConfig+0x324>)
 8001110:	2a01      	cmp	r2, #1
 8001112:	d000      	beq.n	8001116 <HAL_RCC_OscConfig+0x3a>
 8001114:	e158      	b.n	80013c8 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001116:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001118:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800111a:	430b      	orrs	r3, r1
 800111c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800111e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001120:	431a      	orrs	r2, r3
 8001122:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001124:	f7ff fbd8 	bl	80008d8 <HAL_GetTick>
 8001128:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800112a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800112c:	423b      	tst	r3, r7
 800112e:	d100      	bne.n	8001132 <HAL_RCC_OscConfig+0x56>
 8001130:	e143      	b.n	80013ba <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001132:	21f8      	movs	r1, #248	; 0xf8
 8001134:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001136:	69a3      	ldr	r3, [r4, #24]
 8001138:	438a      	bics	r2, r1
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4313      	orrs	r3, r2
 800113e:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	069b      	lsls	r3, r3, #26
 8001144:	d500      	bpl.n	8001148 <HAL_RCC_OscConfig+0x6c>
 8001146:	e167      	b.n	8001418 <HAL_RCC_OscConfig+0x33c>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800114a:	2b00      	cmp	r3, #0
 800114c:	d000      	beq.n	8001150 <HAL_RCC_OscConfig+0x74>
 800114e:	e1a6      	b.n	800149e <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }

  return HAL_OK;
 8001150:	2000      	movs	r0, #0
 8001152:	e02f      	b.n	80011b4 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001154:	210c      	movs	r1, #12
 8001156:	4daa      	ldr	r5, [pc, #680]	; (8001400 <HAL_RCC_OscConfig+0x324>)
 8001158:	686a      	ldr	r2, [r5, #4]
 800115a:	400a      	ands	r2, r1
 800115c:	2a04      	cmp	r2, #4
 800115e:	d00b      	beq.n	8001178 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001160:	686b      	ldr	r3, [r5, #4]
 8001162:	400b      	ands	r3, r1
 8001164:	2b08      	cmp	r3, #8
 8001166:	d10f      	bne.n	8001188 <HAL_RCC_OscConfig+0xac>
 8001168:	22c0      	movs	r2, #192	; 0xc0
 800116a:	686b      	ldr	r3, [r5, #4]
 800116c:	0252      	lsls	r2, r2, #9
 800116e:	4013      	ands	r3, r2
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0252      	lsls	r2, r2, #9
 8001174:	4293      	cmp	r3, r2
 8001176:	d107      	bne.n	8001188 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	039b      	lsls	r3, r3, #14
 800117c:	d5b6      	bpl.n	80010ec <HAL_RCC_OscConfig+0x10>
 800117e:	6863      	ldr	r3, [r4, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1b3      	bne.n	80010ec <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001184:	2001      	movs	r0, #1
 8001186:	e015      	b.n	80011b4 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001188:	6863      	ldr	r3, [r4, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d114      	bne.n	80011b8 <HAL_RCC_OscConfig+0xdc>
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	682a      	ldr	r2, [r5, #0]
 8001192:	025b      	lsls	r3, r3, #9
 8001194:	4313      	orrs	r3, r2
 8001196:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001198:	f7ff fb9e 	bl	80008d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800119e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a0:	02bf      	lsls	r7, r7, #10
 80011a2:	682b      	ldr	r3, [r5, #0]
 80011a4:	423b      	tst	r3, r7
 80011a6:	d1a1      	bne.n	80010ec <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fb96 	bl	80008d8 <HAL_GetTick>
 80011ac:	1b80      	subs	r0, r0, r6
 80011ae:	2864      	cmp	r0, #100	; 0x64
 80011b0:	d9f7      	bls.n	80011a2 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 80011b2:	2003      	movs	r0, #3
}
 80011b4:	b005      	add	sp, #20
 80011b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d116      	bne.n	80011ea <HAL_RCC_OscConfig+0x10e>
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	4a91      	ldr	r2, [pc, #580]	; (8001404 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c0:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c2:	4013      	ands	r3, r2
 80011c4:	602b      	str	r3, [r5, #0]
 80011c6:	682b      	ldr	r3, [r5, #0]
 80011c8:	4a8f      	ldr	r2, [pc, #572]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ca:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	4013      	ands	r3, r2
 80011ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011d0:	f7ff fb82 	bl	80008d8 <HAL_GetTick>
 80011d4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	423b      	tst	r3, r7
 80011da:	d100      	bne.n	80011de <HAL_RCC_OscConfig+0x102>
 80011dc:	e786      	b.n	80010ec <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011de:	f7ff fb7b 	bl	80008d8 <HAL_GetTick>
 80011e2:	1b80      	subs	r0, r0, r6
 80011e4:	2864      	cmp	r0, #100	; 0x64
 80011e6:	d9f6      	bls.n	80011d6 <HAL_RCC_OscConfig+0xfa>
 80011e8:	e7e3      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ea:	2b05      	cmp	r3, #5
 80011ec:	d105      	bne.n	80011fa <HAL_RCC_OscConfig+0x11e>
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	682a      	ldr	r2, [r5, #0]
 80011f2:	02db      	lsls	r3, r3, #11
 80011f4:	4313      	orrs	r3, r2
 80011f6:	602b      	str	r3, [r5, #0]
 80011f8:	e7c9      	b.n	800118e <HAL_RCC_OscConfig+0xb2>
 80011fa:	682b      	ldr	r3, [r5, #0]
 80011fc:	4a81      	ldr	r2, [pc, #516]	; (8001404 <HAL_RCC_OscConfig+0x328>)
 80011fe:	4013      	ands	r3, r2
 8001200:	602b      	str	r3, [r5, #0]
 8001202:	682b      	ldr	r3, [r5, #0]
 8001204:	4a80      	ldr	r2, [pc, #512]	; (8001408 <HAL_RCC_OscConfig+0x32c>)
 8001206:	4013      	ands	r3, r2
 8001208:	e7c5      	b.n	8001196 <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800120a:	220c      	movs	r2, #12
 800120c:	4d7c      	ldr	r5, [pc, #496]	; (8001400 <HAL_RCC_OscConfig+0x324>)
 800120e:	686b      	ldr	r3, [r5, #4]
 8001210:	4213      	tst	r3, r2
 8001212:	d00b      	beq.n	800122c <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001214:	686b      	ldr	r3, [r5, #4]
 8001216:	4013      	ands	r3, r2
 8001218:	2b08      	cmp	r3, #8
 800121a:	d115      	bne.n	8001248 <HAL_RCC_OscConfig+0x16c>
 800121c:	22c0      	movs	r2, #192	; 0xc0
 800121e:	686b      	ldr	r3, [r5, #4]
 8001220:	0252      	lsls	r2, r2, #9
 8001222:	4013      	ands	r3, r2
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	0212      	lsls	r2, r2, #8
 8001228:	4293      	cmp	r3, r2
 800122a:	d10d      	bne.n	8001248 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	079b      	lsls	r3, r3, #30
 8001230:	d502      	bpl.n	8001238 <HAL_RCC_OscConfig+0x15c>
 8001232:	68e3      	ldr	r3, [r4, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d1a5      	bne.n	8001184 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	21f8      	movs	r1, #248	; 0xf8
 800123a:	682a      	ldr	r2, [r5, #0]
 800123c:	6923      	ldr	r3, [r4, #16]
 800123e:	438a      	bics	r2, r1
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4313      	orrs	r3, r2
 8001244:	602b      	str	r3, [r5, #0]
 8001246:	e755      	b.n	80010f4 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001248:	68e2      	ldr	r2, [r4, #12]
 800124a:	2301      	movs	r3, #1
 800124c:	2a00      	cmp	r2, #0
 800124e:	d00f      	beq.n	8001270 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8001250:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001254:	4313      	orrs	r3, r2
 8001256:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001258:	f7ff fb3e 	bl	80008d8 <HAL_GetTick>
 800125c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125e:	682b      	ldr	r3, [r5, #0]
 8001260:	423b      	tst	r3, r7
 8001262:	d1e9      	bne.n	8001238 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fb38 	bl	80008d8 <HAL_GetTick>
 8001268:	1b80      	subs	r0, r0, r6
 800126a:	2802      	cmp	r0, #2
 800126c:	d9f7      	bls.n	800125e <HAL_RCC_OscConfig+0x182>
 800126e:	e7a0      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8001270:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001274:	439a      	bics	r2, r3
 8001276:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001278:	f7ff fb2e 	bl	80008d8 <HAL_GetTick>
 800127c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	682b      	ldr	r3, [r5, #0]
 8001280:	423b      	tst	r3, r7
 8001282:	d100      	bne.n	8001286 <HAL_RCC_OscConfig+0x1aa>
 8001284:	e736      	b.n	80010f4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fb27 	bl	80008d8 <HAL_GetTick>
 800128a:	1b80      	subs	r0, r0, r6
 800128c:	2802      	cmp	r0, #2
 800128e:	d9f6      	bls.n	800127e <HAL_RCC_OscConfig+0x1a2>
 8001290:	e78f      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001292:	69e2      	ldr	r2, [r4, #28]
 8001294:	2301      	movs	r3, #1
 8001296:	4d5a      	ldr	r5, [pc, #360]	; (8001400 <HAL_RCC_OscConfig+0x324>)
 8001298:	2a00      	cmp	r2, #0
 800129a:	d010      	beq.n	80012be <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 800129c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80012a0:	4313      	orrs	r3, r2
 80012a2:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80012a4:	f7ff fb18 	bl	80008d8 <HAL_GetTick>
 80012a8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012ac:	423b      	tst	r3, r7
 80012ae:	d000      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1d6>
 80012b0:	e724      	b.n	80010fc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b2:	f7ff fb11 	bl	80008d8 <HAL_GetTick>
 80012b6:	1b80      	subs	r0, r0, r6
 80012b8:	2802      	cmp	r0, #2
 80012ba:	d9f6      	bls.n	80012aa <HAL_RCC_OscConfig+0x1ce>
 80012bc:	e779      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 80012be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80012c2:	439a      	bics	r2, r3
 80012c4:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80012c6:	f7ff fb07 	bl	80008d8 <HAL_GetTick>
 80012ca:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012ce:	423b      	tst	r3, r7
 80012d0:	d100      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1f8>
 80012d2:	e713      	b.n	80010fc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fb00 	bl	80008d8 <HAL_GetTick>
 80012d8:	1b80      	subs	r0, r0, r6
 80012da:	2802      	cmp	r0, #2
 80012dc:	d9f6      	bls.n	80012cc <HAL_RCC_OscConfig+0x1f0>
 80012de:	e768      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e4:	4d46      	ldr	r5, [pc, #280]	; (8001400 <HAL_RCC_OscConfig+0x324>)
 80012e6:	0552      	lsls	r2, r2, #21
 80012e8:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ec:	4213      	tst	r3, r2
 80012ee:	d108      	bne.n	8001302 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	69eb      	ldr	r3, [r5, #28]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61eb      	str	r3, [r5, #28]
 80012f6:	69eb      	ldr	r3, [r5, #28]
 80012f8:	4013      	ands	r3, r2
 80012fa:	9303      	str	r3, [sp, #12]
 80012fc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	2780      	movs	r7, #128	; 0x80
 8001304:	4e41      	ldr	r6, [pc, #260]	; (800140c <HAL_RCC_OscConfig+0x330>)
 8001306:	007f      	lsls	r7, r7, #1
 8001308:	6833      	ldr	r3, [r6, #0]
 800130a:	423b      	tst	r3, r7
 800130c:	d006      	beq.n	800131c <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130e:	68a3      	ldr	r3, [r4, #8]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d113      	bne.n	800133c <HAL_RCC_OscConfig+0x260>
 8001314:	6a2a      	ldr	r2, [r5, #32]
 8001316:	4313      	orrs	r3, r2
 8001318:	622b      	str	r3, [r5, #32]
 800131a:	e030      	b.n	800137e <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131c:	6833      	ldr	r3, [r6, #0]
 800131e:	433b      	orrs	r3, r7
 8001320:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001322:	f7ff fad9 	bl	80008d8 <HAL_GetTick>
 8001326:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	6833      	ldr	r3, [r6, #0]
 800132a:	423b      	tst	r3, r7
 800132c:	d1ef      	bne.n	800130e <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fad3 	bl	80008d8 <HAL_GetTick>
 8001332:	9b01      	ldr	r3, [sp, #4]
 8001334:	1ac0      	subs	r0, r0, r3
 8001336:	2864      	cmp	r0, #100	; 0x64
 8001338:	d9f6      	bls.n	8001328 <HAL_RCC_OscConfig+0x24c>
 800133a:	e73a      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133c:	2201      	movs	r2, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d114      	bne.n	800136c <HAL_RCC_OscConfig+0x290>
 8001342:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001344:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001346:	4393      	bics	r3, r2
 8001348:	622b      	str	r3, [r5, #32]
 800134a:	6a2b      	ldr	r3, [r5, #32]
 800134c:	3203      	adds	r2, #3
 800134e:	4393      	bics	r3, r2
 8001350:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001352:	f7ff fac1 	bl	80008d8 <HAL_GetTick>
 8001356:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	6a2b      	ldr	r3, [r5, #32]
 800135a:	423b      	tst	r3, r7
 800135c:	d016      	beq.n	800138c <HAL_RCC_OscConfig+0x2b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fabb 	bl	80008d8 <HAL_GetTick>
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x334>)
 8001364:	1b80      	subs	r0, r0, r6
 8001366:	4298      	cmp	r0, r3
 8001368:	d9f6      	bls.n	8001358 <HAL_RCC_OscConfig+0x27c>
 800136a:	e722      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	2b05      	cmp	r3, #5
 800136e:	d116      	bne.n	800139e <HAL_RCC_OscConfig+0x2c2>
 8001370:	6a29      	ldr	r1, [r5, #32]
 8001372:	3b01      	subs	r3, #1
 8001374:	430b      	orrs	r3, r1
 8001376:	622b      	str	r3, [r5, #32]
 8001378:	6a2b      	ldr	r3, [r5, #32]
 800137a:	431a      	orrs	r2, r3
 800137c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800137e:	f7ff faab 	bl	80008d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001382:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001384:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001386:	6a2b      	ldr	r3, [r5, #32]
 8001388:	423b      	tst	r3, r7
 800138a:	d00f      	beq.n	80013ac <HAL_RCC_OscConfig+0x2d0>
    if(pwrclkchanged == SET)
 800138c:	9b00      	ldr	r3, [sp, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d000      	beq.n	8001394 <HAL_RCC_OscConfig+0x2b8>
 8001392:	e6b7      	b.n	8001104 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001394:	69eb      	ldr	r3, [r5, #28]
 8001396:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001398:	4013      	ands	r3, r2
 800139a:	61eb      	str	r3, [r5, #28]
 800139c:	e6b2      	b.n	8001104 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139e:	6a2b      	ldr	r3, [r5, #32]
 80013a0:	4393      	bics	r3, r2
 80013a2:	2204      	movs	r2, #4
 80013a4:	622b      	str	r3, [r5, #32]
 80013a6:	6a2b      	ldr	r3, [r5, #32]
 80013a8:	4393      	bics	r3, r2
 80013aa:	e7b5      	b.n	8001318 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ac:	f7ff fa94 	bl	80008d8 <HAL_GetTick>
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_RCC_OscConfig+0x334>)
 80013b2:	1b80      	subs	r0, r0, r6
 80013b4:	4298      	cmp	r0, r3
 80013b6:	d9e6      	bls.n	8001386 <HAL_RCC_OscConfig+0x2aa>
 80013b8:	e6fb      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013ba:	f7ff fa8d 	bl	80008d8 <HAL_GetTick>
 80013be:	1b80      	subs	r0, r0, r6
 80013c0:	2802      	cmp	r0, #2
 80013c2:	d800      	bhi.n	80013c6 <HAL_RCC_OscConfig+0x2ea>
 80013c4:	e6b1      	b.n	800112a <HAL_RCC_OscConfig+0x4e>
 80013c6:	e6f4      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013c8:	3205      	adds	r2, #5
 80013ca:	d103      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80013cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80013ce:	439a      	bics	r2, r3
 80013d0:	636a      	str	r2, [r5, #52]	; 0x34
 80013d2:	e6ae      	b.n	8001132 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 80013d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013d6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80013d8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80013da:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80013dc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80013de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80013e0:	4393      	bics	r3, r2
 80013e2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80013e4:	f7ff fa78 	bl	80008d8 <HAL_GetTick>
 80013e8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80013ec:	423b      	tst	r3, r7
 80013ee:	d100      	bne.n	80013f2 <HAL_RCC_OscConfig+0x316>
 80013f0:	e6a6      	b.n	8001140 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013f2:	f7ff fa71 	bl	80008d8 <HAL_GetTick>
 80013f6:	1b80      	subs	r0, r0, r6
 80013f8:	2802      	cmp	r0, #2
 80013fa:	d9f6      	bls.n	80013ea <HAL_RCC_OscConfig+0x30e>
 80013fc:	e6d9      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40021000 	.word	0x40021000
 8001404:	fffeffff 	.word	0xfffeffff
 8001408:	fffbffff 	.word	0xfffbffff
 800140c:	40007000 	.word	0x40007000
 8001410:	00001388 	.word	0x00001388
 8001414:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001418:	210c      	movs	r1, #12
 800141a:	4d55      	ldr	r5, [pc, #340]	; (8001570 <HAL_RCC_OscConfig+0x494>)
 800141c:	686a      	ldr	r2, [r5, #4]
 800141e:	400a      	ands	r2, r1
 8001420:	428a      	cmp	r2, r1
 8001422:	d009      	beq.n	8001438 <HAL_RCC_OscConfig+0x35c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001424:	686b      	ldr	r3, [r5, #4]
 8001426:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001428:	2b08      	cmp	r3, #8
 800142a:	d10e      	bne.n	800144a <HAL_RCC_OscConfig+0x36e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800142c:	22c0      	movs	r2, #192	; 0xc0
 800142e:	686b      	ldr	r3, [r5, #4]
 8001430:	0252      	lsls	r2, r2, #9
 8001432:	4013      	ands	r3, r2
 8001434:	4293      	cmp	r3, r2
 8001436:	d108      	bne.n	800144a <HAL_RCC_OscConfig+0x36e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001438:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800143a:	039b      	lsls	r3, r3, #14
 800143c:	d400      	bmi.n	8001440 <HAL_RCC_OscConfig+0x364>
 800143e:	e683      	b.n	8001148 <HAL_RCC_OscConfig+0x6c>
 8001440:	6a23      	ldr	r3, [r4, #32]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d000      	beq.n	8001448 <HAL_RCC_OscConfig+0x36c>
 8001446:	e69d      	b.n	8001184 <HAL_RCC_OscConfig+0xa8>
 8001448:	e67e      	b.n	8001148 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800144a:	6a23      	ldr	r3, [r4, #32]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001454:	025b      	lsls	r3, r3, #9
 8001456:	4313      	orrs	r3, r2
 8001458:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800145a:	f7ff fa3d 	bl	80008d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800145e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001460:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001462:	02bf      	lsls	r7, r7, #10
 8001464:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001466:	423b      	tst	r3, r7
 8001468:	d000      	beq.n	800146c <HAL_RCC_OscConfig+0x390>
 800146a:	e66d      	b.n	8001148 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800146c:	f7ff fa34 	bl	80008d8 <HAL_GetTick>
 8001470:	1b80      	subs	r0, r0, r6
 8001472:	2802      	cmp	r0, #2
 8001474:	d9f6      	bls.n	8001464 <HAL_RCC_OscConfig+0x388>
 8001476:	e69c      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 8001478:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800147a:	4a3e      	ldr	r2, [pc, #248]	; (8001574 <HAL_RCC_OscConfig+0x498>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800147c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 800147e:	4013      	ands	r3, r2
 8001480:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001482:	f7ff fa29 	bl	80008d8 <HAL_GetTick>
 8001486:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001488:	02bf      	lsls	r7, r7, #10
 800148a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800148c:	423b      	tst	r3, r7
 800148e:	d100      	bne.n	8001492 <HAL_RCC_OscConfig+0x3b6>
 8001490:	e65a      	b.n	8001148 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001492:	f7ff fa21 	bl	80008d8 <HAL_GetTick>
 8001496:	1b80      	subs	r0, r0, r6
 8001498:	2802      	cmp	r0, #2
 800149a:	d9f6      	bls.n	800148a <HAL_RCC_OscConfig+0x3ae>
 800149c:	e689      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800149e:	210c      	movs	r1, #12
 80014a0:	4d33      	ldr	r5, [pc, #204]	; (8001570 <HAL_RCC_OscConfig+0x494>)
 80014a2:	686a      	ldr	r2, [r5, #4]
 80014a4:	400a      	ands	r2, r1
 80014a6:	2a08      	cmp	r2, #8
 80014a8:	d047      	beq.n	800153a <HAL_RCC_OscConfig+0x45e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014aa:	4a33      	ldr	r2, [pc, #204]	; (8001578 <HAL_RCC_OscConfig+0x49c>)
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d132      	bne.n	8001516 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 80014b0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80014b4:	4013      	ands	r3, r2
 80014b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa0e 	bl	80008d8 <HAL_GetTick>
 80014bc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	04bf      	lsls	r7, r7, #18
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	423b      	tst	r3, r7
 80014c4:	d121      	bne.n	800150a <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c6:	220f      	movs	r2, #15
 80014c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ca:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014cc:	4393      	bics	r3, r2
 80014ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d0:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d2:	4313      	orrs	r3, r2
 80014d4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80014d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80014d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014da:	686a      	ldr	r2, [r5, #4]
 80014dc:	430b      	orrs	r3, r1
 80014de:	4927      	ldr	r1, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x4a0>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	4313      	orrs	r3, r2
 80014e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	682a      	ldr	r2, [r5, #0]
 80014ea:	045b      	lsls	r3, r3, #17
 80014ec:	4313      	orrs	r3, r2
 80014ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014f0:	f7ff f9f2 	bl	80008d8 <HAL_GetTick>
 80014f4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f6:	682b      	ldr	r3, [r5, #0]
 80014f8:	4233      	tst	r3, r6
 80014fa:	d000      	beq.n	80014fe <HAL_RCC_OscConfig+0x422>
 80014fc:	e628      	b.n	8001150 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff f9eb 	bl	80008d8 <HAL_GetTick>
 8001502:	1b00      	subs	r0, r0, r4
 8001504:	2802      	cmp	r0, #2
 8001506:	d9f6      	bls.n	80014f6 <HAL_RCC_OscConfig+0x41a>
 8001508:	e653      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff f9e5 	bl	80008d8 <HAL_GetTick>
 800150e:	1b80      	subs	r0, r0, r6
 8001510:	2802      	cmp	r0, #2
 8001512:	d9d5      	bls.n	80014c0 <HAL_RCC_OscConfig+0x3e4>
 8001514:	e64d      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8001516:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001518:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800151a:	4013      	ands	r3, r2
 800151c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800151e:	f7ff f9db 	bl	80008d8 <HAL_GetTick>
 8001522:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001524:	04b6      	lsls	r6, r6, #18
 8001526:	682b      	ldr	r3, [r5, #0]
 8001528:	4233      	tst	r3, r6
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x452>
 800152c:	e610      	b.n	8001150 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff f9d3 	bl	80008d8 <HAL_GetTick>
 8001532:	1b00      	subs	r0, r0, r4
 8001534:	2802      	cmp	r0, #2
 8001536:	d9f6      	bls.n	8001526 <HAL_RCC_OscConfig+0x44a>
 8001538:	e63b      	b.n	80011b2 <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153a:	2b01      	cmp	r3, #1
 800153c:	d100      	bne.n	8001540 <HAL_RCC_OscConfig+0x464>
 800153e:	e621      	b.n	8001184 <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001540:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8001542:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001544:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001546:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001548:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	4019      	ands	r1, r3
 800154c:	4281      	cmp	r1, r0
 800154e:	d000      	beq.n	8001552 <HAL_RCC_OscConfig+0x476>
 8001550:	e618      	b.n	8001184 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001552:	210f      	movs	r1, #15
 8001554:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001558:	428a      	cmp	r2, r1
 800155a:	d000      	beq.n	800155e <HAL_RCC_OscConfig+0x482>
 800155c:	e612      	b.n	8001184 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800155e:	22f0      	movs	r2, #240	; 0xf0
 8001560:	0392      	lsls	r2, r2, #14
 8001562:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001564:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001566:	4293      	cmp	r3, r2
 8001568:	d100      	bne.n	800156c <HAL_RCC_OscConfig+0x490>
 800156a:	e5f1      	b.n	8001150 <HAL_RCC_OscConfig+0x74>
 800156c:	e60a      	b.n	8001184 <HAL_RCC_OscConfig+0xa8>
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	40021000 	.word	0x40021000
 8001574:	fffeffff 	.word	0xfffeffff
 8001578:	feffffff 	.word	0xfeffffff
 800157c:	ffc27fff 	.word	0xffc27fff

08001580 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001580:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001584:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001586:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001588:	4018      	ands	r0, r3
 800158a:	2808      	cmp	r0, #8
 800158c:	d008      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x20>
 800158e:	380c      	subs	r0, #12
 8001590:	1e43      	subs	r3, r0, #1
 8001592:	4198      	sbcs	r0, r3
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001596:	4240      	negs	r0, r0
 8001598:	4018      	ands	r0, r3
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_GetSysClockFreq+0x5c>)
 800159c:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800159e:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015a0:	200f      	movs	r0, #15
 80015a2:	0c99      	lsrs	r1, r3, #18
 80015a4:	4c0e      	ldr	r4, [pc, #56]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x60>)
 80015a6:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015aa:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015ac:	490d      	ldr	r1, [pc, #52]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x64>)
 80015ae:	4002      	ands	r2, r0
 80015b0:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015b2:	22c0      	movs	r2, #192	; 0xc0
 80015b4:	2080      	movs	r0, #128	; 0x80
 80015b6:	0252      	lsls	r2, r2, #9
 80015b8:	4013      	ands	r3, r2
 80015ba:	0240      	lsls	r0, r0, #9
 80015bc:	4283      	cmp	r3, r0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x68>)
 80015c2:	e002      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d1fb      	bne.n	80015c0 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015ca:	f7fe fdb1 	bl	8000130 <__udivsi3>
 80015ce:	4360      	muls	r0, r4
 80015d0:	e7e5      	b.n	800159e <HAL_RCC_GetSysClockFreq+0x1e>
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	40021000 	.word	0x40021000
 80015d8:	fd9da600 	.word	0xfd9da600
 80015dc:	02dc6c00 	.word	0x02dc6c00
 80015e0:	08003151 	.word	0x08003151
 80015e4:	08003161 	.word	0x08003161
 80015e8:	007a1200 	.word	0x007a1200

080015ec <HAL_RCC_ClockConfig>:
{
 80015ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015ee:	0004      	movs	r4, r0
 80015f0:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
}
 80015f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015fa:	2201      	movs	r2, #1
 80015fc:	4d3a      	ldr	r5, [pc, #232]	; (80016e8 <HAL_RCC_ClockConfig+0xfc>)
 80015fe:	682b      	ldr	r3, [r5, #0]
 8001600:	4013      	ands	r3, r2
 8001602:	428b      	cmp	r3, r1
 8001604:	d31c      	bcc.n	8001640 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001606:	6821      	ldr	r1, [r4, #0]
 8001608:	078b      	lsls	r3, r1, #30
 800160a:	d422      	bmi.n	8001652 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160c:	07cb      	lsls	r3, r1, #31
 800160e:	d42f      	bmi.n	8001670 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001610:	2301      	movs	r3, #1
 8001612:	682a      	ldr	r2, [r5, #0]
 8001614:	401a      	ands	r2, r3
 8001616:	42ba      	cmp	r2, r7
 8001618:	d857      	bhi.n	80016ca <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	4d33      	ldr	r5, [pc, #204]	; (80016ec <HAL_RCC_ClockConfig+0x100>)
 800161e:	075b      	lsls	r3, r3, #29
 8001620:	d45a      	bmi.n	80016d8 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001622:	f7ff ffad 	bl	8001580 <HAL_RCC_GetSysClockFreq>
 8001626:	686b      	ldr	r3, [r5, #4]
 8001628:	4a31      	ldr	r2, [pc, #196]	; (80016f0 <HAL_RCC_ClockConfig+0x104>)
 800162a:	061b      	lsls	r3, r3, #24
 800162c:	0f1b      	lsrs	r3, r3, #28
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	40d8      	lsrs	r0, r3
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_RCC_ClockConfig+0x108>)
 8001634:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001636:	2003      	movs	r0, #3
 8001638:	f7ff f90e 	bl	8000858 <HAL_InitTick>
  return HAL_OK;
 800163c:	2000      	movs	r0, #0
 800163e:	e7db      	b.n	80015f8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	4393      	bics	r3, r2
 8001644:	430b      	orrs	r3, r1
 8001646:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001648:	682b      	ldr	r3, [r5, #0]
 800164a:	4013      	ands	r3, r2
 800164c:	428b      	cmp	r3, r1
 800164e:	d1d2      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xa>
 8001650:	e7d9      	b.n	8001606 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001652:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_RCC_ClockConfig+0x100>)
 8001654:	074b      	lsls	r3, r1, #29
 8001656:	d504      	bpl.n	8001662 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001658:	23e0      	movs	r3, #224	; 0xe0
 800165a:	6850      	ldr	r0, [r2, #4]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4303      	orrs	r3, r0
 8001660:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001662:	20f0      	movs	r0, #240	; 0xf0
 8001664:	6853      	ldr	r3, [r2, #4]
 8001666:	4383      	bics	r3, r0
 8001668:	68a0      	ldr	r0, [r4, #8]
 800166a:	4303      	orrs	r3, r0
 800166c:	6053      	str	r3, [r2, #4]
 800166e:	e7cd      	b.n	800160c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001670:	6862      	ldr	r2, [r4, #4]
 8001672:	4e1e      	ldr	r6, [pc, #120]	; (80016ec <HAL_RCC_ClockConfig+0x100>)
 8001674:	2a01      	cmp	r2, #1
 8001676:	d103      	bne.n	8001680 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001678:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800167a:	039b      	lsls	r3, r3, #14
 800167c:	d405      	bmi.n	800168a <HAL_RCC_ClockConfig+0x9e>
 800167e:	e7ba      	b.n	80015f6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001680:	2a02      	cmp	r2, #2
 8001682:	d11a      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001684:	6833      	ldr	r3, [r6, #0]
 8001686:	019b      	lsls	r3, r3, #6
 8001688:	d5b5      	bpl.n	80015f6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	2103      	movs	r1, #3
 800168c:	6873      	ldr	r3, [r6, #4]
 800168e:	438b      	bics	r3, r1
 8001690:	4313      	orrs	r3, r2
 8001692:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001694:	f7ff f920 	bl	80008d8 <HAL_GetTick>
 8001698:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	230c      	movs	r3, #12
 800169c:	6872      	ldr	r2, [r6, #4]
 800169e:	401a      	ands	r2, r3
 80016a0:	6863      	ldr	r3, [r4, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d0b3      	beq.n	8001610 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff f916 	bl	80008d8 <HAL_GetTick>
 80016ac:	9b01      	ldr	r3, [sp, #4]
 80016ae:	1ac0      	subs	r0, r0, r3
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_RCC_ClockConfig+0x10c>)
 80016b2:	4298      	cmp	r0, r3
 80016b4:	d9f1      	bls.n	800169a <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 80016b6:	2003      	movs	r0, #3
 80016b8:	e79e      	b.n	80015f8 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80016ba:	2a03      	cmp	r2, #3
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016be:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80016c0:	e7db      	b.n	800167a <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	6833      	ldr	r3, [r6, #0]
 80016c4:	079b      	lsls	r3, r3, #30
 80016c6:	d4e0      	bmi.n	800168a <HAL_RCC_ClockConfig+0x9e>
 80016c8:	e795      	b.n	80015f6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	682a      	ldr	r2, [r5, #0]
 80016cc:	439a      	bics	r2, r3
 80016ce:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d0:	682a      	ldr	r2, [r5, #0]
 80016d2:	421a      	tst	r2, r3
 80016d4:	d0a1      	beq.n	800161a <HAL_RCC_ClockConfig+0x2e>
 80016d6:	e78e      	b.n	80015f6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016d8:	686b      	ldr	r3, [r5, #4]
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_RCC_ClockConfig+0x110>)
 80016dc:	4013      	ands	r3, r2
 80016de:	68e2      	ldr	r2, [r4, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	606b      	str	r3, [r5, #4]
 80016e4:	e79d      	b.n	8001622 <HAL_RCC_ClockConfig+0x36>
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	40022000 	.word	0x40022000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08003141 	.word	0x08003141
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	00001388 	.word	0x00001388
 80016fc:	fffff8ff 	.word	0xfffff8ff

08001700 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001704:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001706:	b085      	sub	sp, #20
 8001708:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 800170a:	ab02      	add	r3, sp, #8
 800170c:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800170e:	0004      	movs	r4, r0
 8001710:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001712:	f7ff f8e1 	bl	80008d8 <HAL_GetTick>
 8001716:	19ed      	adds	r5, r5, r7
 8001718:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800171a:	f7ff f8dd 	bl	80008d8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800171e:	2223      	movs	r2, #35	; 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001720:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8001722:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001724:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4353      	muls	r3, r2
 800172c:	0d1b      	lsrs	r3, r3, #20
 800172e:	436b      	muls	r3, r5
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8001730:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8001732:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8001734:	ab02      	add	r3, sp, #8
 8001736:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8001738:	688b      	ldr	r3, [r1, #8]
 800173a:	0018      	movs	r0, r3
 800173c:	4030      	ands	r0, r6
 800173e:	4233      	tst	r3, r6
 8001740:	d03b      	beq.n	80017ba <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001742:	23c0      	movs	r3, #192	; 0xc0
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	429e      	cmp	r6, r3
 8001748:	d104      	bne.n	8001754 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 800174a:	9b01      	ldr	r3, [sp, #4]
 800174c:	7b1b      	ldrb	r3, [r3, #12]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg8);
 8001752:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8001754:	1c7b      	adds	r3, r7, #1
 8001756:	d0ef      	beq.n	8001738 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001758:	f7ff f8be 	bl	80008d8 <HAL_GetTick>
 800175c:	9b00      	ldr	r3, [sp, #0]
 800175e:	1ac0      	subs	r0, r0, r3
 8001760:	42a8      	cmp	r0, r5
 8001762:	d32c      	bcc.n	80017be <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001764:	21e0      	movs	r1, #224	; 0xe0
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	438a      	bics	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800176e:	2282      	movs	r2, #130	; 0x82
 8001770:	6861      	ldr	r1, [r4, #4]
 8001772:	0052      	lsls	r2, r2, #1
 8001774:	4291      	cmp	r1, r2
 8001776:	d10c      	bne.n	8001792 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	68a2      	ldr	r2, [r4, #8]
 800177c:	0209      	lsls	r1, r1, #8
 800177e:	428a      	cmp	r2, r1
 8001780:	d003      	beq.n	800178a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	00c9      	lsls	r1, r1, #3
 8001786:	428a      	cmp	r2, r1
 8001788:	d103      	bne.n	8001792 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 800178a:	2140      	movs	r1, #64	; 0x40
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	438a      	bics	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001796:	0189      	lsls	r1, r1, #6
 8001798:	428a      	cmp	r2, r1
 800179a:	d106      	bne.n	80017aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	480d      	ldr	r0, [pc, #52]	; (80017d4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 80017a0:	4001      	ands	r1, r0
 80017a2:	6019      	str	r1, [r3, #0]
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80017aa:	0023      	movs	r3, r4
 80017ac:	2201      	movs	r2, #1
 80017ae:	335d      	adds	r3, #93	; 0x5d
 80017b0:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80017b2:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80017b4:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80017b6:	345c      	adds	r4, #92	; 0x5c
 80017b8:	7023      	strb	r3, [r4, #0]
    }
  }

  return HAL_OK;
}
 80017ba:	b005      	add	sp, #20
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 80017be:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	4193      	sbcs	r3, r2
 80017c4:	425b      	negs	r3, r3
 80017c6:	401d      	ands	r5, r3
      count--;
 80017c8:	9b03      	ldr	r3, [sp, #12]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	e7b0      	b.n	8001730 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	2000000c 	.word	0x2000000c
 80017d4:	ffffdfff 	.word	0xffffdfff

080017d8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	000e      	movs	r6, r1
 80017dc:	b085      	sub	sp, #20
 80017de:	0015      	movs	r5, r2
 80017e0:	0004      	movs	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80017e2:	f7ff f879 	bl	80008d8 <HAL_GetTick>
 80017e6:	19ad      	adds	r5, r5, r6
 80017e8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80017ea:	f7ff f875 	bl	80008d8 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80017ee:	2780      	movs	r7, #128	; 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80017f0:	4b25      	ldr	r3, [pc, #148]	; (8001888 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80017f2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	0d1b      	lsrs	r3, r3, #20
 80017fa:	436b      	muls	r3, r5
 80017fc:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80017fe:	6822      	ldr	r2, [r4, #0]
 8001800:	6893      	ldr	r3, [r2, #8]
 8001802:	0018      	movs	r0, r3
 8001804:	4038      	ands	r0, r7
 8001806:	423b      	tst	r3, r7
 8001808:	d032      	beq.n	8001870 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
    if (Timeout != HAL_MAX_DELAY)
 800180a:	1c73      	adds	r3, r6, #1
 800180c:	d0f8      	beq.n	8001800 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800180e:	f7ff f863 	bl	80008d8 <HAL_GetTick>
 8001812:	9b01      	ldr	r3, [sp, #4]
 8001814:	1ac0      	subs	r0, r0, r3
 8001816:	42a8      	cmp	r0, r5
 8001818:	d32c      	bcc.n	8001874 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800181a:	21e0      	movs	r1, #224	; 0xe0
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	438a      	bics	r2, r1
 8001822:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001824:	2282      	movs	r2, #130	; 0x82
 8001826:	6861      	ldr	r1, [r4, #4]
 8001828:	0052      	lsls	r2, r2, #1
 800182a:	4291      	cmp	r1, r2
 800182c:	d10c      	bne.n	8001848 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	68a2      	ldr	r2, [r4, #8]
 8001832:	0209      	lsls	r1, r1, #8
 8001834:	428a      	cmp	r2, r1
 8001836:	d003      	beq.n	8001840 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	00c9      	lsls	r1, r1, #3
 800183c:	428a      	cmp	r2, r1
 800183e:	d103      	bne.n	8001848 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
          __HAL_SPI_DISABLE(hspi);
 8001840:	2140      	movs	r1, #64	; 0x40
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	438a      	bics	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800184c:	0189      	lsls	r1, r1, #6
 800184e:	428a      	cmp	r2, r1
 8001850:	d106      	bne.n	8001860 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
          SPI_RESET_CRC(hspi);
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8001856:	4001      	ands	r1, r0
 8001858:	6019      	str	r1, [r3, #0]
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001860:	0023      	movs	r3, r4
 8001862:	2201      	movs	r2, #1
 8001864:	335d      	adds	r3, #93	; 0x5d
 8001866:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8001868:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800186a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800186c:	345c      	adds	r4, #92	; 0x5c
 800186e:	7023      	strb	r3, [r4, #0]
}
 8001870:	b005      	add	sp, #20
 8001872:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8001874:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8001876:	1e5a      	subs	r2, r3, #1
 8001878:	4193      	sbcs	r3, r2
 800187a:	425b      	negs	r3, r3
 800187c:	401d      	ands	r5, r3
      count--;
 800187e:	9b03      	ldr	r3, [sp, #12]
 8001880:	3b01      	subs	r3, #1
 8001882:	9303      	str	r3, [sp, #12]
 8001884:	e7bb      	b.n	80017fe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	2000000c 	.word	0x2000000c
 800188c:	ffffdfff 	.word	0xffffdfff

08001890 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001892:	2382      	movs	r3, #130	; 0x82
{
 8001894:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001896:	6842      	ldr	r2, [r0, #4]
{
 8001898:	0004      	movs	r4, r0
 800189a:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	429a      	cmp	r2, r3
 80018a0:	d10d      	bne.n	80018be <SPI_EndRxTransaction+0x2e>
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	6883      	ldr	r3, [r0, #8]
 80018a6:	0212      	lsls	r2, r2, #8
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d003      	beq.n	80018b4 <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	00d2      	lsls	r2, r2, #3
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d104      	bne.n	80018be <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80018b4:	2140      	movs	r1, #64	; 0x40
 80018b6:	6822      	ldr	r2, [r4, #0]
 80018b8:	6813      	ldr	r3, [r2, #0]
 80018ba:	438b      	bics	r3, r1
 80018bc:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80018be:	003a      	movs	r2, r7
 80018c0:	0031      	movs	r1, r6
 80018c2:	0020      	movs	r0, r4
 80018c4:	f7ff ff88 	bl	80017d8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80018c8:	1e05      	subs	r5, r0, #0
 80018ca:	d005      	beq.n	80018d8 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018cc:	2320      	movs	r3, #32
 80018ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80018d0:	2503      	movs	r5, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018d2:	4313      	orrs	r3, r2
 80018d4:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80018d6:	e016      	b.n	8001906 <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018d8:	2382      	movs	r3, #130	; 0x82
 80018da:	6862      	ldr	r2, [r4, #4]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	429a      	cmp	r2, r3
 80018e0:	d111      	bne.n	8001906 <SPI_EndRxTransaction+0x76>
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	68a3      	ldr	r3, [r4, #8]
 80018e6:	0212      	lsls	r2, r2, #8
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d003      	beq.n	80018f4 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	00d2      	lsls	r2, r2, #3
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d108      	bne.n	8001906 <SPI_EndRxTransaction+0x76>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80018f4:	21c0      	movs	r1, #192	; 0xc0
 80018f6:	003b      	movs	r3, r7
 80018f8:	0032      	movs	r2, r6
 80018fa:	0020      	movs	r0, r4
 80018fc:	00c9      	lsls	r1, r1, #3
 80018fe:	f7ff feff 	bl	8001700 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8001902:	2800      	cmp	r0, #0
 8001904:	d1e2      	bne.n	80018cc <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 8001906:	0028      	movs	r0, r5
 8001908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800190a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800190a:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800190c:	0013      	movs	r3, r2
{
 800190e:	000d      	movs	r5, r1
 8001910:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001912:	000a      	movs	r2, r1
 8001914:	21c0      	movs	r1, #192	; 0xc0
 8001916:	0149      	lsls	r1, r1, #5
{
 8001918:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800191a:	f7ff fef1 	bl	8001700 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800191e:	2800      	cmp	r0, #0
 8001920:	d005      	beq.n	800192e <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001922:	2320      	movs	r3, #32
 8001924:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001926:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001928:	4313      	orrs	r3, r2
 800192a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800192c:	e00f      	b.n	800194e <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800192e:	0032      	movs	r2, r6
 8001930:	0029      	movs	r1, r5
 8001932:	0020      	movs	r0, r4
 8001934:	f7ff ff50 	bl	80017d8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001938:	2800      	cmp	r0, #0
 800193a:	d1f2      	bne.n	8001922 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800193c:	21c0      	movs	r1, #192	; 0xc0
 800193e:	0033      	movs	r3, r6
 8001940:	002a      	movs	r2, r5
 8001942:	0020      	movs	r0, r4
 8001944:	00c9      	lsls	r1, r1, #3
 8001946:	f7ff fedb 	bl	8001700 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800194a:	2800      	cmp	r0, #0
 800194c:	d1e9      	bne.n	8001922 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 800194e:	bd70      	pop	{r4, r5, r6, pc}

08001950 <HAL_SPI_Init>:
{
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001956:	2c00      	cmp	r4, #0
 8001958:	d067      	beq.n	8001a2a <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800195a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800195c:	2b00      	cmp	r3, #0
 800195e:	d165      	bne.n	8001a2c <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001960:	2282      	movs	r2, #130	; 0x82
 8001962:	6861      	ldr	r1, [r4, #4]
 8001964:	0052      	lsls	r2, r2, #1
 8001966:	4291      	cmp	r1, r2
 8001968:	d000      	beq.n	800196c <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800196a:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800196c:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800196e:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001970:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001972:	355d      	adds	r5, #93	; 0x5d
 8001974:	782b      	ldrb	r3, [r5, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 800197c:	0023      	movs	r3, r4
 800197e:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001980:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001982:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8001984:	f7fe fea2 	bl	80006cc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001988:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800198a:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 800198c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800198e:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001990:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8001992:	6813      	ldr	r3, [r2, #0]
 8001994:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001996:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 8001998:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800199a:	00c9      	lsls	r1, r1, #3
 800199c:	2300      	movs	r3, #0
 800199e:	428d      	cmp	r5, r1
 80019a0:	d848      	bhi.n	8001a34 <HAL_SPI_Init+0xe4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80019a2:	2080      	movs	r0, #128	; 0x80
 80019a4:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80019a6:	428d      	cmp	r5, r1
 80019a8:	d000      	beq.n	80019ac <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019aa:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019ac:	2382      	movs	r3, #130	; 0x82
 80019ae:	6866      	ldr	r6, [r4, #4]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4033      	ands	r3, r6
 80019b4:	2684      	movs	r6, #132	; 0x84
 80019b6:	68a7      	ldr	r7, [r4, #8]
 80019b8:	0236      	lsls	r6, r6, #8
 80019ba:	403e      	ands	r6, r7
 80019bc:	4333      	orrs	r3, r6
 80019be:	2602      	movs	r6, #2
 80019c0:	6927      	ldr	r7, [r4, #16]
 80019c2:	69a1      	ldr	r1, [r4, #24]
 80019c4:	403e      	ands	r6, r7
 80019c6:	4333      	orrs	r3, r6
 80019c8:	2601      	movs	r6, #1
 80019ca:	6967      	ldr	r7, [r4, #20]
 80019cc:	46b4      	mov	ip, r6
 80019ce:	4037      	ands	r7, r6
 80019d0:	433b      	orrs	r3, r7
 80019d2:	2780      	movs	r7, #128	; 0x80
 80019d4:	00bf      	lsls	r7, r7, #2
 80019d6:	400f      	ands	r7, r1
 80019d8:	433b      	orrs	r3, r7
 80019da:	2738      	movs	r7, #56	; 0x38
 80019dc:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019de:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019e0:	4037      	ands	r7, r6
 80019e2:	433b      	orrs	r3, r7
 80019e4:	2780      	movs	r7, #128	; 0x80
 80019e6:	6a26      	ldr	r6, [r4, #32]
 80019e8:	4037      	ands	r7, r6
 80019ea:	433b      	orrs	r3, r7
 80019ec:	2780      	movs	r7, #128	; 0x80
 80019ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80019f0:	01bf      	lsls	r7, r7, #6
 80019f2:	4037      	ands	r7, r6
 80019f4:	433b      	orrs	r3, r7
 80019f6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019f8:	2310      	movs	r3, #16
 80019fa:	2708      	movs	r7, #8
 80019fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80019fe:	4033      	ands	r3, r6
 8001a00:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001a02:	4037      	ands	r7, r6
 8001a04:	433b      	orrs	r3, r7
 8001a06:	27f0      	movs	r7, #240	; 0xf0
 8001a08:	013f      	lsls	r7, r7, #4
 8001a0a:	403d      	ands	r5, r7
 8001a0c:	431d      	orrs	r5, r3
 8001a0e:	2304      	movs	r3, #4
 8001a10:	4019      	ands	r1, r3
 8001a12:	4329      	orrs	r1, r5
 8001a14:	4308      	orrs	r0, r1
 8001a16:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a18:	69d3      	ldr	r3, [r2, #28]
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <HAL_SPI_Init+0xec>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a1c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a1e:	400b      	ands	r3, r1
 8001a20:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001a22:	4663      	mov	r3, ip
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a24:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a26:	345d      	adds	r4, #93	; 0x5d
 8001a28:	7023      	strb	r3, [r4, #0]
}
 8001a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a30:	6163      	str	r3, [r4, #20]
 8001a32:	e79b      	b.n	800196c <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a34:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a36:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a38:	0109      	lsls	r1, r1, #4
 8001a3a:	e7b4      	b.n	80019a6 <HAL_SPI_Init+0x56>
 8001a3c:	fffff7ff 	.word	0xfffff7ff

08001a40 <HAL_SPI_Transmit>:
{
 8001a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a42:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001a44:	0003      	movs	r3, r0
{
 8001a46:	b085      	sub	sp, #20
 8001a48:	9100      	str	r1, [sp, #0]
  __HAL_LOCK(hspi);
 8001a4a:	335c      	adds	r3, #92	; 0x5c
{
 8001a4c:	0016      	movs	r6, r2
  __HAL_LOCK(hspi);
 8001a4e:	781a      	ldrb	r2, [r3, #0]
{
 8001a50:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8001a52:	2702      	movs	r7, #2
 8001a54:	2a01      	cmp	r2, #1
 8001a56:	d100      	bne.n	8001a5a <HAL_SPI_Transmit+0x1a>
 8001a58:	e085      	b.n	8001b66 <HAL_SPI_Transmit+0x126>
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001a5e:	f7fe ff3b 	bl	80008d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001a62:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001a64:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001a66:	335d      	adds	r3, #93	; 0x5d
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	b2d7      	uxtb	r7, r2
 8001a6c:	2a01      	cmp	r2, #1
 8001a6e:	d000      	beq.n	8001a72 <HAL_SPI_Transmit+0x32>
 8001a70:	e0af      	b.n	8001bd2 <HAL_SPI_Transmit+0x192>
  if ((pData == NULL) || (Size == 0U))
 8001a72:	9a00      	ldr	r2, [sp, #0]
 8001a74:	2a00      	cmp	r2, #0
 8001a76:	d073      	beq.n	8001b60 <HAL_SPI_Transmit+0x120>
 8001a78:	2e00      	cmp	r6, #0
 8001a7a:	d071      	beq.n	8001b60 <HAL_SPI_Transmit+0x120>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a80:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a82:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a84:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a86:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a88:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a8a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferSize  = Size;
 8001a8c:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001a8e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8001a90:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8001a92:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a94:	87d3      	strh	r3, [r2, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	68a1      	ldr	r1, [r4, #8]
  hspi->TxISR       = NULL;
 8001a9a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001a9c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a9e:	0212      	lsls	r2, r2, #8
    __HAL_SPI_DISABLE(hspi);
 8001aa0:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aa2:	4291      	cmp	r1, r2
 8001aa4:	d108      	bne.n	8001ab8 <HAL_SPI_Transmit+0x78>
    __HAL_SPI_DISABLE(hspi);
 8001aa6:	2140      	movs	r1, #64	; 0x40
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	438a      	bics	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	6819      	ldr	r1, [r3, #0]
 8001ab2:	01d2      	lsls	r2, r2, #7
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	6819      	ldr	r1, [r3, #0]
 8001abc:	4211      	tst	r1, r2
 8001abe:	d102      	bne.n	8001ac6 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ac6:	21e0      	movs	r1, #224	; 0xe0
 8001ac8:	68e0      	ldr	r0, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aca:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001acc:	00c9      	lsls	r1, r1, #3
 8001ace:	4288      	cmp	r0, r1
 8001ad0:	d94f      	bls.n	8001b72 <HAL_SPI_Transmit+0x132>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_SPI_Transmit+0x9a>
 8001ad6:	2e01      	cmp	r6, #1
 8001ad8:	d109      	bne.n	8001aee <HAL_SPI_Transmit+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ada:	9a00      	ldr	r2, [sp, #0]
 8001adc:	8812      	ldrh	r2, [r2, #0]
 8001ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ae0:	9b00      	ldr	r3, [sp, #0]
 8001ae2:	1c99      	adds	r1, r3, #2
      hspi->TxXferCount--;
 8001ae4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ae6:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001aee:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8001af0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d119      	bne.n	8001b2a <HAL_SPI_Transmit+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001af6:	0029      	movs	r1, r5
 8001af8:	0020      	movs	r0, r4
 8001afa:	9a01      	ldr	r2, [sp, #4]
 8001afc:	f7ff ff05 	bl	800190a <SPI_EndRxTxTransaction>
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d163      	bne.n	8001bcc <HAL_SPI_Transmit+0x18c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b04:	68a3      	ldr	r3, [r4, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b0a:	9303      	str	r3, [sp, #12]
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	9203      	str	r2, [sp, #12]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	9303      	str	r3, [sp, #12]
 8001b16:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b18:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d120      	bne.n	8001b60 <HAL_SPI_Transmit+0x120>
    hspi->State = HAL_SPI_STATE_READY;
 8001b1e:	0023      	movs	r3, r4
 8001b20:	2101      	movs	r1, #1
 8001b22:	335d      	adds	r3, #93	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b24:	0017      	movs	r7, r2
    hspi->State = HAL_SPI_STATE_READY;
 8001b26:	7019      	strb	r1, [r3, #0]
 8001b28:	e01a      	b.n	8001b60 <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b2a:	6822      	ldr	r2, [r4, #0]
 8001b2c:	6893      	ldr	r3, [r2, #8]
 8001b2e:	4233      	tst	r3, r6
 8001b30:	d009      	beq.n	8001b46 <HAL_SPI_Transmit+0x106>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b34:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b36:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b38:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b3a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001b3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001b44:	e7d4      	b.n	8001af0 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b46:	f7fe fec7 	bl	80008d8 <HAL_GetTick>
 8001b4a:	9b01      	ldr	r3, [sp, #4]
 8001b4c:	1ac0      	subs	r0, r0, r3
 8001b4e:	42a8      	cmp	r0, r5
 8001b50:	d30c      	bcc.n	8001b6c <HAL_SPI_Transmit+0x12c>
 8001b52:	1c6b      	adds	r3, r5, #1
 8001b54:	d0cc      	beq.n	8001af0 <HAL_SPI_Transmit+0xb0>
          hspi->State = HAL_SPI_STATE_READY;
 8001b56:	0023      	movs	r3, r4
 8001b58:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8001b5a:	2703      	movs	r7, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001b5c:	335d      	adds	r3, #93	; 0x5d
 8001b5e:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001b60:	2300      	movs	r3, #0
 8001b62:	345c      	adds	r4, #92	; 0x5c
 8001b64:	7023      	strb	r3, [r4, #0]
}
 8001b66:	0038      	movs	r0, r7
 8001b68:	b005      	add	sp, #20
 8001b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b6c:	2d00      	cmp	r5, #0
 8001b6e:	d1bf      	bne.n	8001af0 <HAL_SPI_Transmit+0xb0>
 8001b70:	e7f1      	b.n	8001b56 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_SPI_Transmit+0x13a>
 8001b76:	2e01      	cmp	r6, #1
 8001b78:	d109      	bne.n	8001b8e <HAL_SPI_Transmit+0x14e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b7a:	9a00      	ldr	r2, [sp, #0]
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b82:	3301      	adds	r3, #1
 8001b84:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001b86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b8e:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8001b90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0af      	beq.n	8001af6 <HAL_SPI_Transmit+0xb6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	4232      	tst	r2, r6
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_SPI_Transmit+0x174>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ba4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001baa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001bb2:	e7ed      	b.n	8001b90 <HAL_SPI_Transmit+0x150>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bb4:	f7fe fe90 	bl	80008d8 <HAL_GetTick>
 8001bb8:	9b01      	ldr	r3, [sp, #4]
 8001bba:	1ac0      	subs	r0, r0, r3
 8001bbc:	42a8      	cmp	r0, r5
 8001bbe:	d302      	bcc.n	8001bc6 <HAL_SPI_Transmit+0x186>
 8001bc0:	1c6b      	adds	r3, r5, #1
 8001bc2:	d0e5      	beq.n	8001b90 <HAL_SPI_Transmit+0x150>
 8001bc4:	e7c7      	b.n	8001b56 <HAL_SPI_Transmit+0x116>
 8001bc6:	2d00      	cmp	r5, #0
 8001bc8:	d1e2      	bne.n	8001b90 <HAL_SPI_Transmit+0x150>
 8001bca:	e7c4      	b.n	8001b56 <HAL_SPI_Transmit+0x116>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	6623      	str	r3, [r4, #96]	; 0x60
 8001bd0:	e798      	b.n	8001b04 <HAL_SPI_Transmit+0xc4>
    errorcode = HAL_BUSY;
 8001bd2:	2702      	movs	r7, #2
 8001bd4:	e7c4      	b.n	8001b60 <HAL_SPI_Transmit+0x120>
	...

08001bd8 <HAL_SPI_TransmitReceive>:
{
 8001bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bda:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8001bdc:	0003      	movs	r3, r0
 8001bde:	335c      	adds	r3, #92	; 0x5c
{
 8001be0:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8001be2:	781a      	ldrb	r2, [r3, #0]
{
 8001be4:	0004      	movs	r4, r0
 8001be6:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8001be8:	2002      	movs	r0, #2
 8001bea:	2a01      	cmp	r2, #1
 8001bec:	d01b      	beq.n	8001c26 <HAL_SPI_TransmitReceive+0x4e>
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001bf2:	f7fe fe71 	bl	80008d8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001bf6:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001bf8:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8001bfa:	335d      	adds	r3, #93	; 0x5d
 8001bfc:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001bfe:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001c00:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d009      	beq.n	8001c1a <HAL_SPI_TransmitReceive+0x42>
 8001c06:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8001c08:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4299      	cmp	r1, r3
 8001c0e:	d107      	bne.n	8001c20 <HAL_SPI_TransmitReceive+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c10:	68a3      	ldr	r3, [r4, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d104      	bne.n	8001c20 <HAL_SPI_TransmitReceive+0x48>
 8001c16:	2a04      	cmp	r2, #4
 8001c18:	d102      	bne.n	8001c20 <HAL_SPI_TransmitReceive+0x48>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c1a:	2d00      	cmp	r5, #0
 8001c1c:	d104      	bne.n	8001c28 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8001c20:	2300      	movs	r3, #0
 8001c22:	345c      	adds	r4, #92	; 0x5c
 8001c24:	7023      	strb	r3, [r4, #0]
}
 8001c26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c28:	2f00      	cmp	r7, #0
 8001c2a:	d0f8      	beq.n	8001c1e <HAL_SPI_TransmitReceive+0x46>
 8001c2c:	2e00      	cmp	r6, #0
 8001c2e:	d0f6      	beq.n	8001c1e <HAL_SPI_TransmitReceive+0x46>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c30:	0023      	movs	r3, r4
 8001c32:	335d      	adds	r3, #93	; 0x5d
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	2a04      	cmp	r2, #4
 8001c38:	d001      	beq.n	8001c3e <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 8001c3e:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c40:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8001c42:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c44:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c46:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001c48:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001c4a:	1da2      	adds	r2, r4, #6
 8001c4c:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c4e:	22e0      	movs	r2, #224	; 0xe0
 8001c50:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8001c52:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001c54:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c56:	63a5      	str	r5, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c58:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferCount = Size;
 8001c5a:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001c5c:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c5e:	00d2      	lsls	r2, r2, #3
 8001c60:	4290      	cmp	r0, r2
 8001c62:	d935      	bls.n	8001cd0 <HAL_SPI_TransmitReceive+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4f62      	ldr	r7, [pc, #392]	; (8001df0 <HAL_SPI_TransmitReceive+0x218>)
 8001c68:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c6a:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c6c:	2240      	movs	r2, #64	; 0x40
 8001c6e:	681f      	ldr	r7, [r3, #0]
 8001c70:	4217      	tst	r7, r2
 8001c72:	d102      	bne.n	8001c7a <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8001c74:	681f      	ldr	r7, [r3, #0]
 8001c76:	433a      	orrs	r2, r7
 8001c78:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c7a:	22e0      	movs	r2, #224	; 0xe0
 8001c7c:	00d2      	lsls	r2, r2, #3
 8001c7e:	4290      	cmp	r0, r2
 8001c80:	d961      	bls.n	8001d46 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c82:	2900      	cmp	r1, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_SPI_TransmitReceive+0xb2>
 8001c86:	2e01      	cmp	r6, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_SPI_TransmitReceive+0xc2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c8a:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c8c:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c8e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001c90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c92:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001c9a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c9c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c9e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ca0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d119      	bne.n	8001cda <HAL_SPI_TransmitReceive+0x102>
 8001ca6:	0023      	movs	r3, r4
 8001ca8:	3308      	adds	r3, #8
 8001caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d114      	bne.n	8001cda <HAL_SPI_TransmitReceive+0x102>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cb0:	0020      	movs	r0, r4
 8001cb2:	9a01      	ldr	r2, [sp, #4]
 8001cb4:	9908      	ldr	r1, [sp, #32]
 8001cb6:	f7ff fe28 	bl	800190a <SPI_EndRxTxTransaction>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d000      	beq.n	8001cc0 <HAL_SPI_TransmitReceive+0xe8>
 8001cbe:	e093      	b.n	8001de8 <HAL_SPI_TransmitReceive+0x210>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cc0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1ab      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0x46>
    hspi->State = HAL_SPI_STATE_READY;
 8001cc6:	0023      	movs	r3, r4
 8001cc8:	2201      	movs	r2, #1
 8001cca:	335d      	adds	r3, #93	; 0x5d
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e7a7      	b.n	8001c20 <HAL_SPI_TransmitReceive+0x48>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	685f      	ldr	r7, [r3, #4]
 8001cd4:	0152      	lsls	r2, r2, #5
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	e7c7      	b.n	8001c6a <HAL_SPI_TransmitReceive+0x92>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cda:	6820      	ldr	r0, [r4, #0]
 8001cdc:	6883      	ldr	r3, [r0, #8]
 8001cde:	423b      	tst	r3, r7
 8001ce0:	d00e      	beq.n	8001d00 <HAL_SPI_TransmitReceive+0x128>
 8001ce2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <HAL_SPI_TransmitReceive+0x128>
 8001ce8:	2d01      	cmp	r5, #1
 8001cea:	d109      	bne.n	8001d00 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 0U;
 8001cec:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cf0:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cf2:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cf4:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cf6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001cf8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d00:	6883      	ldr	r3, [r0, #8]
 8001d02:	0019      	movs	r1, r3
 8001d04:	4031      	ands	r1, r6
 8001d06:	4233      	tst	r3, r6
 8001d08:	d00e      	beq.n	8001d28 <HAL_SPI_TransmitReceive+0x150>
 8001d0a:	0022      	movs	r2, r4
 8001d0c:	3208      	adds	r2, #8
 8001d0e:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d009      	beq.n	8001d28 <HAL_SPI_TransmitReceive+0x150>
        txallowed = 1U;
 8001d14:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d16:	68c0      	ldr	r0, [r0, #12]
 8001d18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d1a:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001d20:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d28:	f7fe fdd6 	bl	80008d8 <HAL_GetTick>
 8001d2c:	9b01      	ldr	r3, [sp, #4]
 8001d2e:	1ac0      	subs	r0, r0, r3
 8001d30:	9b08      	ldr	r3, [sp, #32]
 8001d32:	4298      	cmp	r0, r3
 8001d34:	d3b4      	bcc.n	8001ca0 <HAL_SPI_TransmitReceive+0xc8>
 8001d36:	3301      	adds	r3, #1
 8001d38:	d0b2      	beq.n	8001ca0 <HAL_SPI_TransmitReceive+0xc8>
        hspi->State = HAL_SPI_STATE_READY;
 8001d3a:	0023      	movs	r3, r4
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	335d      	adds	r3, #93	; 0x5d
        errorcode = HAL_TIMEOUT;
 8001d40:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8001d42:	701a      	strb	r2, [r3, #0]
        goto error;
 8001d44:	e76c      	b.n	8001c20 <HAL_SPI_TransmitReceive+0x48>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d46:	2900      	cmp	r1, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_SPI_TransmitReceive+0x176>
 8001d4a:	2e01      	cmp	r6, #1
 8001d4c:	d108      	bne.n	8001d60 <HAL_SPI_TransmitReceive+0x188>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d4e:	782a      	ldrb	r2, [r5, #0]
 8001d50:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d54:	3301      	adds	r3, #1
 8001d56:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001d58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001d60:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d62:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d64:	002e      	movs	r6, r5
 8001d66:	e032      	b.n	8001dce <HAL_SPI_TransmitReceive+0x1f6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	423a      	tst	r2, r7
 8001d6e:	d00f      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0x1b8>
 8001d70:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d00c      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0x1b8>
 8001d76:	2d01      	cmp	r5, #1
 8001d78:	d10a      	bne.n	8001d90 <HAL_SPI_TransmitReceive+0x1b8>
        txallowed = 0U;
 8001d7a:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d84:	3301      	adds	r3, #1
 8001d86:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001d88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	0011      	movs	r1, r2
 8001d96:	4031      	ands	r1, r6
 8001d98:	4232      	tst	r2, r6
 8001d9a:	d00f      	beq.n	8001dbc <HAL_SPI_TransmitReceive+0x1e4>
 8001d9c:	0022      	movs	r2, r4
 8001d9e:	3208      	adds	r2, #8
 8001da0:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d00a      	beq.n	8001dbc <HAL_SPI_TransmitReceive+0x1e4>
        txallowed = 1U;
 8001da6:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001da8:	7b1b      	ldrb	r3, [r3, #12]
 8001daa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001dac:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 8001dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001db0:	3301      	adds	r3, #1
 8001db2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001db4:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001dbc:	f7fe fd8c 	bl	80008d8 <HAL_GetTick>
 8001dc0:	9b01      	ldr	r3, [sp, #4]
 8001dc2:	1ac0      	subs	r0, r0, r3
 8001dc4:	9b08      	ldr	r3, [sp, #32]
 8001dc6:	4298      	cmp	r0, r3
 8001dc8:	d30a      	bcc.n	8001de0 <HAL_SPI_TransmitReceive+0x208>
 8001dca:	3301      	adds	r3, #1
 8001dcc:	d1b5      	bne.n	8001d3a <HAL_SPI_TransmitReceive+0x162>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1c9      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x190>
 8001dd4:	0023      	movs	r3, r4
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1c4      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x190>
 8001dde:	e767      	b.n	8001cb0 <HAL_SPI_TransmitReceive+0xd8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001de0:	9b08      	ldr	r3, [sp, #32]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f3      	bne.n	8001dce <HAL_SPI_TransmitReceive+0x1f6>
 8001de6:	e7a8      	b.n	8001d3a <HAL_SPI_TransmitReceive+0x162>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001de8:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001dea:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dec:	6623      	str	r3, [r4, #96]	; 0x60
 8001dee:	e767      	b.n	8001cc0 <HAL_SPI_TransmitReceive+0xe8>
 8001df0:	ffffefff 	.word	0xffffefff

08001df4 <HAL_SPI_Receive>:
{
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	001d      	movs	r5, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8001df8:	0003      	movs	r3, r0
{
 8001dfa:	b087      	sub	sp, #28
  if (hspi->State != HAL_SPI_STATE_READY)
 8001dfc:	335d      	adds	r3, #93	; 0x5d
{
 8001dfe:	9204      	str	r2, [sp, #16]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e00:	9303      	str	r3, [sp, #12]
 8001e02:	781b      	ldrb	r3, [r3, #0]
{
 8001e04:	0004      	movs	r4, r0
 8001e06:	000f      	movs	r7, r1
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e08:	b2de      	uxtb	r6, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d000      	beq.n	8001e10 <HAL_SPI_Receive+0x1c>
 8001e0e:	e0b1      	b.n	8001f74 <HAL_SPI_Receive+0x180>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e10:	3304      	adds	r3, #4
 8001e12:	6842      	ldr	r2, [r0, #4]
 8001e14:	33ff      	adds	r3, #255	; 0xff
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d10e      	bne.n	8001e38 <HAL_SPI_Receive+0x44>
 8001e1a:	6883      	ldr	r3, [r0, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10b      	bne.n	8001e38 <HAL_SPI_Receive+0x44>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e20:	9a03      	ldr	r2, [sp, #12]
 8001e22:	3304      	adds	r3, #4
 8001e24:	7013      	strb	r3, [r2, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e26:	000a      	movs	r2, r1
 8001e28:	9b04      	ldr	r3, [sp, #16]
 8001e2a:	9500      	str	r5, [sp, #0]
 8001e2c:	f7ff fed4 	bl	8001bd8 <HAL_SPI_TransmitReceive>
 8001e30:	0006      	movs	r6, r0
}
 8001e32:	0030      	movs	r0, r6
 8001e34:	b007      	add	sp, #28
 8001e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8001e38:	0023      	movs	r3, r4
 8001e3a:	335c      	adds	r3, #92	; 0x5c
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	2a01      	cmp	r2, #1
 8001e40:	d100      	bne.n	8001e44 <HAL_SPI_Receive+0x50>
 8001e42:	e099      	b.n	8001f78 <HAL_SPI_Receive+0x184>
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001e48:	f7fe fd46 	bl	80008d8 <HAL_GetTick>
 8001e4c:	9005      	str	r0, [sp, #20]
  if ((pData == NULL) || (Size == 0U))
 8001e4e:	2f00      	cmp	r7, #0
 8001e50:	d07a      	beq.n	8001f48 <HAL_SPI_Receive+0x154>
 8001e52:	9b04      	ldr	r3, [sp, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d077      	beq.n	8001f48 <HAL_SPI_Receive+0x154>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	9a03      	ldr	r2, [sp, #12]
  hspi->RxXferSize  = Size;
 8001e5c:	9904      	ldr	r1, [sp, #16]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e5e:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e60:	2300      	movs	r3, #0
  hspi->RxXferSize  = Size;
 8001e62:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e64:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e66:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001e68:	3202      	adds	r2, #2
  hspi->RxXferSize  = Size;
 8001e6a:	8791      	strh	r1, [r2, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e6c:	87d1      	strh	r1, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e6e:	22e0      	movs	r2, #224	; 0xe0
 8001e70:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e72:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001e74:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001e76:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001e78:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001e7a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e7c:	00d2      	lsls	r2, r2, #3
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e7e:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e80:	4291      	cmp	r1, r2
 8001e82:	d92f      	bls.n	8001ee4 <HAL_SPI_Receive+0xf0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	483d      	ldr	r0, [pc, #244]	; (8001f7c <HAL_SPI_Receive+0x188>)
 8001e88:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e8a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	68a0      	ldr	r0, [r4, #8]
 8001e90:	0212      	lsls	r2, r2, #8
 8001e92:	4290      	cmp	r0, r2
 8001e94:	d107      	bne.n	8001ea6 <HAL_SPI_Receive+0xb2>
    __HAL_SPI_DISABLE(hspi);
 8001e96:	2040      	movs	r0, #64	; 0x40
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4382      	bics	r2, r0
 8001e9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4837      	ldr	r0, [pc, #220]	; (8001f80 <HAL_SPI_Receive+0x18c>)
 8001ea2:	4002      	ands	r2, r0
 8001ea4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	4210      	tst	r0, r2
 8001eac:	d102      	bne.n	8001eb4 <HAL_SPI_Receive+0xc0>
    __HAL_SPI_ENABLE(hspi);
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	4302      	orrs	r2, r0
 8001eb2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001eb4:	23e0      	movs	r3, #224	; 0xe0
 8001eb6:	0027      	movs	r7, r4
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	4299      	cmp	r1, r3
 8001ebe:	d925      	bls.n	8001f0c <HAL_SPI_Receive+0x118>
    while (hspi->RxXferCount > 0U)
 8001ec0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d025      	beq.n	8001f12 <HAL_SPI_Receive+0x11e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	420a      	tst	r2, r1
 8001ece:	d042      	beq.n	8001f56 <HAL_SPI_Receive+0x162>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001eda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001ee2:	e7ed      	b.n	8001ec0 <HAL_SPI_Receive+0xcc>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	6858      	ldr	r0, [r3, #4]
 8001ee8:	0152      	lsls	r2, r2, #5
 8001eea:	4302      	orrs	r2, r0
 8001eec:	e7cd      	b.n	8001e8a <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001eee:	2101      	movs	r1, #1
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	420a      	tst	r2, r1
 8001ef6:	d01b      	beq.n	8001f30 <HAL_SPI_Receive+0x13c>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ef8:	7b1b      	ldrb	r3, [r3, #12]
 8001efa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001efc:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f00:	185b      	adds	r3, r3, r1
 8001f02:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8001f04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001f0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ed      	bne.n	8001eee <HAL_SPI_Receive+0xfa>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f12:	0029      	movs	r1, r5
 8001f14:	0020      	movs	r0, r4
 8001f16:	9a05      	ldr	r2, [sp, #20]
 8001f18:	f7ff fcba 	bl	8001890 <SPI_EndRxTransaction>
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d126      	bne.n	8001f6e <HAL_SPI_Receive+0x17a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d110      	bne.n	8001f48 <HAL_SPI_Receive+0x154>
    hspi->State = HAL_SPI_STATE_READY;
 8001f26:	2201      	movs	r2, #1
 8001f28:	9903      	ldr	r1, [sp, #12]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f2a:	001e      	movs	r6, r3
    hspi->State = HAL_SPI_STATE_READY;
 8001f2c:	700a      	strb	r2, [r1, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_SPI_Receive+0x154>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f30:	f7fe fcd2 	bl	80008d8 <HAL_GetTick>
 8001f34:	9b05      	ldr	r3, [sp, #20]
 8001f36:	1ac0      	subs	r0, r0, r3
 8001f38:	42a8      	cmp	r0, r5
 8001f3a:	d309      	bcc.n	8001f50 <HAL_SPI_Receive+0x15c>
 8001f3c:	1c6b      	adds	r3, r5, #1
 8001f3e:	d0e5      	beq.n	8001f0c <HAL_SPI_Receive+0x118>
          hspi->State = HAL_SPI_STATE_READY;
 8001f40:	2301      	movs	r3, #1
          errorcode = HAL_TIMEOUT;
 8001f42:	2603      	movs	r6, #3
          hspi->State = HAL_SPI_STATE_READY;
 8001f44:	9a03      	ldr	r2, [sp, #12]
 8001f46:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	345c      	adds	r4, #92	; 0x5c
 8001f4c:	7023      	strb	r3, [r4, #0]
  return errorcode;
 8001f4e:	e770      	b.n	8001e32 <HAL_SPI_Receive+0x3e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f50:	2d00      	cmp	r5, #0
 8001f52:	d1db      	bne.n	8001f0c <HAL_SPI_Receive+0x118>
 8001f54:	e7f4      	b.n	8001f40 <HAL_SPI_Receive+0x14c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f56:	f7fe fcbf 	bl	80008d8 <HAL_GetTick>
 8001f5a:	9b05      	ldr	r3, [sp, #20]
 8001f5c:	1ac0      	subs	r0, r0, r3
 8001f5e:	42a8      	cmp	r0, r5
 8001f60:	d302      	bcc.n	8001f68 <HAL_SPI_Receive+0x174>
 8001f62:	1c6b      	adds	r3, r5, #1
 8001f64:	d0ac      	beq.n	8001ec0 <HAL_SPI_Receive+0xcc>
 8001f66:	e7eb      	b.n	8001f40 <HAL_SPI_Receive+0x14c>
 8001f68:	2d00      	cmp	r5, #0
 8001f6a:	d1a9      	bne.n	8001ec0 <HAL_SPI_Receive+0xcc>
 8001f6c:	e7e8      	b.n	8001f40 <HAL_SPI_Receive+0x14c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	6623      	str	r3, [r4, #96]	; 0x60
 8001f72:	e7d5      	b.n	8001f20 <HAL_SPI_Receive+0x12c>
    errorcode = HAL_BUSY;
 8001f74:	2602      	movs	r6, #2
 8001f76:	e7e7      	b.n	8001f48 <HAL_SPI_Receive+0x154>
  __HAL_LOCK(hspi);
 8001f78:	2602      	movs	r6, #2
 8001f7a:	e75a      	b.n	8001e32 <HAL_SPI_Receive+0x3e>
 8001f7c:	ffffefff 	.word	0xffffefff
 8001f80:	ffffbfff 	.word	0xffffbfff

08001f84 <send_byte>:
	RST_PIN(DC_PORT, DC);
	send_byte(cmd);
	SET_PIN(DC_PORT, DC);
}

static void send_byte(uint8_t byte){
 8001f84:	b513      	push	{r0, r1, r4, lr}
 8001f86:	466b      	mov	r3, sp
	RST_PIN(CS_PORT, CS);
 8001f88:	4c09      	ldr	r4, [pc, #36]	; (8001fb0 <send_byte+0x2c>)
static void send_byte(uint8_t byte){
 8001f8a:	71d8      	strb	r0, [r3, #7]
 8001f8c:	1dd9      	adds	r1, r3, #7
	RST_PIN(CS_PORT, CS);
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <send_byte+0x30>)
 8001f90:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(spi_ptr, &byte, 1, 1000);
 8001f92:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <send_byte+0x34>)
	RST_PIN(CS_PORT, CS);
 8001f94:	4013      	ands	r3, r2
 8001f96:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(spi_ptr, &byte, 1, 1000);
 8001f98:	23fa      	movs	r3, #250	; 0xfa
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	6800      	ldr	r0, [r0, #0]
 8001fa0:	f7ff fd4e 	bl	8001a40 <HAL_SPI_Transmit>
	SET_PIN(CS_PORT, CS);
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	6962      	ldr	r2, [r4, #20]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4313      	orrs	r3, r2
 8001fac:	6163      	str	r3, [r4, #20]
}
 8001fae:	bd13      	pop	{r0, r1, r4, pc}
 8001fb0:	48000400 	.word	0x48000400
 8001fb4:	fffffdff 	.word	0xfffffdff
 8001fb8:	20000204 	.word	0x20000204

08001fbc <send_command>:
static void send_command(uint8_t cmd){
 8001fbc:	b510      	push	{r4, lr}
	RST_PIN(DC_PORT, DC);
 8001fbe:	4c06      	ldr	r4, [pc, #24]	; (8001fd8 <send_command+0x1c>)
 8001fc0:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <send_command+0x20>)
 8001fc2:	6963      	ldr	r3, [r4, #20]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	6163      	str	r3, [r4, #20]
	send_byte(cmd);
 8001fc8:	f7ff ffdc 	bl	8001f84 <send_byte>
	SET_PIN(DC_PORT, DC);
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	6962      	ldr	r2, [r4, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	6163      	str	r3, [r4, #20]
}
 8001fd6:	bd10      	pop	{r4, pc}
 8001fd8:	48000400 	.word	0x48000400
 8001fdc:	fffffeff 	.word	0xfffffeff

08001fe0 <send_data>:

static void send_data(uint8_t buff[], uint16_t size){
	HAL_SPI_Transmit(spi_ptr, buff, size, 1000);
 8001fe0:	23fa      	movs	r3, #250	; 0xfa
static void send_data(uint8_t buff[], uint16_t size){
 8001fe2:	b510      	push	{r4, lr}
 8001fe4:	000a      	movs	r2, r1
	HAL_SPI_Transmit(spi_ptr, buff, size, 1000);
 8001fe6:	0001      	movs	r1, r0
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <send_data+0x14>)
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	6800      	ldr	r0, [r0, #0]
 8001fee:	f7ff fd27 	bl	8001a40 <HAL_SPI_Transmit>
}
 8001ff2:	bd10      	pop	{r4, pc}
 8001ff4:	20000204 	.word	0x20000204

08001ff8 <send_pixelVal>:

static void send_pixelVal(Colors_t color){
 8001ff8:	b513      	push	{r0, r1, r4, lr}
	uint8_t buff[2]={(color>>8), color&0xFF};
 8001ffa:	466a      	mov	r2, sp
	RST_PIN(CS_PORT, CS);
 8001ffc:	4c08      	ldr	r4, [pc, #32]	; (8002020 <send_pixelVal+0x28>)
	uint8_t buff[2]={(color>>8), color&0xFF};
 8001ffe:	0a03      	lsrs	r3, r0, #8
 8002000:	7150      	strb	r0, [r2, #5]
 8002002:	7113      	strb	r3, [r2, #4]
	RST_PIN(CS_PORT, CS);
 8002004:	6963      	ldr	r3, [r4, #20]
 8002006:	4a07      	ldr	r2, [pc, #28]	; (8002024 <send_pixelVal+0x2c>)
	send_data(buff, 2);
 8002008:	2102      	movs	r1, #2
	RST_PIN(CS_PORT, CS);
 800200a:	4013      	ands	r3, r2
 800200c:	6163      	str	r3, [r4, #20]
	send_data(buff, 2);
 800200e:	a801      	add	r0, sp, #4
 8002010:	f7ff ffe6 	bl	8001fe0 <send_data>
	SET_PIN(CS_PORT, CS);
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	6962      	ldr	r2, [r4, #20]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4313      	orrs	r3, r2
 800201c:	6163      	str	r3, [r4, #20]
}
 800201e:	bd13      	pop	{r0, r1, r4, pc}
 8002020:	48000400 	.word	0x48000400
 8002024:	fffffdff 	.word	0xfffffdff

08002028 <ST7735_TFT_setXBoundary>:
void ST7735_TFT_setXBoundary(uint8_t x_start, uint8_t x_end){
 8002028:	b570      	push	{r4, r5, r6, lr}
	WindowX.start = x_start;
 800202a:	4d0a      	ldr	r5, [pc, #40]	; (8002054 <ST7735_TFT_setXBoundary+0x2c>)
	RST_PIN(CS_PORT, CS);
 800202c:	4c0a      	ldr	r4, [pc, #40]	; (8002058 <ST7735_TFT_setXBoundary+0x30>)
	WindowX.start = x_start;
 800202e:	7068      	strb	r0, [r5, #1]
	send_command(CASET);
 8002030:	202a      	movs	r0, #42	; 0x2a
	WindowX.end = x_end;
 8002032:	70e9      	strb	r1, [r5, #3]
	send_command(CASET);
 8002034:	f7ff ffc2 	bl	8001fbc <send_command>
	RST_PIN(CS_PORT, CS);
 8002038:	6963      	ldr	r3, [r4, #20]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <ST7735_TFT_setXBoundary+0x34>)
	send_data(WindowX.reg_val, 4);
 800203c:	0028      	movs	r0, r5
	RST_PIN(CS_PORT, CS);
 800203e:	4013      	ands	r3, r2
 8002040:	6163      	str	r3, [r4, #20]
	send_data(WindowX.reg_val, 4);
 8002042:	2104      	movs	r1, #4
 8002044:	f7ff ffcc 	bl	8001fe0 <send_data>
	SET_PIN(CS_PORT, CS);
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	6962      	ldr	r2, [r4, #20]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4313      	orrs	r3, r2
 8002050:	6163      	str	r3, [r4, #20]
}
 8002052:	bd70      	pop	{r4, r5, r6, pc}
 8002054:	2000001b 	.word	0x2000001b
 8002058:	48000400 	.word	0x48000400
 800205c:	fffffdff 	.word	0xfffffdff

08002060 <ST7735_TFT_setYBoundary>:
void ST7735_TFT_setYBoundary(uint8_t y_start, uint8_t y_end){
 8002060:	b570      	push	{r4, r5, r6, lr}
	WindowY.start = y_start;
 8002062:	4d0a      	ldr	r5, [pc, #40]	; (800208c <ST7735_TFT_setYBoundary+0x2c>)
	RST_PIN(CS_PORT, CS);
 8002064:	4c0a      	ldr	r4, [pc, #40]	; (8002090 <ST7735_TFT_setYBoundary+0x30>)
	WindowY.start = y_start;
 8002066:	7068      	strb	r0, [r5, #1]
	send_command(RASET);
 8002068:	202b      	movs	r0, #43	; 0x2b
	WindowY.end = y_end;
 800206a:	70e9      	strb	r1, [r5, #3]
	send_command(RASET);
 800206c:	f7ff ffa6 	bl	8001fbc <send_command>
	RST_PIN(CS_PORT, CS);
 8002070:	6963      	ldr	r3, [r4, #20]
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <ST7735_TFT_setYBoundary+0x34>)
	send_data(WindowY.reg_val, 4);
 8002074:	0028      	movs	r0, r5
	RST_PIN(CS_PORT, CS);
 8002076:	4013      	ands	r3, r2
 8002078:	6163      	str	r3, [r4, #20]
	send_data(WindowY.reg_val, 4);
 800207a:	2104      	movs	r1, #4
 800207c:	f7ff ffb0 	bl	8001fe0 <send_data>
	SET_PIN(CS_PORT, CS);
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	6962      	ldr	r2, [r4, #20]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4313      	orrs	r3, r2
 8002088:	6163      	str	r3, [r4, #20]
}
 800208a:	bd70      	pop	{r4, r5, r6, pc}
 800208c:	2000001f 	.word	0x2000001f
 8002090:	48000400 	.word	0x48000400
 8002094:	fffffdff 	.word	0xfffffdff

08002098 <ST7735_TFT_setWindow>:
void ST7735_TFT_setWindow(uint8_t x_start, uint8_t x_end, uint8_t y_start, uint8_t y_end){
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	001d      	movs	r5, r3
 800209c:	0014      	movs	r4, r2
	ST7735_TFT_setXBoundary(x_start, x_end);
 800209e:	f7ff ffc3 	bl	8002028 <ST7735_TFT_setXBoundary>
	ST7735_TFT_setYBoundary(y_start, y_end);
 80020a2:	0029      	movs	r1, r5
 80020a4:	0020      	movs	r0, r4
 80020a6:	f7ff ffdb 	bl	8002060 <ST7735_TFT_setYBoundary>
}
 80020aa:	bd70      	pop	{r4, r5, r6, pc}

080020ac <ST7735_TFT_setColorMod>:
void ST7735_TFT_setColorMod(COLMOD_arg_t colmod){
 80020ac:	b510      	push	{r4, lr}
 80020ae:	0004      	movs	r4, r0
	send_command(COLMOD);
 80020b0:	203a      	movs	r0, #58	; 0x3a
 80020b2:	f7ff ff83 	bl	8001fbc <send_command>
	send_byte(colmod);
 80020b6:	0020      	movs	r0, r4
 80020b8:	f7ff ff64 	bl	8001f84 <send_byte>
}
 80020bc:	bd10      	pop	{r4, pc}
	...

080020c0 <ST7735_TFT_init>:
	spi_ptr = hspi_ptr;
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <ST7735_TFT_init+0x68>)
void ST7735_TFT_init(SPI_HandleTypeDef *hspi_ptr){
 80020c2:	b570      	push	{r4, r5, r6, lr}
	spi_ptr = hspi_ptr;
 80020c4:	6018      	str	r0, [r3, #0]
	SET_PIN(CS_PORT,CS);
 80020c6:	2380      	movs	r3, #128	; 0x80
	SET_PIN(RST_PORT,RST);
 80020c8:	2580      	movs	r5, #128	; 0x80
	SET_PIN(CS_PORT,CS);
 80020ca:	4c18      	ldr	r4, [pc, #96]	; (800212c <ST7735_TFT_init+0x6c>)
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	6962      	ldr	r2, [r4, #20]
	HAL_Delay(5);
 80020d0:	2005      	movs	r0, #5
	SET_PIN(CS_PORT,CS);
 80020d2:	4313      	orrs	r3, r2
 80020d4:	6163      	str	r3, [r4, #20]
	SET_PIN(RST_PORT,RST);
 80020d6:	6963      	ldr	r3, [r4, #20]
 80020d8:	432b      	orrs	r3, r5
 80020da:	6163      	str	r3, [r4, #20]
	SET_PIN(DC_PORT,DC);
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	6962      	ldr	r2, [r4, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4313      	orrs	r3, r2
 80020e4:	6163      	str	r3, [r4, #20]
	RST_PIN(RST_PORT, RST);
 80020e6:	6963      	ldr	r3, [r4, #20]
 80020e8:	43ab      	bics	r3, r5
 80020ea:	6163      	str	r3, [r4, #20]
	HAL_Delay(5);
 80020ec:	f7fe fbfa 	bl	80008e4 <HAL_Delay>
	SET_PIN(RST_PORT, RST);
 80020f0:	6963      	ldr	r3, [r4, #20]
	HAL_Delay(200); //after max 120ms resetting cancel occurs
 80020f2:	20c8      	movs	r0, #200	; 0xc8
	SET_PIN(RST_PORT, RST);
 80020f4:	431d      	orrs	r5, r3
 80020f6:	6165      	str	r5, [r4, #20]
	HAL_Delay(200); //after max 120ms resetting cancel occurs
 80020f8:	f7fe fbf4 	bl	80008e4 <HAL_Delay>
	send_command(setting);
 80020fc:	2011      	movs	r0, #17
 80020fe:	f7ff ff5d 	bl	8001fbc <send_command>
	send_command(status);
 8002102:	2029      	movs	r0, #41	; 0x29
 8002104:	f7ff ff5a 	bl	8001fbc <send_command>
	HAL_Delay(300);
 8002108:	2096      	movs	r0, #150	; 0x96
 800210a:	0040      	lsls	r0, r0, #1
 800210c:	f7fe fbea 	bl	80008e4 <HAL_Delay>
	ST7735_TFT_setColorMod(BitPerPixel_16);
 8002110:	2005      	movs	r0, #5
 8002112:	f7ff ffcb 	bl	80020ac <ST7735_TFT_setColorMod>
	ST7735_TFT_setWindow(WindowX.start, WindowX.end, WindowY.start, WindowY.end);
 8002116:	4a06      	ldr	r2, [pc, #24]	; (8002130 <ST7735_TFT_init+0x70>)
 8002118:	4806      	ldr	r0, [pc, #24]	; (8002134 <ST7735_TFT_init+0x74>)
 800211a:	78d3      	ldrb	r3, [r2, #3]
 800211c:	78c1      	ldrb	r1, [r0, #3]
 800211e:	7852      	ldrb	r2, [r2, #1]
 8002120:	7840      	ldrb	r0, [r0, #1]
 8002122:	f7ff ffb9 	bl	8002098 <ST7735_TFT_setWindow>
}
 8002126:	bd70      	pop	{r4, r5, r6, pc}
 8002128:	20000204 	.word	0x20000204
 800212c:	48000400 	.word	0x48000400
 8002130:	2000001f 	.word	0x2000001f
 8002134:	2000001b 	.word	0x2000001b

08002138 <ST7735_TFT_setOrientation>:
	Madctl.reg_val=0;
 8002138:	2300      	movs	r3, #0
void ST7735_TFT_setOrientation(Orientation_t orientation){
 800213a:	b510      	push	{r4, lr}
	Madctl.reg_val=0;
 800213c:	4c16      	ldr	r4, [pc, #88]	; (8002198 <ST7735_TFT_setOrientation+0x60>)
 800213e:	7023      	strb	r3, [r4, #0]
	Screen.orienation = orientation;
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <ST7735_TFT_setOrientation+0x64>)
 8002142:	7098      	strb	r0, [r3, #2]
	switch(orientation){
 8002144:	2803      	cmp	r0, #3
 8002146:	d80e      	bhi.n	8002166 <ST7735_TFT_setOrientation+0x2e>
 8002148:	22a0      	movs	r2, #160	; 0xa0
 800214a:	2180      	movs	r1, #128	; 0x80
 800214c:	f7fd ffdc 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002150:	1d150212 	.word	0x1d150212
		Madctl.bits.MX = 1;
 8002154:	2140      	movs	r1, #64	; 0x40
 8002156:	7822      	ldrb	r2, [r4, #0]
 8002158:	4249      	negs	r1, r1
 800215a:	430a      	orrs	r2, r1
 800215c:	7022      	strb	r2, [r4, #0]
		Screen.height = ST7735_TFT_HEIGHT;
 800215e:	22a0      	movs	r2, #160	; 0xa0
 8002160:	701a      	strb	r2, [r3, #0]
		Screen.width = ST7735_TFT_WIDTH;
 8002162:	3a20      	subs	r2, #32
 8002164:	705a      	strb	r2, [r3, #1]
	send_command(MADCTL);
 8002166:	2036      	movs	r0, #54	; 0x36
 8002168:	f7ff ff28 	bl	8001fbc <send_command>
	send_byte(Madctl.reg_val);
 800216c:	7820      	ldrb	r0, [r4, #0]
 800216e:	f7ff ff09 	bl	8001f84 <send_byte>
}
 8002172:	bd10      	pop	{r4, pc}
		Screen.height = ST7735_TFT_HEIGHT;
 8002174:	701a      	strb	r2, [r3, #0]
		Screen.width = ST7735_TFT_WIDTH;
 8002176:	7059      	strb	r1, [r3, #1]
		break;
 8002178:	e7f5      	b.n	8002166 <ST7735_TFT_setOrientation+0x2e>
		Screen.width = ST7735_TFT_HEIGHT;
 800217a:	705a      	strb	r2, [r3, #1]
		Screen.height = ST7735_TFT_WIDTH;
 800217c:	7019      	strb	r1, [r3, #0]
		Madctl.bits.MV = 1;
 800217e:	2360      	movs	r3, #96	; 0x60
 8002180:	7822      	ldrb	r2, [r4, #0]
 8002182:	439a      	bics	r2, r3
		Madctl.bits.MV = 1;
 8002184:	4313      	orrs	r3, r2
 8002186:	7023      	strb	r3, [r4, #0]
		break;
 8002188:	e7ed      	b.n	8002166 <ST7735_TFT_setOrientation+0x2e>
		Screen.width = ST7735_TFT_HEIGHT;
 800218a:	705a      	strb	r2, [r3, #1]
		Madctl.bits.MV = 1;
 800218c:	2260      	movs	r2, #96	; 0x60
		Screen.height = ST7735_TFT_WIDTH;
 800218e:	7019      	strb	r1, [r3, #0]
		Madctl.bits.MV = 1;
 8002190:	4252      	negs	r2, r2
 8002192:	7823      	ldrb	r3, [r4, #0]
 8002194:	e7f6      	b.n	8002184 <ST7735_TFT_setOrientation+0x4c>
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	20000200 	.word	0x20000200
 800219c:	20000018 	.word	0x20000018

080021a0 <ST7735_TFT_Paint>:
void ST7735_TFT_Paint(uint8_t x_start, uint8_t x_end, uint8_t y_start, uint8_t y_end, Colors_t color){
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	001c      	movs	r4, r3
 80021a4:	0007      	movs	r7, r0
 80021a6:	000d      	movs	r5, r1
 80021a8:	b085      	sub	sp, #20
 80021aa:	ab0a      	add	r3, sp, #40	; 0x28
 80021ac:	881e      	ldrh	r6, [r3, #0]
	ST7735_TFT_setWindow(x_start, x_end, y_start, y_end);
 80021ae:	0023      	movs	r3, r4
void ST7735_TFT_Paint(uint8_t x_start, uint8_t x_end, uint8_t y_start, uint8_t y_end, Colors_t color){
 80021b0:	9201      	str	r2, [sp, #4]
	ST7735_TFT_setWindow(x_start, x_end, y_start, y_end);
 80021b2:	f7ff ff71 	bl	8002098 <ST7735_TFT_setWindow>
	send_command(RAMWR);
 80021b6:	202c      	movs	r0, #44	; 0x2c
 80021b8:	f7ff ff00 	bl	8001fbc <send_command>
	uint8_t buff[2]={(color>>8), color&0xFF};
 80021bc:	aa02      	add	r2, sp, #8
 80021be:	7156      	strb	r6, [r2, #5]
 80021c0:	0a33      	lsrs	r3, r6, #8
	RST_PIN(CS_PORT, CS);
 80021c2:	4e0e      	ldr	r6, [pc, #56]	; (80021fc <ST7735_TFT_Paint+0x5c>)
	uint8_t buff[2]={(color>>8), color&0xFF};
 80021c4:	7113      	strb	r3, [r2, #4]
	RST_PIN(CS_PORT, CS);
 80021c6:	6973      	ldr	r3, [r6, #20]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <ST7735_TFT_Paint+0x60>)
	for(uint16_t i = 0; i < ((x_end-x_start)+1)*((y_end-y_start)+1); i++){
 80021ca:	1bed      	subs	r5, r5, r7
	RST_PIN(CS_PORT, CS);
 80021cc:	4013      	ands	r3, r2
 80021ce:	6173      	str	r3, [r6, #20]
	for(uint16_t i = 0; i < ((x_end-x_start)+1)*((y_end-y_start)+1); i++){
 80021d0:	9b01      	ldr	r3, [sp, #4]
 80021d2:	3501      	adds	r5, #1
 80021d4:	1ae4      	subs	r4, r4, r3
 80021d6:	3401      	adds	r4, #1
 80021d8:	436c      	muls	r4, r5
 80021da:	2500      	movs	r5, #0
 80021dc:	42a5      	cmp	r5, r4
 80021de:	db06      	blt.n	80021ee <ST7735_TFT_Paint+0x4e>
	SET_PIN(CS_PORT, CS);
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	6972      	ldr	r2, [r6, #20]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4313      	orrs	r3, r2
 80021e8:	6173      	str	r3, [r6, #20]
}
 80021ea:	b005      	add	sp, #20
 80021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_data(buff, 2);
 80021ee:	2102      	movs	r1, #2
 80021f0:	a803      	add	r0, sp, #12
	for(uint16_t i = 0; i < ((x_end-x_start)+1)*((y_end-y_start)+1); i++){
 80021f2:	3501      	adds	r5, #1
		send_data(buff, 2);
 80021f4:	f7ff fef4 	bl	8001fe0 <send_data>
	for(uint16_t i = 0; i < ((x_end-x_start)+1)*((y_end-y_start)+1); i++){
 80021f8:	b2ad      	uxth	r5, r5
 80021fa:	e7ef      	b.n	80021dc <ST7735_TFT_Paint+0x3c>
 80021fc:	48000400 	.word	0x48000400
 8002200:	fffffdff 	.word	0xfffffdff

08002204 <ST7735_TFT_fillScreen>:
void ST7735_TFT_fillScreen(Colors_t color){
 8002204:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ST7735_TFT_setWindow(0, Screen.width, 0, Screen.height);
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <ST7735_TFT_fillScreen+0x4c>)
void ST7735_TFT_fillScreen(Colors_t color){
 8002208:	0004      	movs	r4, r0
	ST7735_TFT_setWindow(0, Screen.width, 0, Screen.height);
 800220a:	7813      	ldrb	r3, [r2, #0]
 800220c:	7851      	ldrb	r1, [r2, #1]
 800220e:	2200      	movs	r2, #0
 8002210:	0010      	movs	r0, r2
 8002212:	f7ff ff41 	bl	8002098 <ST7735_TFT_setWindow>
	send_command(RAMWR);
 8002216:	202c      	movs	r0, #44	; 0x2c
 8002218:	f7ff fed0 	bl	8001fbc <send_command>
	uint8_t buff[2]={(color>>8), color&0xFF};
 800221c:	466a      	mov	r2, sp
 800221e:	0a23      	lsrs	r3, r4, #8
 8002220:	7154      	strb	r4, [r2, #5]
	RST_PIN(CS_PORT, CS);
 8002222:	24a0      	movs	r4, #160	; 0xa0
 8002224:	4d0b      	ldr	r5, [pc, #44]	; (8002254 <ST7735_TFT_fillScreen+0x50>)
	uint8_t buff[2]={(color>>8), color&0xFF};
 8002226:	7113      	strb	r3, [r2, #4]
	RST_PIN(CS_PORT, CS);
 8002228:	696b      	ldr	r3, [r5, #20]
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <ST7735_TFT_fillScreen+0x54>)
 800222c:	01e4      	lsls	r4, r4, #7
 800222e:	4013      	ands	r3, r2
 8002230:	616b      	str	r3, [r5, #20]
	for(uint16_t i = 0; i < ST7735_TFT_PIXEL_NUM; i++){
 8002232:	3c01      	subs	r4, #1
		send_data(buff, 2);
 8002234:	2102      	movs	r1, #2
 8002236:	a801      	add	r0, sp, #4
	for(uint16_t i = 0; i < ST7735_TFT_PIXEL_NUM; i++){
 8002238:	b2a4      	uxth	r4, r4
		send_data(buff, 2);
 800223a:	f7ff fed1 	bl	8001fe0 <send_data>
	for(uint16_t i = 0; i < ST7735_TFT_PIXEL_NUM; i++){
 800223e:	2c00      	cmp	r4, #0
 8002240:	d1f7      	bne.n	8002232 <ST7735_TFT_fillScreen+0x2e>
	SET_PIN(CS_PORT, CS);
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	696a      	ldr	r2, [r5, #20]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4313      	orrs	r3, r2
 800224a:	616b      	str	r3, [r5, #20]
}
 800224c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	20000018 	.word	0x20000018
 8002254:	48000400 	.word	0x48000400
 8002258:	fffffdff 	.word	0xfffffdff

0800225c <ST7735_TFT_writeChar>:
void ST7735_TFT_writeChar(char ch, uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 800225c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800225e:	0005      	movs	r5, r0
	RST_PIN(CS_PORT, CS);
 8002260:	2600      	movs	r6, #0
void ST7735_TFT_writeChar(char ch, uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	ab08      	add	r3, sp, #32
 8002266:	0008      	movs	r0, r1
 8002268:	881f      	ldrh	r7, [r3, #0]
	ST7735_TFT_setWindow(x_addr, x_addr+7, y_addr, y_addr+7);
 800226a:	3107      	adds	r1, #7
 800226c:	1dd3      	adds	r3, r2, #7
 800226e:	b2db      	uxtb	r3, r3
	RST_PIN(CS_PORT, CS);
 8002270:	4c13      	ldr	r4, [pc, #76]	; (80022c0 <ST7735_TFT_writeChar+0x64>)
	ST7735_TFT_setWindow(x_addr, x_addr+7, y_addr, y_addr+7);
 8002272:	b2c9      	uxtb	r1, r1
 8002274:	f7ff ff10 	bl	8002098 <ST7735_TFT_setWindow>
	send_command(RAMWR);
 8002278:	202c      	movs	r0, #44	; 0x2c
 800227a:	f7ff fe9f 	bl	8001fbc <send_command>
	RST_PIN(CS_PORT, CS);
 800227e:	3d20      	subs	r5, #32
 8002280:	6963      	ldr	r3, [r4, #20]
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <ST7735_TFT_writeChar+0x68>)
 8002284:	4810      	ldr	r0, [pc, #64]	; (80022c8 <ST7735_TFT_writeChar+0x6c>)
 8002286:	b2ed      	uxtb	r5, r5
 8002288:	4013      	ands	r3, r2
 800228a:	00ed      	lsls	r5, r5, #3
 800228c:	6163      	str	r3, [r4, #20]
	for(uint8_t i = 0; i < 8; i++){
 800228e:	182b      	adds	r3, r5, r0
 8002290:	9300      	str	r3, [sp, #0]
void ST7735_TFT_writeChar(char ch, uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 8002292:	2507      	movs	r5, #7
			uint16_t val = arr[(uint8_t)(ch-0x20)][i]>>j;
 8002294:	9b00      	ldr	r3, [sp, #0]
			if((val&1)==1)send_pixelVal(charColor);
 8002296:	2201      	movs	r2, #1
			uint16_t val = arr[(uint8_t)(ch-0x20)][i]>>j;
 8002298:	5d9b      	ldrb	r3, [r3, r6]
			if((val&1)==1)send_pixelVal(charColor);
 800229a:	9801      	ldr	r0, [sp, #4]
			uint16_t val = arr[(uint8_t)(ch-0x20)][i]>>j;
 800229c:	412b      	asrs	r3, r5
			if((val&1)==1)send_pixelVal(charColor);
 800229e:	4213      	tst	r3, r2
 80022a0:	d100      	bne.n	80022a4 <ST7735_TFT_writeChar+0x48>
			else send_pixelVal(backgroundColor);
 80022a2:	0038      	movs	r0, r7
 80022a4:	f7ff fea8 	bl	8001ff8 <send_pixelVal>
		for(int8_t j = 7; j >= 0; j--){
 80022a8:	3d01      	subs	r5, #1
 80022aa:	d2f3      	bcs.n	8002294 <ST7735_TFT_writeChar+0x38>
	for(uint8_t i = 0; i < 8; i++){
 80022ac:	3601      	adds	r6, #1
 80022ae:	2e08      	cmp	r6, #8
 80022b0:	d1ef      	bne.n	8002292 <ST7735_TFT_writeChar+0x36>
	SET_PIN(CS_PORT, CS);
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	6962      	ldr	r2, [r4, #20]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4313      	orrs	r3, r2
 80022ba:	6163      	str	r3, [r4, #20]
}
 80022bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	48000400 	.word	0x48000400
 80022c4:	fffffdff 	.word	0xfffffdff
 80022c8:	08003171 	.word	0x08003171

080022cc <ST7735_TFT_writeString>:
void ST7735_TFT_writeString(char text[], uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ce:	000c      	movs	r4, r1
 80022d0:	0015      	movs	r5, r2
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 80022d2:	2600      	movs	r6, #0
void ST7735_TFT_writeString(char text[], uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 80022d4:	b085      	sub	sp, #20
 80022d6:	001f      	movs	r7, r3
 80022d8:	ab0a      	add	r3, sp, #40	; 0x28
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	9002      	str	r0, [sp, #8]
 80022de:	9303      	str	r3, [sp, #12]
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 80022e0:	9b02      	ldr	r3, [sp, #8]
 80022e2:	5d98      	ldrb	r0, [r3, r6]
 80022e4:	2800      	cmp	r0, #0
 80022e6:	d101      	bne.n	80022ec <ST7735_TFT_writeString+0x20>
}
 80022e8:	b005      	add	sp, #20
 80022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if((x_addr + 8) > (Screen.width)){
 80022ec:	4a09      	ldr	r2, [pc, #36]	; (8002314 <ST7735_TFT_writeString+0x48>)
 80022ee:	1de3      	adds	r3, r4, #7
 80022f0:	7852      	ldrb	r2, [r2, #1]
 80022f2:	4293      	cmp	r3, r2
 80022f4:	db02      	blt.n	80022fc <ST7735_TFT_writeString+0x30>
			x_addr = 0;
 80022f6:	2400      	movs	r4, #0
			y_addr += 9;
 80022f8:	3509      	adds	r5, #9
 80022fa:	b2ed      	uxtb	r5, r5
		ST7735_TFT_writeChar(text[i], x_addr, y_addr, charColor, backgroundColor);
 80022fc:	9b03      	ldr	r3, [sp, #12]
 80022fe:	0021      	movs	r1, r4
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	002a      	movs	r2, r5
 8002304:	003b      	movs	r3, r7
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 8002306:	3601      	adds	r6, #1
 8002308:	3408      	adds	r4, #8
		ST7735_TFT_writeChar(text[i], x_addr, y_addr, charColor, backgroundColor);
 800230a:	f7ff ffa7 	bl	800225c <ST7735_TFT_writeChar>
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 800230e:	b2f6      	uxtb	r6, r6
 8002310:	b2e4      	uxtb	r4, r4
 8002312:	e7e5      	b.n	80022e0 <ST7735_TFT_writeString+0x14>
 8002314:	20000018 	.word	0x20000018

08002318 <write_data>:
#endif
	CSN_HIGH();
	return ret_val;
}

static void write_data(uint8_t addr, uint8_t data[], uint8_t data_size){
 8002318:	b5f0      	push	{r4, r5, r6, r7, lr}
	CSN_LOW();
 800231a:	2580      	movs	r5, #128	; 0x80
#if(USED_MCU_TYPE == MCU_TYPE_STM32)
	HAL_SPI_Transmit(nRF_SPI_ptr, &addr, 1, 1000);
 800231c:	27fa      	movs	r7, #250	; 0xfa
static void write_data(uint8_t addr, uint8_t data[], uint8_t data_size){
 800231e:	b085      	sub	sp, #20
	CSN_LOW();
 8002320:	4c10      	ldr	r4, [pc, #64]	; (8002364 <write_data+0x4c>)
static void write_data(uint8_t addr, uint8_t data[], uint8_t data_size){
 8002322:	ab02      	add	r3, sp, #8
	CSN_LOW();
 8002324:	00ad      	lsls	r5, r5, #2
static void write_data(uint8_t addr, uint8_t data[], uint8_t data_size){
 8002326:	9101      	str	r1, [sp, #4]
 8002328:	9202      	str	r2, [sp, #8]
	CSN_LOW();
 800232a:	0029      	movs	r1, r5
static void write_data(uint8_t addr, uint8_t data[], uint8_t data_size){
 800232c:	71d8      	strb	r0, [r3, #7]
	CSN_LOW();
 800232e:	2200      	movs	r2, #0
 8002330:	0020      	movs	r0, r4
 8002332:	f7fe fecd 	bl	80010d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nRF_SPI_ptr, &addr, 1, 1000);
 8002336:	4e0c      	ldr	r6, [pc, #48]	; (8002368 <write_data+0x50>)
 8002338:	00bf      	lsls	r7, r7, #2
 800233a:	a902      	add	r1, sp, #8
 800233c:	003b      	movs	r3, r7
 800233e:	2201      	movs	r2, #1
 8002340:	6830      	ldr	r0, [r6, #0]
 8002342:	3107      	adds	r1, #7
 8002344:	f7ff fb7c 	bl	8001a40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(nRF_SPI_ptr, data, data_size, 1000);
 8002348:	466b      	mov	r3, sp
 800234a:	9901      	ldr	r1, [sp, #4]
 800234c:	891a      	ldrh	r2, [r3, #8]
 800234e:	6830      	ldr	r0, [r6, #0]
 8002350:	003b      	movs	r3, r7
 8002352:	f7ff fb75 	bl	8001a40 <HAL_SPI_Transmit>
#elif(USED_MCU_TYPE == MCU_TYPE_AVR)
	SPI_transaction(addr);
	for(uint8_t i = 0; i < data_size; i++)
		SPI_transaction(data[i]);
#endif
	CSN_HIGH();
 8002356:	2201      	movs	r2, #1
 8002358:	0029      	movs	r1, r5
 800235a:	0020      	movs	r0, r4
 800235c:	f7fe feb8 	bl	80010d0 <HAL_GPIO_WritePin>
}
 8002360:	b005      	add	sp, #20
 8002362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002364:	48000400 	.word	0x48000400
 8002368:	20000208 	.word	0x20000208

0800236c <flush_tx>:
static void flush_tx(void){
 800236c:	b507      	push	{r0, r1, r2, lr}
	uint8_t dummy_buff=0;
 800236e:	466b      	mov	r3, sp
 8002370:	1dd9      	adds	r1, r3, #7
 8002372:	2300      	movs	r3, #0
	write_data(FLUSH_TX_CMD, &dummy_buff, 1);
 8002374:	2201      	movs	r2, #1
 8002376:	20e1      	movs	r0, #225	; 0xe1
	uint8_t dummy_buff=0;
 8002378:	700b      	strb	r3, [r1, #0]
	write_data(FLUSH_TX_CMD, &dummy_buff, 1);
 800237a:	f7ff ffcd 	bl	8002318 <write_data>
}
 800237e:	bd07      	pop	{r0, r1, r2, pc}

08002380 <flush_rx>:
static void flush_rx(void){
 8002380:	b507      	push	{r0, r1, r2, lr}
	uint8_t dummy_buff=0;
 8002382:	466b      	mov	r3, sp
 8002384:	1dd9      	adds	r1, r3, #7
 8002386:	2300      	movs	r3, #0
	write_data(FLUSH_RX_CMD, &dummy_buff, 1);
 8002388:	2201      	movs	r2, #1
 800238a:	20e2      	movs	r0, #226	; 0xe2
	uint8_t dummy_buff=0;
 800238c:	700b      	strb	r3, [r1, #0]
	write_data(FLUSH_RX_CMD, &dummy_buff, 1);
 800238e:	f7ff ffc3 	bl	8002318 <write_data>
}
 8002392:	bd07      	pop	{r0, r1, r2, pc}

08002394 <write_reg_byte>:
static void write_reg_byte(uint8_t addr, uint8_t data){
 8002394:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t buff[2]={W_REGISTER_CMD(addr),data};
 8002396:	2320      	movs	r3, #32
	CSN_LOW();
 8002398:	2580      	movs	r5, #128	; 0x80
	uint8_t buff[2]={W_REGISTER_CMD(addr),data};
 800239a:	466a      	mov	r2, sp
	CSN_LOW();
 800239c:	4c0b      	ldr	r4, [pc, #44]	; (80023cc <write_reg_byte+0x38>)
	uint8_t buff[2]={W_REGISTER_CMD(addr),data};
 800239e:	4303      	orrs	r3, r0
	CSN_LOW();
 80023a0:	00ad      	lsls	r5, r5, #2
 80023a2:	0020      	movs	r0, r4
	uint8_t buff[2]={W_REGISTER_CMD(addr),data};
 80023a4:	7113      	strb	r3, [r2, #4]
 80023a6:	7151      	strb	r1, [r2, #5]
	CSN_LOW();
 80023a8:	0029      	movs	r1, r5
 80023aa:	2200      	movs	r2, #0
 80023ac:	f7fe fe90 	bl	80010d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(nRF_SPI_ptr, buff, 2, 1000);
 80023b0:	23fa      	movs	r3, #250	; 0xfa
 80023b2:	4807      	ldr	r0, [pc, #28]	; (80023d0 <write_reg_byte+0x3c>)
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	a901      	add	r1, sp, #4
 80023b8:	2202      	movs	r2, #2
 80023ba:	6800      	ldr	r0, [r0, #0]
 80023bc:	f7ff fb40 	bl	8001a40 <HAL_SPI_Transmit>
	CSN_HIGH();
 80023c0:	0029      	movs	r1, r5
 80023c2:	2201      	movs	r2, #1
 80023c4:	0020      	movs	r0, r4
 80023c6:	f7fe fe83 	bl	80010d0 <HAL_GPIO_WritePin>
}
 80023ca:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80023cc:	48000400 	.word	0x48000400
 80023d0:	20000208 	.word	0x20000208

080023d4 <read_reg_byte>:
static uint8_t read_reg_byte(uint8_t addr){
 80023d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	CSN_LOW();
 80023d6:	2580      	movs	r5, #128	; 0x80
static uint8_t read_reg_byte(uint8_t addr){
 80023d8:	b085      	sub	sp, #20
	uint8_t command = R_REGISTER_CMD(addr), dummy_status=0, ret_val = 0;
 80023da:	466b      	mov	r3, sp
 80023dc:	270e      	movs	r7, #14
 80023de:	2200      	movs	r2, #0
	CSN_LOW();
 80023e0:	4c12      	ldr	r4, [pc, #72]	; (800242c <read_reg_byte+0x58>)
 80023e2:	00ad      	lsls	r5, r5, #2
 80023e4:	0029      	movs	r1, r5
	uint8_t command = R_REGISTER_CMD(addr), dummy_status=0, ret_val = 0;
 80023e6:	7358      	strb	r0, [r3, #13]
 80023e8:	446f      	add	r7, sp
	CSN_LOW();
 80023ea:	0020      	movs	r0, r4
	uint8_t command = R_REGISTER_CMD(addr), dummy_status=0, ret_val = 0;
 80023ec:	703a      	strb	r2, [r7, #0]
 80023ee:	73da      	strb	r2, [r3, #15]
	CSN_LOW();
 80023f0:	f7fe fe6e 	bl	80010d0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(nRF_SPI_ptr, &command, &dummy_status, 1, 1000);
 80023f4:	23fa      	movs	r3, #250	; 0xfa
 80023f6:	210d      	movs	r1, #13
 80023f8:	4e0d      	ldr	r6, [pc, #52]	; (8002430 <read_reg_byte+0x5c>)
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	003a      	movs	r2, r7
 8002400:	4469      	add	r1, sp
 8002402:	2301      	movs	r3, #1
 8002404:	6830      	ldr	r0, [r6, #0]
 8002406:	f7ff fbe7 	bl	8001bd8 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(nRF_SPI_ptr, &ret_val, 1, 1000);
 800240a:	23fa      	movs	r3, #250	; 0xfa
 800240c:	210f      	movs	r1, #15
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4469      	add	r1, sp
 8002412:	2201      	movs	r2, #1
 8002414:	6830      	ldr	r0, [r6, #0]
 8002416:	f7ff fced 	bl	8001df4 <HAL_SPI_Receive>
	CSN_HIGH();
 800241a:	0020      	movs	r0, r4
 800241c:	2201      	movs	r2, #1
 800241e:	0029      	movs	r1, r5
 8002420:	f7fe fe56 	bl	80010d0 <HAL_GPIO_WritePin>
	return ret_val;
 8002424:	466b      	mov	r3, sp
 8002426:	7bd8      	ldrb	r0, [r3, #15]
}
 8002428:	b005      	add	sp, #20
 800242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800242c:	48000400 	.word	0x48000400
 8002430:	20000208 	.word	0x20000208

08002434 <nRF24L01_IRQ_allDisable>:
void nRF24L01_IRQ_allDisable(void){
 8002434:	b510      	push	{r4, lr}
	uint8_t val = read_reg_byte(CONFIG_REG_ADDR);
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff ffcc 	bl	80023d4 <read_reg_byte>
	val |= (1 << MASK_RX_DR) | (1 << MASK_TX_DS) | (1 << MASK_MAX_RT);
 800243c:	2170      	movs	r1, #112	; 0x70
 800243e:	4301      	orrs	r1, r0
	write_reg_byte(CONFIG_REG_ADDR, val);
 8002440:	b2c9      	uxtb	r1, r1
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff ffa6 	bl	8002394 <write_reg_byte>
}
 8002448:	bd10      	pop	{r4, pc}

0800244a <nRF24L01_Pipe_allDisable>:
void nRF24L01_Pipe_allDisable(void){
 800244a:	b510      	push	{r4, lr}
	write_reg_byte(EN_AA_REG_ADDR, 0x00);
 800244c:	2100      	movs	r1, #0
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff ffa0 	bl	8002394 <write_reg_byte>
	write_reg_byte(EN_RXADDR_REG_ADDR, 0x00);
 8002454:	2100      	movs	r1, #0
 8002456:	2002      	movs	r0, #2
 8002458:	f7ff ff9c 	bl	8002394 <write_reg_byte>
}
 800245c:	bd10      	pop	{r4, pc}

0800245e <nRF24L01_Pipe_Enable>:
	write_reg_byte(EN_AA_REG_ADDR, (1 << pipe));
 800245e:	2301      	movs	r3, #1
void nRF24L01_Pipe_Enable(pipe_t pipe){
 8002460:	b510      	push	{r4, lr}
	write_reg_byte(EN_AA_REG_ADDR, (1 << pipe));
 8002462:	001c      	movs	r4, r3
 8002464:	4084      	lsls	r4, r0
 8002466:	b2e4      	uxtb	r4, r4
 8002468:	0018      	movs	r0, r3
 800246a:	0021      	movs	r1, r4
 800246c:	f7ff ff92 	bl	8002394 <write_reg_byte>
	write_reg_byte(EN_RXADDR_REG_ADDR, (1 << pipe));
 8002470:	0021      	movs	r1, r4
 8002472:	2002      	movs	r0, #2
 8002474:	f7ff ff8e 	bl	8002394 <write_reg_byte>
}
 8002478:	bd10      	pop	{r4, pc}

0800247a <nRF24L01_setAddrWidth>:
void nRF24L01_setAddrWidth(aw_t aw){
 800247a:	b510      	push	{r4, lr}
 800247c:	0001      	movs	r1, r0
	write_reg_byte(SETUP_AW_REG_ADDR, aw);
 800247e:	2003      	movs	r0, #3
 8002480:	f7ff ff88 	bl	8002394 <write_reg_byte>
}
 8002484:	bd10      	pop	{r4, pc}

08002486 <nRF24L01_setRFChannel>:
void nRF24L01_setRFChannel(uint8_t channel){
 8002486:	b510      	push	{r4, lr}
 8002488:	0001      	movs	r1, r0
	write_reg_byte(RF_CH_REG_ADDR, channel);
 800248a:	2005      	movs	r0, #5
 800248c:	f7ff ff82 	bl	8002394 <write_reg_byte>
}
 8002490:	bd10      	pop	{r4, pc}

08002492 <nRF24L01_setDataRate>:
void nRF24L01_setDataRate(rf_data_rate_t data_rate){
 8002492:	b510      	push	{r4, lr}
 8002494:	0004      	movs	r4, r0
	uint8_t val=read_reg_byte(RF_SETUP_REG_ADDR);
 8002496:	2006      	movs	r0, #6
 8002498:	f7ff ff9c 	bl	80023d4 <read_reg_byte>
	val |= ((((data_rate>>1) & 0x1) << RF_DR_LOW) | ((data_rate & 0x1) << RF_DR_HIGH));
 800249c:	2320      	movs	r3, #32
 800249e:	0121      	lsls	r1, r4, #4
 80024a0:	4019      	ands	r1, r3
 80024a2:	00e4      	lsls	r4, r4, #3
 80024a4:	3b18      	subs	r3, #24
 80024a6:	401c      	ands	r4, r3
	val &= 0x96;
 80024a8:	3361      	adds	r3, #97	; 0x61
 80024aa:	4398      	bics	r0, r3
	val |= ((((data_rate>>1) & 0x1) << RF_DR_LOW) | ((data_rate & 0x1) << RF_DR_HIGH));
 80024ac:	4321      	orrs	r1, r4
 80024ae:	4301      	orrs	r1, r0
	write_reg_byte(RF_SETUP_REG_ADDR, val);
 80024b0:	b2c9      	uxtb	r1, r1
 80024b2:	2006      	movs	r0, #6
 80024b4:	f7ff ff6e 	bl	8002394 <write_reg_byte>
}
 80024b8:	bd10      	pop	{r4, pc}

080024ba <nRF24L01_setRFPower>:
void nRF24L01_setRFPower(rf_pwr_t power){
 80024ba:	b510      	push	{r4, lr}
 80024bc:	0004      	movs	r4, r0
	uint8_t val = read_reg_byte(RF_SETUP_REG_ADDR);
 80024be:	2006      	movs	r0, #6
 80024c0:	f7ff ff88 	bl	80023d4 <read_reg_byte>
	val |= (((power>>1) & 0x1) << 2) | ((power & 0x1) << 1);
 80024c4:	2304      	movs	r3, #4
 80024c6:	0061      	lsls	r1, r4, #1
 80024c8:	4019      	ands	r1, r3
 80024ca:	0064      	lsls	r4, r4, #1
 80024cc:	3b02      	subs	r3, #2
 80024ce:	401c      	ands	r4, r3
	val &= 0x96;
 80024d0:	3367      	adds	r3, #103	; 0x67
 80024d2:	4398      	bics	r0, r3
	val |= (((power>>1) & 0x1) << 2) | ((power & 0x1) << 1);
 80024d4:	4321      	orrs	r1, r4
 80024d6:	4301      	orrs	r1, r0
	write_reg_byte(RF_SETUP_REG_ADDR, val);
 80024d8:	b2c9      	uxtb	r1, r1
 80024da:	2006      	movs	r0, #6
 80024dc:	f7ff ff5a 	bl	8002394 <write_reg_byte>
}
 80024e0:	bd10      	pop	{r4, pc}

080024e2 <nRF24L01_PowerUp>:
void nRF24L01_PowerUp(void){
 80024e2:	b510      	push	{r4, lr}
	uint8_t val = read_reg_byte(CONFIG_REG_ADDR);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7ff ff75 	bl	80023d4 <read_reg_byte>
	val |= (1 << PWR_UP);
 80024ea:	2102      	movs	r1, #2
 80024ec:	4301      	orrs	r1, r0
	write_reg_byte(CONFIG_REG_ADDR, val);
 80024ee:	b2c9      	uxtb	r1, r1
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff ff4f 	bl	8002394 <write_reg_byte>
}
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <nRF24L01_setPipeAddr>:
void nRF24L01_setPipeAddr(pipe_t pipe, uint32_t addr){
 80024f8:	b513      	push	{r0, r1, r4, lr}
 80024fa:	0002      	movs	r2, r0
		write_data(W_REGISTER_CMD((pipe + RX_ADDR_P0_REG_ADDR)), addr_buff, addr_width);
 80024fc:	300a      	adds	r0, #10
 80024fe:	b2c0      	uxtb	r0, r0
			addr_buff[index] = (addr >> shifting)&0xFF;
 8002500:	b2cc      	uxtb	r4, r1
	if(pipe < PIPE_2){
 8002502:	2a01      	cmp	r2, #1
 8002504:	d814      	bhi.n	8002530 <nRF24L01_setPipeAddr+0x38>
		uint8_t addr_buff[5]={0}, addr_width = nRF24L01_DEFAULT_AW + 2;
 8002506:	466a      	mov	r2, sp
 8002508:	2300      	movs	r3, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	7113      	strb	r3, [r2, #4]
			addr_buff[index] = (addr >> shifting)&0xFF;
 800250e:	0a0b      	lsrs	r3, r1, #8
 8002510:	7053      	strb	r3, [r2, #1]
		write_data(W_REGISTER_CMD((pipe + RX_ADDR_P0_REG_ADDR)), addr_buff, addr_width);
 8002512:	2320      	movs	r3, #32
			addr_buff[index] = (addr >> shifting)&0xFF;
 8002514:	0c09      	lsrs	r1, r1, #16
 8002516:	7091      	strb	r1, [r2, #2]
 8002518:	7014      	strb	r4, [r2, #0]
		write_data(W_REGISTER_CMD((pipe + RX_ADDR_P0_REG_ADDR)), addr_buff, addr_width);
 800251a:	4669      	mov	r1, sp
 800251c:	2203      	movs	r2, #3
 800251e:	4318      	orrs	r0, r3
 8002520:	f7ff fefa 	bl	8002318 <write_data>
		write_data(W_REGISTER_CMD(TX_ADDR_REG_ADDR), addr_buff, addr_width);
 8002524:	2203      	movs	r2, #3
 8002526:	4669      	mov	r1, sp
 8002528:	2030      	movs	r0, #48	; 0x30
 800252a:	f7ff fef5 	bl	8002318 <write_data>
}
 800252e:	bd13      	pop	{r0, r1, r4, pc}
	write_reg_byte((pipe + RX_ADDR_P0_REG_ADDR), (uint8_t)addr);
 8002530:	0021      	movs	r1, r4
 8002532:	f7ff ff2f 	bl	8002394 <write_reg_byte>
	write_reg_byte(TX_ADDR_REG_ADDR, (uint8_t)addr);
 8002536:	0021      	movs	r1, r4
 8002538:	2010      	movs	r0, #16
 800253a:	f7ff ff2b 	bl	8002394 <write_reg_byte>
 800253e:	e7f6      	b.n	800252e <nRF24L01_setPipeAddr+0x36>

08002540 <nRF24L01_DynamicPayload_Enable>:
void nRF24L01_DynamicPayload_Enable(pipe_t pipe){
 8002540:	b510      	push	{r4, lr}
	write_reg_byte(FEATURE_REG_ADDR, (1 << EN_DPL));
 8002542:	2104      	movs	r1, #4
void nRF24L01_DynamicPayload_Enable(pipe_t pipe){
 8002544:	0004      	movs	r4, r0
	write_reg_byte(FEATURE_REG_ADDR, (1 << EN_DPL));
 8002546:	201d      	movs	r0, #29
 8002548:	f7ff ff24 	bl	8002394 <write_reg_byte>
	write_reg_byte(DYNPD_REG_ADDR, (1 << pipe));
 800254c:	2101      	movs	r1, #1
 800254e:	40a1      	lsls	r1, r4
 8002550:	201c      	movs	r0, #28
 8002552:	b2c9      	uxtb	r1, r1
 8002554:	f7ff ff1e 	bl	8002394 <write_reg_byte>
}
 8002558:	bd10      	pop	{r4, pc}
	...

0800255c <nRF24L01_init>:
void nRF24L01_init(SPI_HandleTypeDef *spi_ptr, nRF24L01Set_ptr_t nRF24Set_ptr){
 800255c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800255e:	000d      	movs	r5, r1
	CE_LOW();
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	4e56      	ldr	r6, [pc, #344]	; (80026bc <nRF24L01_init+0x160>)
void nRF24L01_init(SPI_HandleTypeDef *spi_ptr, nRF24L01Set_ptr_t nRF24Set_ptr){
 8002564:	0004      	movs	r4, r0
	CE_LOW();
 8002566:	2200      	movs	r2, #0
 8002568:	0030      	movs	r0, r6
 800256a:	0109      	lsls	r1, r1, #4
 800256c:	f7fe fdb0 	bl	80010d0 <HAL_GPIO_WritePin>
	CSN_HIGH();
 8002570:	2180      	movs	r1, #128	; 0x80
	RADIO_IN_PTX_MODE();
 8002572:	2701      	movs	r7, #1
	CSN_HIGH();
 8002574:	2201      	movs	r2, #1
 8002576:	0030      	movs	r0, r6
 8002578:	0089      	lsls	r1, r1, #2
 800257a:	f7fe fda9 	bl	80010d0 <HAL_GPIO_WritePin>
	nRF_SPI_ptr = spi_ptr;
 800257e:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <nRF24L01_init+0x164>)
	write_reg_byte(CONFIG_REG_ADDR, CONFIG_REG_DEFAULT);
 8002580:	2108      	movs	r1, #8
	nRF_SPI_ptr = spi_ptr;
 8002582:	601c      	str	r4, [r3, #0]
	nRF_Set_ptr = nRF24Set_ptr;
 8002584:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <nRF24L01_init+0x168>)
	write_reg_byte(CONFIG_REG_ADDR, CONFIG_REG_DEFAULT);
 8002586:	2000      	movs	r0, #0
	nRF_Set_ptr = nRF24Set_ptr;
 8002588:	601d      	str	r5, [r3, #0]
	RADIO_IN_PTX_MODE();
 800258a:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <nRF24L01_init+0x16c>)
		default_pipe_addr[i] = (RX_ADDR_P0_REG_DEFAULT >> shifting) & 0xFF;
 800258c:	26e7      	movs	r6, #231	; 0xe7
	RADIO_IN_PTX_MODE();
 800258e:	701f      	strb	r7, [r3, #0]
	write_reg_byte(CONFIG_REG_ADDR, CONFIG_REG_DEFAULT);
 8002590:	f7ff ff00 	bl	8002394 <write_reg_byte>
	write_reg_byte(EN_AA_REG_ADDR, EN_AA_REG_DEFAULT);
 8002594:	0038      	movs	r0, r7
 8002596:	213f      	movs	r1, #63	; 0x3f
 8002598:	f7ff fefc 	bl	8002394 <write_reg_byte>
	write_reg_byte(EN_RXADDR_REG_ADDR, EN_RXADDR_REG_DEFAULT);
 800259c:	2103      	movs	r1, #3
 800259e:	2002      	movs	r0, #2
 80025a0:	f7ff fef8 	bl	8002394 <write_reg_byte>
	write_reg_byte(SETUP_AW_REG_ADDR, SETUP_AW_REG_DEFAULT);
 80025a4:	2103      	movs	r1, #3
 80025a6:	0008      	movs	r0, r1
 80025a8:	f7ff fef4 	bl	8002394 <write_reg_byte>
	write_reg_byte(SETUP_RETR_REG_ADDR, SETUP_RETR_REG_DEFAULT);
 80025ac:	2103      	movs	r1, #3
 80025ae:	2004      	movs	r0, #4
 80025b0:	f7ff fef0 	bl	8002394 <write_reg_byte>
	write_reg_byte(RF_CH_REG_ADDR, RF_CH_REG_DEFAULT);
 80025b4:	2102      	movs	r1, #2
 80025b6:	2005      	movs	r0, #5
 80025b8:	f7ff feec 	bl	8002394 <write_reg_byte>
	write_reg_byte(RF_SETUP_REG_ADDR, RF_SETUP_REG_DEFAULT);
 80025bc:	210e      	movs	r1, #14
 80025be:	2006      	movs	r0, #6
 80025c0:	f7ff fee8 	bl	8002394 <write_reg_byte>
		default_pipe_addr[i] = (RX_ADDR_P0_REG_DEFAULT >> shifting) & 0xFF;
 80025c4:	466b      	mov	r3, sp
	write_data(W_REGISTER_CMD(RX_ADDR_P0_REG_ADDR), default_pipe_addr, 5);
 80025c6:	4669      	mov	r1, sp
		default_pipe_addr[i] = (RX_ADDR_P0_REG_DEFAULT >> shifting) & 0xFF;
 80025c8:	701e      	strb	r6, [r3, #0]
 80025ca:	705e      	strb	r6, [r3, #1]
 80025cc:	709e      	strb	r6, [r3, #2]
 80025ce:	70de      	strb	r6, [r3, #3]
 80025d0:	711e      	strb	r6, [r3, #4]
	write_data(W_REGISTER_CMD(RX_ADDR_P0_REG_ADDR), default_pipe_addr, 5);
 80025d2:	2205      	movs	r2, #5
 80025d4:	202a      	movs	r0, #42	; 0x2a
		default_pipe_addr[i] = (RX_ADDR_P1_REG_DEFAULT << shifting) & 0xFF;
 80025d6:	2400      	movs	r4, #0
	write_data(W_REGISTER_CMD(RX_ADDR_P0_REG_ADDR), default_pipe_addr, 5);
 80025d8:	f7ff fe9e 	bl	8002318 <write_data>
		default_pipe_addr[i] = (RX_ADDR_P1_REG_DEFAULT << shifting) & 0xFF;
 80025dc:	23c2      	movs	r3, #194	; 0xc2
 80025de:	466a      	mov	r2, sp
	write_data(W_REGISTER_CMD(RX_ADDR_P1_REG_ADDR), default_pipe_addr, 5);
 80025e0:	4669      	mov	r1, sp
		default_pipe_addr[i] = (RX_ADDR_P1_REG_DEFAULT << shifting) & 0xFF;
 80025e2:	7013      	strb	r3, [r2, #0]
 80025e4:	7054      	strb	r4, [r2, #1]
 80025e6:	7094      	strb	r4, [r2, #2]
 80025e8:	70d4      	strb	r4, [r2, #3]
 80025ea:	7114      	strb	r4, [r2, #4]
	write_data(W_REGISTER_CMD(RX_ADDR_P1_REG_ADDR), default_pipe_addr, 5);
 80025ec:	202b      	movs	r0, #43	; 0x2b
 80025ee:	2205      	movs	r2, #5
 80025f0:	f7ff fe92 	bl	8002318 <write_data>
	write_reg_byte(RX_ADDR_P2_REG_ADDR, RX_ADDR_P2_REG_DEFAULT);
 80025f4:	21c3      	movs	r1, #195	; 0xc3
 80025f6:	200c      	movs	r0, #12
 80025f8:	f7ff fecc 	bl	8002394 <write_reg_byte>
	write_reg_byte(RX_ADDR_P3_REG_ADDR, RX_ADDR_P3_REG_DEFAULT);
 80025fc:	21c4      	movs	r1, #196	; 0xc4
 80025fe:	200d      	movs	r0, #13
 8002600:	f7ff fec8 	bl	8002394 <write_reg_byte>
	write_reg_byte(RX_ADDR_P4_REG_ADDR, RX_ADDR_P4_REG_DEFAULT);
 8002604:	21c5      	movs	r1, #197	; 0xc5
 8002606:	200e      	movs	r0, #14
 8002608:	f7ff fec4 	bl	8002394 <write_reg_byte>
	write_reg_byte(RX_ADDR_P5_REG_ADDR, RX_ADDR_P5_REG_DEFAULT);
 800260c:	21c6      	movs	r1, #198	; 0xc6
 800260e:	200f      	movs	r0, #15
 8002610:	f7ff fec0 	bl	8002394 <write_reg_byte>
		default_pipe_addr[i] = (TX_ADDR_REG_DEFAULT >> shifting) & 0xFF;
 8002614:	466b      	mov	r3, sp
	write_data(W_REGISTER_CMD(TX_ADDR_REG_ADDR), default_pipe_addr, 5);
 8002616:	2205      	movs	r2, #5
		default_pipe_addr[i] = (TX_ADDR_REG_DEFAULT >> shifting) & 0xFF;
 8002618:	701e      	strb	r6, [r3, #0]
 800261a:	705e      	strb	r6, [r3, #1]
 800261c:	709e      	strb	r6, [r3, #2]
 800261e:	70de      	strb	r6, [r3, #3]
 8002620:	711e      	strb	r6, [r3, #4]
	write_data(W_REGISTER_CMD(TX_ADDR_REG_ADDR), default_pipe_addr, 5);
 8002622:	4669      	mov	r1, sp
 8002624:	2030      	movs	r0, #48	; 0x30
 8002626:	f7ff fe77 	bl	8002318 <write_data>
	write_reg_byte(RX_PW_P0_REG_ADDR, RX_PW_P0_REG_DEFAULT);
 800262a:	0021      	movs	r1, r4
 800262c:	2011      	movs	r0, #17
 800262e:	f7ff feb1 	bl	8002394 <write_reg_byte>
	write_reg_byte(RX_PW_P1_REG_ADDR, RX_PW_P1_REG_DEFAULT);
 8002632:	0021      	movs	r1, r4
 8002634:	2012      	movs	r0, #18
 8002636:	f7ff fead 	bl	8002394 <write_reg_byte>
	write_reg_byte(RX_PW_P2_REG_ADDR, RX_PW_P2_REG_DEFAULT);
 800263a:	0021      	movs	r1, r4
 800263c:	2013      	movs	r0, #19
 800263e:	f7ff fea9 	bl	8002394 <write_reg_byte>
	write_reg_byte(RX_PW_P3_REG_ADDR, RX_PW_P3_REG_DEFAULT);
 8002642:	0021      	movs	r1, r4
 8002644:	2014      	movs	r0, #20
 8002646:	f7ff fea5 	bl	8002394 <write_reg_byte>
	write_reg_byte(RX_PW_P4_REG_ADDR, RX_PW_P4_REG_DEFAULT);
 800264a:	0021      	movs	r1, r4
 800264c:	2015      	movs	r0, #21
 800264e:	f7ff fea1 	bl	8002394 <write_reg_byte>
	write_reg_byte(RX_PW_P5_REG_ADDR, RX_PW_P5_REG_DEFAULT);
 8002652:	0021      	movs	r1, r4
 8002654:	2016      	movs	r0, #22
 8002656:	f7ff fe9d 	bl	8002394 <write_reg_byte>
	write_reg_byte(DYNPD_REG_ADDR, DYNPD_REG_DEFAULT);
 800265a:	0021      	movs	r1, r4
 800265c:	201c      	movs	r0, #28
 800265e:	f7ff fe99 	bl	8002394 <write_reg_byte>
	write_reg_byte(FEATURE_REG_ADDR, FEATURE_REG_DEFAULT);
 8002662:	0021      	movs	r1, r4
 8002664:	201d      	movs	r0, #29
 8002666:	f7ff fe95 	bl	8002394 <write_reg_byte>
	flush_tx();
 800266a:	f7ff fe7f 	bl	800236c <flush_tx>
	flush_rx();
 800266e:	f7ff fe87 	bl	8002380 <flush_rx>
	nRF24L01_Pipe_allDisable();
 8002672:	f7ff feea 	bl	800244a <nRF24L01_Pipe_allDisable>
	nRF24L01_IRQ_allDisable();
 8002676:	f7ff fedd 	bl	8002434 <nRF24L01_IRQ_allDisable>
	write_reg_byte(SETUP_RETR_REG_ADDR, val);
 800267a:	213f      	movs	r1, #63	; 0x3f
 800267c:	2004      	movs	r0, #4
 800267e:	f7ff fe89 	bl	8002394 <write_reg_byte>
	nRF24L01_setRFChannel(nRF24Set_ptr->rf_channel);
 8002682:	7868      	ldrb	r0, [r5, #1]
 8002684:	f7ff feff 	bl	8002486 <nRF24L01_setRFChannel>
	nRF24L01_setDataRate(nRF24Set_ptr->rf_data_rate);
 8002688:	7828      	ldrb	r0, [r5, #0]
 800268a:	f7ff ff02 	bl	8002492 <nRF24L01_setDataRate>
	nRF24L01_setRFPower(nRF24Set_ptr->rf_power);
 800268e:	78a8      	ldrb	r0, [r5, #2]
 8002690:	f7ff ff13 	bl	80024ba <nRF24L01_setRFPower>
	nRF24L01_Pipe_Enable(nRF24Set_ptr->pipe);
 8002694:	78e8      	ldrb	r0, [r5, #3]
 8002696:	f7ff fee2 	bl	800245e <nRF24L01_Pipe_Enable>
	nRF24L01_setAddrWidth(nRF24L01_DEFAULT_AW);
 800269a:	0038      	movs	r0, r7
 800269c:	f7ff feed 	bl	800247a <nRF24L01_setAddrWidth>
	nRF24L01_setPipeAddr(nRF24Set_ptr->pipe, nRF24Set_ptr->pipe_addr);
 80026a0:	68a9      	ldr	r1, [r5, #8]
 80026a2:	78e8      	ldrb	r0, [r5, #3]
 80026a4:	f7ff ff28 	bl	80024f8 <nRF24L01_setPipeAddr>
	nRF24L01_DynamicPayload_Enable(nRF24Set_ptr->pipe);
 80026a8:	78e8      	ldrb	r0, [r5, #3]
 80026aa:	f7ff ff49 	bl	8002540 <nRF24L01_DynamicPayload_Enable>
	nRF24L01_PowerUp();
 80026ae:	f7ff ff18 	bl	80024e2 <nRF24L01_PowerUp>
	write_reg_byte(STATUS_REG_ADDR, status);
 80026b2:	2170      	movs	r1, #112	; 0x70
 80026b4:	2007      	movs	r0, #7
 80026b6:	f7ff fe6d 	bl	8002394 <write_reg_byte>
}
 80026ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80026bc:	48000400 	.word	0x48000400
 80026c0:	20000208 	.word	0x20000208
 80026c4:	2000020c 	.word	0x2000020c
 80026c8:	20000210 	.word	0x20000210

080026cc <nRF24L01_setPRIMx>:
void nRF24L01_setPRIMx(prim_rx_t primx){
 80026cc:	b510      	push	{r4, lr}
 80026ce:	0004      	movs	r4, r0
	uint8_t temp = read_reg_byte(CONFIG_REG_ADDR);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7ff fe7f 	bl	80023d4 <read_reg_byte>
	temp &= 0xFE;
 80026d6:	21fe      	movs	r1, #254	; 0xfe
 80026d8:	4001      	ands	r1, r0
	write_reg_byte(CONFIG_REG_ADDR, temp);
 80026da:	4321      	orrs	r1, r4
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff fe59 	bl	8002394 <write_reg_byte>
}
 80026e2:	bd10      	pop	{r4, pc}

080026e4 <nRF24L01_Transmit>:
nRF24L01_STATUS_t nRF24L01_Transmit(uint8_t data[], uint8_t data_size){
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	000d      	movs	r5, r1
	CE_LOW();
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	2200      	movs	r2, #0
 80026ec:	0109      	lsls	r1, r1, #4
nRF24L01_STATUS_t nRF24L01_Transmit(uint8_t data[], uint8_t data_size){
 80026ee:	0004      	movs	r4, r0
	CE_LOW();
 80026f0:	481a      	ldr	r0, [pc, #104]	; (800275c <nRF24L01_Transmit+0x78>)
 80026f2:	f7fe fced 	bl	80010d0 <HAL_GPIO_WritePin>
	flush_rx();
 80026f6:	f7ff fe43 	bl	8002380 <flush_rx>
	flush_tx();
 80026fa:	f7ff fe37 	bl	800236c <flush_tx>
	if(RADIO_MODE_CONTROL() != RADIO_IS_IN_PTX){
 80026fe:	4b18      	ldr	r3, [pc, #96]	; (8002760 <nRF24L01_Transmit+0x7c>)
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	2a01      	cmp	r2, #1
 8002704:	d004      	beq.n	8002710 <nRF24L01_Transmit+0x2c>
		RADIO_IN_PTX_MODE();
 8002706:	2201      	movs	r2, #1
		nRF24L01_setPRIMx(PRIM_PTX);
 8002708:	2000      	movs	r0, #0
		RADIO_IN_PTX_MODE();
 800270a:	701a      	strb	r2, [r3, #0]
		nRF24L01_setPRIMx(PRIM_PTX);
 800270c:	f7ff ffde 	bl	80026cc <nRF24L01_setPRIMx>
	write_data(W_TX_PAYLOAD_CMD, data, data_size);
 8002710:	0021      	movs	r1, r4
 8002712:	002a      	movs	r2, r5
 8002714:	20a0      	movs	r0, #160	; 0xa0
 8002716:	f7ff fdff 	bl	8002318 <write_data>
	CE_PULSE();
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	2201      	movs	r2, #1
 800271e:	0109      	lsls	r1, r1, #4
 8002720:	480e      	ldr	r0, [pc, #56]	; (800275c <nRF24L01_Transmit+0x78>)
 8002722:	f7fe fcd5 	bl	80010d0 <HAL_GPIO_WritePin>
 8002726:	2001      	movs	r0, #1
 8002728:	f7fe f8dc 	bl	80008e4 <HAL_Delay>
 800272c:	2180      	movs	r1, #128	; 0x80
 800272e:	2200      	movs	r2, #0
 8002730:	480a      	ldr	r0, [pc, #40]	; (800275c <nRF24L01_Transmit+0x78>)
 8002732:	0109      	lsls	r1, r1, #4
 8002734:	f7fe fccc 	bl	80010d0 <HAL_GPIO_WritePin>
	return read_reg_byte(STATUS_REG_ADDR);
 8002738:	2007      	movs	r0, #7
 800273a:	f7ff fe4b 	bl	80023d4 <read_reg_byte>
		status = TX_STATUS_FLAGS_CONTROL();
 800273e:	2420      	movs	r4, #32
 8002740:	4220      	tst	r0, r4
 8002742:	d100      	bne.n	8002746 <nRF24L01_Transmit+0x62>
 8002744:	3c10      	subs	r4, #16
	flush_tx();
 8002746:	f7ff fe11 	bl	800236c <flush_tx>
	flush_rx();
 800274a:	f7ff fe19 	bl	8002380 <flush_rx>
	write_reg_byte(STATUS_REG_ADDR, status);
 800274e:	2170      	movs	r1, #112	; 0x70
 8002750:	2007      	movs	r0, #7
 8002752:	f7ff fe1f 	bl	8002394 <write_reg_byte>
}
 8002756:	0020      	movs	r0, r4
 8002758:	bd70      	pop	{r4, r5, r6, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	48000400 	.word	0x48000400
 8002760:	20000210 	.word	0x20000210

08002764 <nRF24L01_listen>:
void nRF24L01_listen(void){
 8002764:	b510      	push	{r4, lr}
	if(RADIO_MODE_CONTROL() != RADIO_IS_IN_PRX){
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <nRF24L01_listen+0x24>)
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	2a00      	cmp	r2, #0
 800276c:	d00a      	beq.n	8002784 <nRF24L01_listen+0x20>
		RADIO_IN_PRX_MODE();
 800276e:	2200      	movs	r2, #0
		nRF24L01_setPRIMx(PRIM_PRX);
 8002770:	2001      	movs	r0, #1
		RADIO_IN_PRX_MODE();
 8002772:	701a      	strb	r2, [r3, #0]
		nRF24L01_setPRIMx(PRIM_PRX);
 8002774:	f7ff ffaa 	bl	80026cc <nRF24L01_setPRIMx>
		CE_HIGH();
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	2201      	movs	r2, #1
 800277c:	4803      	ldr	r0, [pc, #12]	; (800278c <nRF24L01_listen+0x28>)
 800277e:	0109      	lsls	r1, r1, #4
 8002780:	f7fe fca6 	bl	80010d0 <HAL_GPIO_WritePin>
}
 8002784:	bd10      	pop	{r4, pc}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	20000210 	.word	0x20000210
 800278c:	48000400 	.word	0x48000400

08002790 <__errno>:
 8002790:	4b01      	ldr	r3, [pc, #4]	; (8002798 <__errno+0x8>)
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	4770      	bx	lr
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	20000024 	.word	0x20000024

0800279c <__libc_init_array>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	2600      	movs	r6, #0
 80027a0:	4d0c      	ldr	r5, [pc, #48]	; (80027d4 <__libc_init_array+0x38>)
 80027a2:	4c0d      	ldr	r4, [pc, #52]	; (80027d8 <__libc_init_array+0x3c>)
 80027a4:	1b64      	subs	r4, r4, r5
 80027a6:	10a4      	asrs	r4, r4, #2
 80027a8:	42a6      	cmp	r6, r4
 80027aa:	d109      	bne.n	80027c0 <__libc_init_array+0x24>
 80027ac:	2600      	movs	r6, #0
 80027ae:	f000 fc8b 	bl	80030c8 <_init>
 80027b2:	4d0a      	ldr	r5, [pc, #40]	; (80027dc <__libc_init_array+0x40>)
 80027b4:	4c0a      	ldr	r4, [pc, #40]	; (80027e0 <__libc_init_array+0x44>)
 80027b6:	1b64      	subs	r4, r4, r5
 80027b8:	10a4      	asrs	r4, r4, #2
 80027ba:	42a6      	cmp	r6, r4
 80027bc:	d105      	bne.n	80027ca <__libc_init_array+0x2e>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	00b3      	lsls	r3, r6, #2
 80027c2:	58eb      	ldr	r3, [r5, r3]
 80027c4:	4798      	blx	r3
 80027c6:	3601      	adds	r6, #1
 80027c8:	e7ee      	b.n	80027a8 <__libc_init_array+0xc>
 80027ca:	00b3      	lsls	r3, r6, #2
 80027cc:	58eb      	ldr	r3, [r5, r3]
 80027ce:	4798      	blx	r3
 80027d0:	3601      	adds	r6, #1
 80027d2:	e7f2      	b.n	80027ba <__libc_init_array+0x1e>
 80027d4:	080034a4 	.word	0x080034a4
 80027d8:	080034a4 	.word	0x080034a4
 80027dc:	080034a4 	.word	0x080034a4
 80027e0:	080034a8 	.word	0x080034a8

080027e4 <memset>:
 80027e4:	0003      	movs	r3, r0
 80027e6:	1882      	adds	r2, r0, r2
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d100      	bne.n	80027ee <memset+0xa>
 80027ec:	4770      	bx	lr
 80027ee:	7019      	strb	r1, [r3, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	e7f9      	b.n	80027e8 <memset+0x4>

080027f4 <siprintf>:
 80027f4:	b40e      	push	{r1, r2, r3}
 80027f6:	b500      	push	{lr}
 80027f8:	490b      	ldr	r1, [pc, #44]	; (8002828 <siprintf+0x34>)
 80027fa:	b09c      	sub	sp, #112	; 0x70
 80027fc:	ab1d      	add	r3, sp, #116	; 0x74
 80027fe:	9002      	str	r0, [sp, #8]
 8002800:	9006      	str	r0, [sp, #24]
 8002802:	9107      	str	r1, [sp, #28]
 8002804:	9104      	str	r1, [sp, #16]
 8002806:	4809      	ldr	r0, [pc, #36]	; (800282c <siprintf+0x38>)
 8002808:	4909      	ldr	r1, [pc, #36]	; (8002830 <siprintf+0x3c>)
 800280a:	cb04      	ldmia	r3!, {r2}
 800280c:	9105      	str	r1, [sp, #20]
 800280e:	6800      	ldr	r0, [r0, #0]
 8002810:	a902      	add	r1, sp, #8
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	f000 f870 	bl	80028f8 <_svfiprintf_r>
 8002818:	2300      	movs	r3, #0
 800281a:	9a02      	ldr	r2, [sp, #8]
 800281c:	7013      	strb	r3, [r2, #0]
 800281e:	b01c      	add	sp, #112	; 0x70
 8002820:	bc08      	pop	{r3}
 8002822:	b003      	add	sp, #12
 8002824:	4718      	bx	r3
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	7fffffff 	.word	0x7fffffff
 800282c:	20000024 	.word	0x20000024
 8002830:	ffff0208 	.word	0xffff0208

08002834 <__ssputs_r>:
 8002834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002836:	688e      	ldr	r6, [r1, #8]
 8002838:	b085      	sub	sp, #20
 800283a:	0007      	movs	r7, r0
 800283c:	000c      	movs	r4, r1
 800283e:	9203      	str	r2, [sp, #12]
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	429e      	cmp	r6, r3
 8002844:	d83c      	bhi.n	80028c0 <__ssputs_r+0x8c>
 8002846:	2390      	movs	r3, #144	; 0x90
 8002848:	898a      	ldrh	r2, [r1, #12]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	421a      	tst	r2, r3
 800284e:	d034      	beq.n	80028ba <__ssputs_r+0x86>
 8002850:	6909      	ldr	r1, [r1, #16]
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	6960      	ldr	r0, [r4, #20]
 8002856:	1a5b      	subs	r3, r3, r1
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	2303      	movs	r3, #3
 800285c:	4343      	muls	r3, r0
 800285e:	0fdd      	lsrs	r5, r3, #31
 8002860:	18ed      	adds	r5, r5, r3
 8002862:	9b01      	ldr	r3, [sp, #4]
 8002864:	9802      	ldr	r0, [sp, #8]
 8002866:	3301      	adds	r3, #1
 8002868:	181b      	adds	r3, r3, r0
 800286a:	106d      	asrs	r5, r5, #1
 800286c:	42ab      	cmp	r3, r5
 800286e:	d900      	bls.n	8002872 <__ssputs_r+0x3e>
 8002870:	001d      	movs	r5, r3
 8002872:	0553      	lsls	r3, r2, #21
 8002874:	d532      	bpl.n	80028dc <__ssputs_r+0xa8>
 8002876:	0029      	movs	r1, r5
 8002878:	0038      	movs	r0, r7
 800287a:	f000 fb53 	bl	8002f24 <_malloc_r>
 800287e:	1e06      	subs	r6, r0, #0
 8002880:	d109      	bne.n	8002896 <__ssputs_r+0x62>
 8002882:	230c      	movs	r3, #12
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	2001      	movs	r0, #1
 800288a:	89a2      	ldrh	r2, [r4, #12]
 800288c:	4240      	negs	r0, r0
 800288e:	4313      	orrs	r3, r2
 8002890:	81a3      	strh	r3, [r4, #12]
 8002892:	b005      	add	sp, #20
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002896:	9a02      	ldr	r2, [sp, #8]
 8002898:	6921      	ldr	r1, [r4, #16]
 800289a:	f000 faba 	bl	8002e12 <memcpy>
 800289e:	89a3      	ldrh	r3, [r4, #12]
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <__ssputs_r+0xc0>)
 80028a2:	401a      	ands	r2, r3
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	4313      	orrs	r3, r2
 80028a8:	81a3      	strh	r3, [r4, #12]
 80028aa:	9b02      	ldr	r3, [sp, #8]
 80028ac:	6126      	str	r6, [r4, #16]
 80028ae:	18f6      	adds	r6, r6, r3
 80028b0:	6026      	str	r6, [r4, #0]
 80028b2:	6165      	str	r5, [r4, #20]
 80028b4:	9e01      	ldr	r6, [sp, #4]
 80028b6:	1aed      	subs	r5, r5, r3
 80028b8:	60a5      	str	r5, [r4, #8]
 80028ba:	9b01      	ldr	r3, [sp, #4]
 80028bc:	429e      	cmp	r6, r3
 80028be:	d900      	bls.n	80028c2 <__ssputs_r+0x8e>
 80028c0:	9e01      	ldr	r6, [sp, #4]
 80028c2:	0032      	movs	r2, r6
 80028c4:	9903      	ldr	r1, [sp, #12]
 80028c6:	6820      	ldr	r0, [r4, #0]
 80028c8:	f000 faac 	bl	8002e24 <memmove>
 80028cc:	68a3      	ldr	r3, [r4, #8]
 80028ce:	2000      	movs	r0, #0
 80028d0:	1b9b      	subs	r3, r3, r6
 80028d2:	60a3      	str	r3, [r4, #8]
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	199e      	adds	r6, r3, r6
 80028d8:	6026      	str	r6, [r4, #0]
 80028da:	e7da      	b.n	8002892 <__ssputs_r+0x5e>
 80028dc:	002a      	movs	r2, r5
 80028de:	0038      	movs	r0, r7
 80028e0:	f000 fb96 	bl	8003010 <_realloc_r>
 80028e4:	1e06      	subs	r6, r0, #0
 80028e6:	d1e0      	bne.n	80028aa <__ssputs_r+0x76>
 80028e8:	0038      	movs	r0, r7
 80028ea:	6921      	ldr	r1, [r4, #16]
 80028ec:	f000 faae 	bl	8002e4c <_free_r>
 80028f0:	e7c7      	b.n	8002882 <__ssputs_r+0x4e>
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	fffffb7f 	.word	0xfffffb7f

080028f8 <_svfiprintf_r>:
 80028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fa:	b0a1      	sub	sp, #132	; 0x84
 80028fc:	9003      	str	r0, [sp, #12]
 80028fe:	001d      	movs	r5, r3
 8002900:	898b      	ldrh	r3, [r1, #12]
 8002902:	000f      	movs	r7, r1
 8002904:	0016      	movs	r6, r2
 8002906:	061b      	lsls	r3, r3, #24
 8002908:	d511      	bpl.n	800292e <_svfiprintf_r+0x36>
 800290a:	690b      	ldr	r3, [r1, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10e      	bne.n	800292e <_svfiprintf_r+0x36>
 8002910:	2140      	movs	r1, #64	; 0x40
 8002912:	f000 fb07 	bl	8002f24 <_malloc_r>
 8002916:	6038      	str	r0, [r7, #0]
 8002918:	6138      	str	r0, [r7, #16]
 800291a:	2800      	cmp	r0, #0
 800291c:	d105      	bne.n	800292a <_svfiprintf_r+0x32>
 800291e:	230c      	movs	r3, #12
 8002920:	9a03      	ldr	r2, [sp, #12]
 8002922:	3801      	subs	r0, #1
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	b021      	add	sp, #132	; 0x84
 8002928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800292a:	2340      	movs	r3, #64	; 0x40
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	2300      	movs	r3, #0
 8002930:	ac08      	add	r4, sp, #32
 8002932:	6163      	str	r3, [r4, #20]
 8002934:	3320      	adds	r3, #32
 8002936:	7663      	strb	r3, [r4, #25]
 8002938:	3310      	adds	r3, #16
 800293a:	76a3      	strb	r3, [r4, #26]
 800293c:	9507      	str	r5, [sp, #28]
 800293e:	0035      	movs	r5, r6
 8002940:	782b      	ldrb	r3, [r5, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <_svfiprintf_r+0x52>
 8002946:	2b25      	cmp	r3, #37	; 0x25
 8002948:	d147      	bne.n	80029da <_svfiprintf_r+0xe2>
 800294a:	1bab      	subs	r3, r5, r6
 800294c:	9305      	str	r3, [sp, #20]
 800294e:	42b5      	cmp	r5, r6
 8002950:	d00c      	beq.n	800296c <_svfiprintf_r+0x74>
 8002952:	0032      	movs	r2, r6
 8002954:	0039      	movs	r1, r7
 8002956:	9803      	ldr	r0, [sp, #12]
 8002958:	f7ff ff6c 	bl	8002834 <__ssputs_r>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	d100      	bne.n	8002962 <_svfiprintf_r+0x6a>
 8002960:	e0ae      	b.n	8002ac0 <_svfiprintf_r+0x1c8>
 8002962:	6962      	ldr	r2, [r4, #20]
 8002964:	9b05      	ldr	r3, [sp, #20]
 8002966:	4694      	mov	ip, r2
 8002968:	4463      	add	r3, ip
 800296a:	6163      	str	r3, [r4, #20]
 800296c:	782b      	ldrb	r3, [r5, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d100      	bne.n	8002974 <_svfiprintf_r+0x7c>
 8002972:	e0a5      	b.n	8002ac0 <_svfiprintf_r+0x1c8>
 8002974:	2201      	movs	r2, #1
 8002976:	2300      	movs	r3, #0
 8002978:	4252      	negs	r2, r2
 800297a:	6062      	str	r2, [r4, #4]
 800297c:	a904      	add	r1, sp, #16
 800297e:	3254      	adds	r2, #84	; 0x54
 8002980:	1852      	adds	r2, r2, r1
 8002982:	1c6e      	adds	r6, r5, #1
 8002984:	6023      	str	r3, [r4, #0]
 8002986:	60e3      	str	r3, [r4, #12]
 8002988:	60a3      	str	r3, [r4, #8]
 800298a:	7013      	strb	r3, [r2, #0]
 800298c:	65a3      	str	r3, [r4, #88]	; 0x58
 800298e:	2205      	movs	r2, #5
 8002990:	7831      	ldrb	r1, [r6, #0]
 8002992:	4854      	ldr	r0, [pc, #336]	; (8002ae4 <_svfiprintf_r+0x1ec>)
 8002994:	f000 fa32 	bl	8002dfc <memchr>
 8002998:	1c75      	adds	r5, r6, #1
 800299a:	2800      	cmp	r0, #0
 800299c:	d11f      	bne.n	80029de <_svfiprintf_r+0xe6>
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	06d3      	lsls	r3, r2, #27
 80029a2:	d504      	bpl.n	80029ae <_svfiprintf_r+0xb6>
 80029a4:	2353      	movs	r3, #83	; 0x53
 80029a6:	a904      	add	r1, sp, #16
 80029a8:	185b      	adds	r3, r3, r1
 80029aa:	2120      	movs	r1, #32
 80029ac:	7019      	strb	r1, [r3, #0]
 80029ae:	0713      	lsls	r3, r2, #28
 80029b0:	d504      	bpl.n	80029bc <_svfiprintf_r+0xc4>
 80029b2:	2353      	movs	r3, #83	; 0x53
 80029b4:	a904      	add	r1, sp, #16
 80029b6:	185b      	adds	r3, r3, r1
 80029b8:	212b      	movs	r1, #43	; 0x2b
 80029ba:	7019      	strb	r1, [r3, #0]
 80029bc:	7833      	ldrb	r3, [r6, #0]
 80029be:	2b2a      	cmp	r3, #42	; 0x2a
 80029c0:	d016      	beq.n	80029f0 <_svfiprintf_r+0xf8>
 80029c2:	0035      	movs	r5, r6
 80029c4:	2100      	movs	r1, #0
 80029c6:	200a      	movs	r0, #10
 80029c8:	68e3      	ldr	r3, [r4, #12]
 80029ca:	782a      	ldrb	r2, [r5, #0]
 80029cc:	1c6e      	adds	r6, r5, #1
 80029ce:	3a30      	subs	r2, #48	; 0x30
 80029d0:	2a09      	cmp	r2, #9
 80029d2:	d94e      	bls.n	8002a72 <_svfiprintf_r+0x17a>
 80029d4:	2900      	cmp	r1, #0
 80029d6:	d111      	bne.n	80029fc <_svfiprintf_r+0x104>
 80029d8:	e017      	b.n	8002a0a <_svfiprintf_r+0x112>
 80029da:	3501      	adds	r5, #1
 80029dc:	e7b0      	b.n	8002940 <_svfiprintf_r+0x48>
 80029de:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <_svfiprintf_r+0x1ec>)
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	1ac0      	subs	r0, r0, r3
 80029e4:	2301      	movs	r3, #1
 80029e6:	4083      	lsls	r3, r0
 80029e8:	4313      	orrs	r3, r2
 80029ea:	002e      	movs	r6, r5
 80029ec:	6023      	str	r3, [r4, #0]
 80029ee:	e7ce      	b.n	800298e <_svfiprintf_r+0x96>
 80029f0:	9b07      	ldr	r3, [sp, #28]
 80029f2:	1d19      	adds	r1, r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	9107      	str	r1, [sp, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db01      	blt.n	8002a00 <_svfiprintf_r+0x108>
 80029fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80029fe:	e004      	b.n	8002a0a <_svfiprintf_r+0x112>
 8002a00:	425b      	negs	r3, r3
 8002a02:	60e3      	str	r3, [r4, #12]
 8002a04:	2302      	movs	r3, #2
 8002a06:	4313      	orrs	r3, r2
 8002a08:	6023      	str	r3, [r4, #0]
 8002a0a:	782b      	ldrb	r3, [r5, #0]
 8002a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a0e:	d10a      	bne.n	8002a26 <_svfiprintf_r+0x12e>
 8002a10:	786b      	ldrb	r3, [r5, #1]
 8002a12:	2b2a      	cmp	r3, #42	; 0x2a
 8002a14:	d135      	bne.n	8002a82 <_svfiprintf_r+0x18a>
 8002a16:	9b07      	ldr	r3, [sp, #28]
 8002a18:	3502      	adds	r5, #2
 8002a1a:	1d1a      	adds	r2, r3, #4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	9207      	str	r2, [sp, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db2b      	blt.n	8002a7c <_svfiprintf_r+0x184>
 8002a24:	9309      	str	r3, [sp, #36]	; 0x24
 8002a26:	4e30      	ldr	r6, [pc, #192]	; (8002ae8 <_svfiprintf_r+0x1f0>)
 8002a28:	2203      	movs	r2, #3
 8002a2a:	0030      	movs	r0, r6
 8002a2c:	7829      	ldrb	r1, [r5, #0]
 8002a2e:	f000 f9e5 	bl	8002dfc <memchr>
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d006      	beq.n	8002a44 <_svfiprintf_r+0x14c>
 8002a36:	2340      	movs	r3, #64	; 0x40
 8002a38:	1b80      	subs	r0, r0, r6
 8002a3a:	4083      	lsls	r3, r0
 8002a3c:	6822      	ldr	r2, [r4, #0]
 8002a3e:	3501      	adds	r5, #1
 8002a40:	4313      	orrs	r3, r2
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	7829      	ldrb	r1, [r5, #0]
 8002a46:	2206      	movs	r2, #6
 8002a48:	4828      	ldr	r0, [pc, #160]	; (8002aec <_svfiprintf_r+0x1f4>)
 8002a4a:	1c6e      	adds	r6, r5, #1
 8002a4c:	7621      	strb	r1, [r4, #24]
 8002a4e:	f000 f9d5 	bl	8002dfc <memchr>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d03c      	beq.n	8002ad0 <_svfiprintf_r+0x1d8>
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <_svfiprintf_r+0x1f8>)
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d125      	bne.n	8002aa8 <_svfiprintf_r+0x1b0>
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	9b07      	ldr	r3, [sp, #28]
 8002a60:	3307      	adds	r3, #7
 8002a62:	4393      	bics	r3, r2
 8002a64:	3308      	adds	r3, #8
 8002a66:	9307      	str	r3, [sp, #28]
 8002a68:	6963      	ldr	r3, [r4, #20]
 8002a6a:	9a04      	ldr	r2, [sp, #16]
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	6163      	str	r3, [r4, #20]
 8002a70:	e765      	b.n	800293e <_svfiprintf_r+0x46>
 8002a72:	4343      	muls	r3, r0
 8002a74:	0035      	movs	r5, r6
 8002a76:	2101      	movs	r1, #1
 8002a78:	189b      	adds	r3, r3, r2
 8002a7a:	e7a6      	b.n	80029ca <_svfiprintf_r+0xd2>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	425b      	negs	r3, r3
 8002a80:	e7d0      	b.n	8002a24 <_svfiprintf_r+0x12c>
 8002a82:	2300      	movs	r3, #0
 8002a84:	200a      	movs	r0, #10
 8002a86:	001a      	movs	r2, r3
 8002a88:	3501      	adds	r5, #1
 8002a8a:	6063      	str	r3, [r4, #4]
 8002a8c:	7829      	ldrb	r1, [r5, #0]
 8002a8e:	1c6e      	adds	r6, r5, #1
 8002a90:	3930      	subs	r1, #48	; 0x30
 8002a92:	2909      	cmp	r1, #9
 8002a94:	d903      	bls.n	8002a9e <_svfiprintf_r+0x1a6>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0c5      	beq.n	8002a26 <_svfiprintf_r+0x12e>
 8002a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8002a9c:	e7c3      	b.n	8002a26 <_svfiprintf_r+0x12e>
 8002a9e:	4342      	muls	r2, r0
 8002aa0:	0035      	movs	r5, r6
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	1852      	adds	r2, r2, r1
 8002aa6:	e7f1      	b.n	8002a8c <_svfiprintf_r+0x194>
 8002aa8:	ab07      	add	r3, sp, #28
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	003a      	movs	r2, r7
 8002aae:	0021      	movs	r1, r4
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <_svfiprintf_r+0x1fc>)
 8002ab2:	9803      	ldr	r0, [sp, #12]
 8002ab4:	e000      	b.n	8002ab8 <_svfiprintf_r+0x1c0>
 8002ab6:	bf00      	nop
 8002ab8:	9004      	str	r0, [sp, #16]
 8002aba:	9b04      	ldr	r3, [sp, #16]
 8002abc:	3301      	adds	r3, #1
 8002abe:	d1d3      	bne.n	8002a68 <_svfiprintf_r+0x170>
 8002ac0:	89bb      	ldrh	r3, [r7, #12]
 8002ac2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ac4:	065b      	lsls	r3, r3, #25
 8002ac6:	d400      	bmi.n	8002aca <_svfiprintf_r+0x1d2>
 8002ac8:	e72d      	b.n	8002926 <_svfiprintf_r+0x2e>
 8002aca:	2001      	movs	r0, #1
 8002acc:	4240      	negs	r0, r0
 8002ace:	e72a      	b.n	8002926 <_svfiprintf_r+0x2e>
 8002ad0:	ab07      	add	r3, sp, #28
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	003a      	movs	r2, r7
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <_svfiprintf_r+0x1fc>)
 8002ada:	9803      	ldr	r0, [sp, #12]
 8002adc:	f000 f87c 	bl	8002bd8 <_printf_i>
 8002ae0:	e7ea      	b.n	8002ab8 <_svfiprintf_r+0x1c0>
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	08003471 	.word	0x08003471
 8002ae8:	08003477 	.word	0x08003477
 8002aec:	0800347b 	.word	0x0800347b
 8002af0:	00000000 	.word	0x00000000
 8002af4:	08002835 	.word	0x08002835

08002af8 <_printf_common>:
 8002af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002afa:	0015      	movs	r5, r2
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	688a      	ldr	r2, [r1, #8]
 8002b00:	690b      	ldr	r3, [r1, #16]
 8002b02:	000c      	movs	r4, r1
 8002b04:	9000      	str	r0, [sp, #0]
 8002b06:	4293      	cmp	r3, r2
 8002b08:	da00      	bge.n	8002b0c <_printf_common+0x14>
 8002b0a:	0013      	movs	r3, r2
 8002b0c:	0022      	movs	r2, r4
 8002b0e:	602b      	str	r3, [r5, #0]
 8002b10:	3243      	adds	r2, #67	; 0x43
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	2a00      	cmp	r2, #0
 8002b16:	d001      	beq.n	8002b1c <_printf_common+0x24>
 8002b18:	3301      	adds	r3, #1
 8002b1a:	602b      	str	r3, [r5, #0]
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	069b      	lsls	r3, r3, #26
 8002b20:	d502      	bpl.n	8002b28 <_printf_common+0x30>
 8002b22:	682b      	ldr	r3, [r5, #0]
 8002b24:	3302      	adds	r3, #2
 8002b26:	602b      	str	r3, [r5, #0]
 8002b28:	6822      	ldr	r2, [r4, #0]
 8002b2a:	2306      	movs	r3, #6
 8002b2c:	0017      	movs	r7, r2
 8002b2e:	401f      	ands	r7, r3
 8002b30:	421a      	tst	r2, r3
 8002b32:	d027      	beq.n	8002b84 <_printf_common+0x8c>
 8002b34:	0023      	movs	r3, r4
 8002b36:	3343      	adds	r3, #67	; 0x43
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	4193      	sbcs	r3, r2
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	0692      	lsls	r2, r2, #26
 8002b42:	d430      	bmi.n	8002ba6 <_printf_common+0xae>
 8002b44:	0022      	movs	r2, r4
 8002b46:	9901      	ldr	r1, [sp, #4]
 8002b48:	9800      	ldr	r0, [sp, #0]
 8002b4a:	9e08      	ldr	r6, [sp, #32]
 8002b4c:	3243      	adds	r2, #67	; 0x43
 8002b4e:	47b0      	blx	r6
 8002b50:	1c43      	adds	r3, r0, #1
 8002b52:	d025      	beq.n	8002ba0 <_printf_common+0xa8>
 8002b54:	2306      	movs	r3, #6
 8002b56:	6820      	ldr	r0, [r4, #0]
 8002b58:	682a      	ldr	r2, [r5, #0]
 8002b5a:	68e1      	ldr	r1, [r4, #12]
 8002b5c:	2500      	movs	r5, #0
 8002b5e:	4003      	ands	r3, r0
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d103      	bne.n	8002b6c <_printf_common+0x74>
 8002b64:	1a8d      	subs	r5, r1, r2
 8002b66:	43eb      	mvns	r3, r5
 8002b68:	17db      	asrs	r3, r3, #31
 8002b6a:	401d      	ands	r5, r3
 8002b6c:	68a3      	ldr	r3, [r4, #8]
 8002b6e:	6922      	ldr	r2, [r4, #16]
 8002b70:	4293      	cmp	r3, r2
 8002b72:	dd01      	ble.n	8002b78 <_printf_common+0x80>
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	18ed      	adds	r5, r5, r3
 8002b78:	2700      	movs	r7, #0
 8002b7a:	42bd      	cmp	r5, r7
 8002b7c:	d120      	bne.n	8002bc0 <_printf_common+0xc8>
 8002b7e:	2000      	movs	r0, #0
 8002b80:	e010      	b.n	8002ba4 <_printf_common+0xac>
 8002b82:	3701      	adds	r7, #1
 8002b84:	68e3      	ldr	r3, [r4, #12]
 8002b86:	682a      	ldr	r2, [r5, #0]
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	42bb      	cmp	r3, r7
 8002b8c:	ddd2      	ble.n	8002b34 <_printf_common+0x3c>
 8002b8e:	0022      	movs	r2, r4
 8002b90:	2301      	movs	r3, #1
 8002b92:	9901      	ldr	r1, [sp, #4]
 8002b94:	9800      	ldr	r0, [sp, #0]
 8002b96:	9e08      	ldr	r6, [sp, #32]
 8002b98:	3219      	adds	r2, #25
 8002b9a:	47b0      	blx	r6
 8002b9c:	1c43      	adds	r3, r0, #1
 8002b9e:	d1f0      	bne.n	8002b82 <_printf_common+0x8a>
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	4240      	negs	r0, r0
 8002ba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ba6:	2030      	movs	r0, #48	; 0x30
 8002ba8:	18e1      	adds	r1, r4, r3
 8002baa:	3143      	adds	r1, #67	; 0x43
 8002bac:	7008      	strb	r0, [r1, #0]
 8002bae:	0021      	movs	r1, r4
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	3145      	adds	r1, #69	; 0x45
 8002bb4:	7809      	ldrb	r1, [r1, #0]
 8002bb6:	18a2      	adds	r2, r4, r2
 8002bb8:	3243      	adds	r2, #67	; 0x43
 8002bba:	3302      	adds	r3, #2
 8002bbc:	7011      	strb	r1, [r2, #0]
 8002bbe:	e7c1      	b.n	8002b44 <_printf_common+0x4c>
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	9901      	ldr	r1, [sp, #4]
 8002bc6:	9800      	ldr	r0, [sp, #0]
 8002bc8:	9e08      	ldr	r6, [sp, #32]
 8002bca:	321a      	adds	r2, #26
 8002bcc:	47b0      	blx	r6
 8002bce:	1c43      	adds	r3, r0, #1
 8002bd0:	d0e6      	beq.n	8002ba0 <_printf_common+0xa8>
 8002bd2:	3701      	adds	r7, #1
 8002bd4:	e7d1      	b.n	8002b7a <_printf_common+0x82>
	...

08002bd8 <_printf_i>:
 8002bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bda:	b08b      	sub	sp, #44	; 0x2c
 8002bdc:	9206      	str	r2, [sp, #24]
 8002bde:	000a      	movs	r2, r1
 8002be0:	3243      	adds	r2, #67	; 0x43
 8002be2:	9307      	str	r3, [sp, #28]
 8002be4:	9005      	str	r0, [sp, #20]
 8002be6:	9204      	str	r2, [sp, #16]
 8002be8:	7e0a      	ldrb	r2, [r1, #24]
 8002bea:	000c      	movs	r4, r1
 8002bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002bee:	2a78      	cmp	r2, #120	; 0x78
 8002bf0:	d807      	bhi.n	8002c02 <_printf_i+0x2a>
 8002bf2:	2a62      	cmp	r2, #98	; 0x62
 8002bf4:	d809      	bhi.n	8002c0a <_printf_i+0x32>
 8002bf6:	2a00      	cmp	r2, #0
 8002bf8:	d100      	bne.n	8002bfc <_printf_i+0x24>
 8002bfa:	e0c1      	b.n	8002d80 <_printf_i+0x1a8>
 8002bfc:	2a58      	cmp	r2, #88	; 0x58
 8002bfe:	d100      	bne.n	8002c02 <_printf_i+0x2a>
 8002c00:	e08c      	b.n	8002d1c <_printf_i+0x144>
 8002c02:	0026      	movs	r6, r4
 8002c04:	3642      	adds	r6, #66	; 0x42
 8002c06:	7032      	strb	r2, [r6, #0]
 8002c08:	e022      	b.n	8002c50 <_printf_i+0x78>
 8002c0a:	0010      	movs	r0, r2
 8002c0c:	3863      	subs	r0, #99	; 0x63
 8002c0e:	2815      	cmp	r0, #21
 8002c10:	d8f7      	bhi.n	8002c02 <_printf_i+0x2a>
 8002c12:	f7fd fa83 	bl	800011c <__gnu_thumb1_case_shi>
 8002c16:	0016      	.short	0x0016
 8002c18:	fff6001f 	.word	0xfff6001f
 8002c1c:	fff6fff6 	.word	0xfff6fff6
 8002c20:	001ffff6 	.word	0x001ffff6
 8002c24:	fff6fff6 	.word	0xfff6fff6
 8002c28:	fff6fff6 	.word	0xfff6fff6
 8002c2c:	003600a8 	.word	0x003600a8
 8002c30:	fff6009a 	.word	0xfff6009a
 8002c34:	00b9fff6 	.word	0x00b9fff6
 8002c38:	0036fff6 	.word	0x0036fff6
 8002c3c:	fff6fff6 	.word	0xfff6fff6
 8002c40:	009e      	.short	0x009e
 8002c42:	0026      	movs	r6, r4
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	3642      	adds	r6, #66	; 0x42
 8002c48:	1d11      	adds	r1, r2, #4
 8002c4a:	6019      	str	r1, [r3, #0]
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	7033      	strb	r3, [r6, #0]
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0a7      	b.n	8002da4 <_printf_i+0x1cc>
 8002c54:	6808      	ldr	r0, [r1, #0]
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	1d0a      	adds	r2, r1, #4
 8002c5a:	0605      	lsls	r5, r0, #24
 8002c5c:	d50b      	bpl.n	8002c76 <_printf_i+0x9e>
 8002c5e:	680d      	ldr	r5, [r1, #0]
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	2d00      	cmp	r5, #0
 8002c64:	da03      	bge.n	8002c6e <_printf_i+0x96>
 8002c66:	232d      	movs	r3, #45	; 0x2d
 8002c68:	9a04      	ldr	r2, [sp, #16]
 8002c6a:	426d      	negs	r5, r5
 8002c6c:	7013      	strb	r3, [r2, #0]
 8002c6e:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <_printf_i+0x21c>)
 8002c70:	270a      	movs	r7, #10
 8002c72:	9303      	str	r3, [sp, #12]
 8002c74:	e01b      	b.n	8002cae <_printf_i+0xd6>
 8002c76:	680d      	ldr	r5, [r1, #0]
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	0641      	lsls	r1, r0, #25
 8002c7c:	d5f1      	bpl.n	8002c62 <_printf_i+0x8a>
 8002c7e:	b22d      	sxth	r5, r5
 8002c80:	e7ef      	b.n	8002c62 <_printf_i+0x8a>
 8002c82:	680d      	ldr	r5, [r1, #0]
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	1d08      	adds	r0, r1, #4
 8002c88:	6018      	str	r0, [r3, #0]
 8002c8a:	062e      	lsls	r6, r5, #24
 8002c8c:	d501      	bpl.n	8002c92 <_printf_i+0xba>
 8002c8e:	680d      	ldr	r5, [r1, #0]
 8002c90:	e003      	b.n	8002c9a <_printf_i+0xc2>
 8002c92:	066d      	lsls	r5, r5, #25
 8002c94:	d5fb      	bpl.n	8002c8e <_printf_i+0xb6>
 8002c96:	680d      	ldr	r5, [r1, #0]
 8002c98:	b2ad      	uxth	r5, r5
 8002c9a:	4b56      	ldr	r3, [pc, #344]	; (8002df4 <_printf_i+0x21c>)
 8002c9c:	2708      	movs	r7, #8
 8002c9e:	9303      	str	r3, [sp, #12]
 8002ca0:	2a6f      	cmp	r2, #111	; 0x6f
 8002ca2:	d000      	beq.n	8002ca6 <_printf_i+0xce>
 8002ca4:	3702      	adds	r7, #2
 8002ca6:	0023      	movs	r3, r4
 8002ca8:	2200      	movs	r2, #0
 8002caa:	3343      	adds	r3, #67	; 0x43
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	6863      	ldr	r3, [r4, #4]
 8002cb0:	60a3      	str	r3, [r4, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db03      	blt.n	8002cbe <_printf_i+0xe6>
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	6821      	ldr	r1, [r4, #0]
 8002cba:	4391      	bics	r1, r2
 8002cbc:	6021      	str	r1, [r4, #0]
 8002cbe:	2d00      	cmp	r5, #0
 8002cc0:	d102      	bne.n	8002cc8 <_printf_i+0xf0>
 8002cc2:	9e04      	ldr	r6, [sp, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00c      	beq.n	8002ce2 <_printf_i+0x10a>
 8002cc8:	9e04      	ldr	r6, [sp, #16]
 8002cca:	0028      	movs	r0, r5
 8002ccc:	0039      	movs	r1, r7
 8002cce:	f7fd fab5 	bl	800023c <__aeabi_uidivmod>
 8002cd2:	9b03      	ldr	r3, [sp, #12]
 8002cd4:	3e01      	subs	r6, #1
 8002cd6:	5c5b      	ldrb	r3, [r3, r1]
 8002cd8:	7033      	strb	r3, [r6, #0]
 8002cda:	002b      	movs	r3, r5
 8002cdc:	0005      	movs	r5, r0
 8002cde:	429f      	cmp	r7, r3
 8002ce0:	d9f3      	bls.n	8002cca <_printf_i+0xf2>
 8002ce2:	2f08      	cmp	r7, #8
 8002ce4:	d109      	bne.n	8002cfa <_printf_i+0x122>
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	07db      	lsls	r3, r3, #31
 8002cea:	d506      	bpl.n	8002cfa <_printf_i+0x122>
 8002cec:	6863      	ldr	r3, [r4, #4]
 8002cee:	6922      	ldr	r2, [r4, #16]
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	dc02      	bgt.n	8002cfa <_printf_i+0x122>
 8002cf4:	2330      	movs	r3, #48	; 0x30
 8002cf6:	3e01      	subs	r6, #1
 8002cf8:	7033      	strb	r3, [r6, #0]
 8002cfa:	9b04      	ldr	r3, [sp, #16]
 8002cfc:	1b9b      	subs	r3, r3, r6
 8002cfe:	6123      	str	r3, [r4, #16]
 8002d00:	9b07      	ldr	r3, [sp, #28]
 8002d02:	0021      	movs	r1, r4
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	9805      	ldr	r0, [sp, #20]
 8002d08:	9b06      	ldr	r3, [sp, #24]
 8002d0a:	aa09      	add	r2, sp, #36	; 0x24
 8002d0c:	f7ff fef4 	bl	8002af8 <_printf_common>
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d14c      	bne.n	8002dae <_printf_i+0x1d6>
 8002d14:	2001      	movs	r0, #1
 8002d16:	4240      	negs	r0, r0
 8002d18:	b00b      	add	sp, #44	; 0x2c
 8002d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d1c:	3145      	adds	r1, #69	; 0x45
 8002d1e:	700a      	strb	r2, [r1, #0]
 8002d20:	4a34      	ldr	r2, [pc, #208]	; (8002df4 <_printf_i+0x21c>)
 8002d22:	9203      	str	r2, [sp, #12]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	6821      	ldr	r1, [r4, #0]
 8002d28:	ca20      	ldmia	r2!, {r5}
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	0608      	lsls	r0, r1, #24
 8002d2e:	d516      	bpl.n	8002d5e <_printf_i+0x186>
 8002d30:	07cb      	lsls	r3, r1, #31
 8002d32:	d502      	bpl.n	8002d3a <_printf_i+0x162>
 8002d34:	2320      	movs	r3, #32
 8002d36:	4319      	orrs	r1, r3
 8002d38:	6021      	str	r1, [r4, #0]
 8002d3a:	2710      	movs	r7, #16
 8002d3c:	2d00      	cmp	r5, #0
 8002d3e:	d1b2      	bne.n	8002ca6 <_printf_i+0xce>
 8002d40:	2320      	movs	r3, #32
 8002d42:	6822      	ldr	r2, [r4, #0]
 8002d44:	439a      	bics	r2, r3
 8002d46:	6022      	str	r2, [r4, #0]
 8002d48:	e7ad      	b.n	8002ca6 <_printf_i+0xce>
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	6809      	ldr	r1, [r1, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	6022      	str	r2, [r4, #0]
 8002d52:	0022      	movs	r2, r4
 8002d54:	2178      	movs	r1, #120	; 0x78
 8002d56:	3245      	adds	r2, #69	; 0x45
 8002d58:	7011      	strb	r1, [r2, #0]
 8002d5a:	4a27      	ldr	r2, [pc, #156]	; (8002df8 <_printf_i+0x220>)
 8002d5c:	e7e1      	b.n	8002d22 <_printf_i+0x14a>
 8002d5e:	0648      	lsls	r0, r1, #25
 8002d60:	d5e6      	bpl.n	8002d30 <_printf_i+0x158>
 8002d62:	b2ad      	uxth	r5, r5
 8002d64:	e7e4      	b.n	8002d30 <_printf_i+0x158>
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	680d      	ldr	r5, [r1, #0]
 8002d6a:	1d10      	adds	r0, r2, #4
 8002d6c:	6949      	ldr	r1, [r1, #20]
 8002d6e:	6018      	str	r0, [r3, #0]
 8002d70:	6813      	ldr	r3, [r2, #0]
 8002d72:	062e      	lsls	r6, r5, #24
 8002d74:	d501      	bpl.n	8002d7a <_printf_i+0x1a2>
 8002d76:	6019      	str	r1, [r3, #0]
 8002d78:	e002      	b.n	8002d80 <_printf_i+0x1a8>
 8002d7a:	066d      	lsls	r5, r5, #25
 8002d7c:	d5fb      	bpl.n	8002d76 <_printf_i+0x19e>
 8002d7e:	8019      	strh	r1, [r3, #0]
 8002d80:	2300      	movs	r3, #0
 8002d82:	9e04      	ldr	r6, [sp, #16]
 8002d84:	6123      	str	r3, [r4, #16]
 8002d86:	e7bb      	b.n	8002d00 <_printf_i+0x128>
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	1d11      	adds	r1, r2, #4
 8002d8c:	6019      	str	r1, [r3, #0]
 8002d8e:	6816      	ldr	r6, [r2, #0]
 8002d90:	2100      	movs	r1, #0
 8002d92:	0030      	movs	r0, r6
 8002d94:	6862      	ldr	r2, [r4, #4]
 8002d96:	f000 f831 	bl	8002dfc <memchr>
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d001      	beq.n	8002da2 <_printf_i+0x1ca>
 8002d9e:	1b80      	subs	r0, r0, r6
 8002da0:	6060      	str	r0, [r4, #4]
 8002da2:	6863      	ldr	r3, [r4, #4]
 8002da4:	6123      	str	r3, [r4, #16]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9a04      	ldr	r2, [sp, #16]
 8002daa:	7013      	strb	r3, [r2, #0]
 8002dac:	e7a8      	b.n	8002d00 <_printf_i+0x128>
 8002dae:	6923      	ldr	r3, [r4, #16]
 8002db0:	0032      	movs	r2, r6
 8002db2:	9906      	ldr	r1, [sp, #24]
 8002db4:	9805      	ldr	r0, [sp, #20]
 8002db6:	9d07      	ldr	r5, [sp, #28]
 8002db8:	47a8      	blx	r5
 8002dba:	1c43      	adds	r3, r0, #1
 8002dbc:	d0aa      	beq.n	8002d14 <_printf_i+0x13c>
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	079b      	lsls	r3, r3, #30
 8002dc2:	d415      	bmi.n	8002df0 <_printf_i+0x218>
 8002dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dc6:	68e0      	ldr	r0, [r4, #12]
 8002dc8:	4298      	cmp	r0, r3
 8002dca:	daa5      	bge.n	8002d18 <_printf_i+0x140>
 8002dcc:	0018      	movs	r0, r3
 8002dce:	e7a3      	b.n	8002d18 <_printf_i+0x140>
 8002dd0:	0022      	movs	r2, r4
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9906      	ldr	r1, [sp, #24]
 8002dd6:	9805      	ldr	r0, [sp, #20]
 8002dd8:	9e07      	ldr	r6, [sp, #28]
 8002dda:	3219      	adds	r2, #25
 8002ddc:	47b0      	blx	r6
 8002dde:	1c43      	adds	r3, r0, #1
 8002de0:	d098      	beq.n	8002d14 <_printf_i+0x13c>
 8002de2:	3501      	adds	r5, #1
 8002de4:	68e3      	ldr	r3, [r4, #12]
 8002de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	42ab      	cmp	r3, r5
 8002dec:	dcf0      	bgt.n	8002dd0 <_printf_i+0x1f8>
 8002dee:	e7e9      	b.n	8002dc4 <_printf_i+0x1ec>
 8002df0:	2500      	movs	r5, #0
 8002df2:	e7f7      	b.n	8002de4 <_printf_i+0x20c>
 8002df4:	08003482 	.word	0x08003482
 8002df8:	08003493 	.word	0x08003493

08002dfc <memchr>:
 8002dfc:	b2c9      	uxtb	r1, r1
 8002dfe:	1882      	adds	r2, r0, r2
 8002e00:	4290      	cmp	r0, r2
 8002e02:	d101      	bne.n	8002e08 <memchr+0xc>
 8002e04:	2000      	movs	r0, #0
 8002e06:	4770      	bx	lr
 8002e08:	7803      	ldrb	r3, [r0, #0]
 8002e0a:	428b      	cmp	r3, r1
 8002e0c:	d0fb      	beq.n	8002e06 <memchr+0xa>
 8002e0e:	3001      	adds	r0, #1
 8002e10:	e7f6      	b.n	8002e00 <memchr+0x4>

08002e12 <memcpy>:
 8002e12:	2300      	movs	r3, #0
 8002e14:	b510      	push	{r4, lr}
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d100      	bne.n	8002e1c <memcpy+0xa>
 8002e1a:	bd10      	pop	{r4, pc}
 8002e1c:	5ccc      	ldrb	r4, [r1, r3]
 8002e1e:	54c4      	strb	r4, [r0, r3]
 8002e20:	3301      	adds	r3, #1
 8002e22:	e7f8      	b.n	8002e16 <memcpy+0x4>

08002e24 <memmove>:
 8002e24:	b510      	push	{r4, lr}
 8002e26:	4288      	cmp	r0, r1
 8002e28:	d902      	bls.n	8002e30 <memmove+0xc>
 8002e2a:	188b      	adds	r3, r1, r2
 8002e2c:	4298      	cmp	r0, r3
 8002e2e:	d303      	bcc.n	8002e38 <memmove+0x14>
 8002e30:	2300      	movs	r3, #0
 8002e32:	e007      	b.n	8002e44 <memmove+0x20>
 8002e34:	5c8b      	ldrb	r3, [r1, r2]
 8002e36:	5483      	strb	r3, [r0, r2]
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	d2fb      	bcs.n	8002e34 <memmove+0x10>
 8002e3c:	bd10      	pop	{r4, pc}
 8002e3e:	5ccc      	ldrb	r4, [r1, r3]
 8002e40:	54c4      	strb	r4, [r0, r3]
 8002e42:	3301      	adds	r3, #1
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1fa      	bne.n	8002e3e <memmove+0x1a>
 8002e48:	e7f8      	b.n	8002e3c <memmove+0x18>
	...

08002e4c <_free_r>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	0005      	movs	r5, r0
 8002e50:	2900      	cmp	r1, #0
 8002e52:	d010      	beq.n	8002e76 <_free_r+0x2a>
 8002e54:	1f0c      	subs	r4, r1, #4
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da00      	bge.n	8002e5e <_free_r+0x12>
 8002e5c:	18e4      	adds	r4, r4, r3
 8002e5e:	0028      	movs	r0, r5
 8002e60:	f000 f918 	bl	8003094 <__malloc_lock>
 8002e64:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <_free_r+0x90>)
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <_free_r+0x2c>
 8002e6c:	6063      	str	r3, [r4, #4]
 8002e6e:	6014      	str	r4, [r2, #0]
 8002e70:	0028      	movs	r0, r5
 8002e72:	f000 f917 	bl	80030a4 <__malloc_unlock>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	42a3      	cmp	r3, r4
 8002e7a:	d908      	bls.n	8002e8e <_free_r+0x42>
 8002e7c:	6821      	ldr	r1, [r4, #0]
 8002e7e:	1860      	adds	r0, r4, r1
 8002e80:	4283      	cmp	r3, r0
 8002e82:	d1f3      	bne.n	8002e6c <_free_r+0x20>
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	1841      	adds	r1, r0, r1
 8002e8a:	6021      	str	r1, [r4, #0]
 8002e8c:	e7ee      	b.n	8002e6c <_free_r+0x20>
 8002e8e:	001a      	movs	r2, r3
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <_free_r+0x4e>
 8002e96:	42a3      	cmp	r3, r4
 8002e98:	d9f9      	bls.n	8002e8e <_free_r+0x42>
 8002e9a:	6811      	ldr	r1, [r2, #0]
 8002e9c:	1850      	adds	r0, r2, r1
 8002e9e:	42a0      	cmp	r0, r4
 8002ea0:	d10b      	bne.n	8002eba <_free_r+0x6e>
 8002ea2:	6820      	ldr	r0, [r4, #0]
 8002ea4:	1809      	adds	r1, r1, r0
 8002ea6:	1850      	adds	r0, r2, r1
 8002ea8:	6011      	str	r1, [r2, #0]
 8002eaa:	4283      	cmp	r3, r0
 8002eac:	d1e0      	bne.n	8002e70 <_free_r+0x24>
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	1841      	adds	r1, r0, r1
 8002eb4:	6011      	str	r1, [r2, #0]
 8002eb6:	6053      	str	r3, [r2, #4]
 8002eb8:	e7da      	b.n	8002e70 <_free_r+0x24>
 8002eba:	42a0      	cmp	r0, r4
 8002ebc:	d902      	bls.n	8002ec4 <_free_r+0x78>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	602b      	str	r3, [r5, #0]
 8002ec2:	e7d5      	b.n	8002e70 <_free_r+0x24>
 8002ec4:	6821      	ldr	r1, [r4, #0]
 8002ec6:	1860      	adds	r0, r4, r1
 8002ec8:	4283      	cmp	r3, r0
 8002eca:	d103      	bne.n	8002ed4 <_free_r+0x88>
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	1841      	adds	r1, r0, r1
 8002ed2:	6021      	str	r1, [r4, #0]
 8002ed4:	6063      	str	r3, [r4, #4]
 8002ed6:	6054      	str	r4, [r2, #4]
 8002ed8:	e7ca      	b.n	8002e70 <_free_r+0x24>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	20000214 	.word	0x20000214

08002ee0 <sbrk_aligned>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4e0f      	ldr	r6, [pc, #60]	; (8002f20 <sbrk_aligned+0x40>)
 8002ee4:	000d      	movs	r5, r1
 8002ee6:	6831      	ldr	r1, [r6, #0]
 8002ee8:	0004      	movs	r4, r0
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d102      	bne.n	8002ef4 <sbrk_aligned+0x14>
 8002eee:	f000 f8bf 	bl	8003070 <_sbrk_r>
 8002ef2:	6030      	str	r0, [r6, #0]
 8002ef4:	0029      	movs	r1, r5
 8002ef6:	0020      	movs	r0, r4
 8002ef8:	f000 f8ba 	bl	8003070 <_sbrk_r>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d00a      	beq.n	8002f16 <sbrk_aligned+0x36>
 8002f00:	2303      	movs	r3, #3
 8002f02:	1cc5      	adds	r5, r0, #3
 8002f04:	439d      	bics	r5, r3
 8002f06:	42a8      	cmp	r0, r5
 8002f08:	d007      	beq.n	8002f1a <sbrk_aligned+0x3a>
 8002f0a:	1a29      	subs	r1, r5, r0
 8002f0c:	0020      	movs	r0, r4
 8002f0e:	f000 f8af 	bl	8003070 <_sbrk_r>
 8002f12:	1c43      	adds	r3, r0, #1
 8002f14:	d101      	bne.n	8002f1a <sbrk_aligned+0x3a>
 8002f16:	2501      	movs	r5, #1
 8002f18:	426d      	negs	r5, r5
 8002f1a:	0028      	movs	r0, r5
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	20000218 	.word	0x20000218

08002f24 <_malloc_r>:
 8002f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f26:	2203      	movs	r2, #3
 8002f28:	1ccb      	adds	r3, r1, #3
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	0006      	movs	r6, r0
 8002f30:	001f      	movs	r7, r3
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	d232      	bcs.n	8002f9c <_malloc_r+0x78>
 8002f36:	270c      	movs	r7, #12
 8002f38:	42b9      	cmp	r1, r7
 8002f3a:	d831      	bhi.n	8002fa0 <_malloc_r+0x7c>
 8002f3c:	0030      	movs	r0, r6
 8002f3e:	f000 f8a9 	bl	8003094 <__malloc_lock>
 8002f42:	4d32      	ldr	r5, [pc, #200]	; (800300c <_malloc_r+0xe8>)
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	001c      	movs	r4, r3
 8002f48:	2c00      	cmp	r4, #0
 8002f4a:	d12e      	bne.n	8002faa <_malloc_r+0x86>
 8002f4c:	0039      	movs	r1, r7
 8002f4e:	0030      	movs	r0, r6
 8002f50:	f7ff ffc6 	bl	8002ee0 <sbrk_aligned>
 8002f54:	0004      	movs	r4, r0
 8002f56:	1c43      	adds	r3, r0, #1
 8002f58:	d11e      	bne.n	8002f98 <_malloc_r+0x74>
 8002f5a:	682c      	ldr	r4, [r5, #0]
 8002f5c:	0025      	movs	r5, r4
 8002f5e:	2d00      	cmp	r5, #0
 8002f60:	d14a      	bne.n	8002ff8 <_malloc_r+0xd4>
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	0029      	movs	r1, r5
 8002f66:	18e3      	adds	r3, r4, r3
 8002f68:	0030      	movs	r0, r6
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	f000 f880 	bl	8003070 <_sbrk_r>
 8002f70:	9b01      	ldr	r3, [sp, #4]
 8002f72:	4283      	cmp	r3, r0
 8002f74:	d143      	bne.n	8002ffe <_malloc_r+0xda>
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	3703      	adds	r7, #3
 8002f7a:	1aff      	subs	r7, r7, r3
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	439f      	bics	r7, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	2f0c      	cmp	r7, #12
 8002f84:	d200      	bcs.n	8002f88 <_malloc_r+0x64>
 8002f86:	270c      	movs	r7, #12
 8002f88:	0039      	movs	r1, r7
 8002f8a:	0030      	movs	r0, r6
 8002f8c:	f7ff ffa8 	bl	8002ee0 <sbrk_aligned>
 8002f90:	1c43      	adds	r3, r0, #1
 8002f92:	d034      	beq.n	8002ffe <_malloc_r+0xda>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	19df      	adds	r7, r3, r7
 8002f98:	6027      	str	r7, [r4, #0]
 8002f9a:	e013      	b.n	8002fc4 <_malloc_r+0xa0>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	dacb      	bge.n	8002f38 <_malloc_r+0x14>
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	2500      	movs	r5, #0
 8002fa4:	6033      	str	r3, [r6, #0]
 8002fa6:	0028      	movs	r0, r5
 8002fa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002faa:	6822      	ldr	r2, [r4, #0]
 8002fac:	1bd1      	subs	r1, r2, r7
 8002fae:	d420      	bmi.n	8002ff2 <_malloc_r+0xce>
 8002fb0:	290b      	cmp	r1, #11
 8002fb2:	d917      	bls.n	8002fe4 <_malloc_r+0xc0>
 8002fb4:	19e2      	adds	r2, r4, r7
 8002fb6:	6027      	str	r7, [r4, #0]
 8002fb8:	42a3      	cmp	r3, r4
 8002fba:	d111      	bne.n	8002fe0 <_malloc_r+0xbc>
 8002fbc:	602a      	str	r2, [r5, #0]
 8002fbe:	6863      	ldr	r3, [r4, #4]
 8002fc0:	6011      	str	r1, [r2, #0]
 8002fc2:	6053      	str	r3, [r2, #4]
 8002fc4:	0030      	movs	r0, r6
 8002fc6:	0025      	movs	r5, r4
 8002fc8:	f000 f86c 	bl	80030a4 <__malloc_unlock>
 8002fcc:	2207      	movs	r2, #7
 8002fce:	350b      	adds	r5, #11
 8002fd0:	1d23      	adds	r3, r4, #4
 8002fd2:	4395      	bics	r5, r2
 8002fd4:	1aea      	subs	r2, r5, r3
 8002fd6:	429d      	cmp	r5, r3
 8002fd8:	d0e5      	beq.n	8002fa6 <_malloc_r+0x82>
 8002fda:	1b5b      	subs	r3, r3, r5
 8002fdc:	50a3      	str	r3, [r4, r2]
 8002fde:	e7e2      	b.n	8002fa6 <_malloc_r+0x82>
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	e7ec      	b.n	8002fbe <_malloc_r+0x9a>
 8002fe4:	6862      	ldr	r2, [r4, #4]
 8002fe6:	42a3      	cmp	r3, r4
 8002fe8:	d101      	bne.n	8002fee <_malloc_r+0xca>
 8002fea:	602a      	str	r2, [r5, #0]
 8002fec:	e7ea      	b.n	8002fc4 <_malloc_r+0xa0>
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	e7e8      	b.n	8002fc4 <_malloc_r+0xa0>
 8002ff2:	0023      	movs	r3, r4
 8002ff4:	6864      	ldr	r4, [r4, #4]
 8002ff6:	e7a7      	b.n	8002f48 <_malloc_r+0x24>
 8002ff8:	002c      	movs	r4, r5
 8002ffa:	686d      	ldr	r5, [r5, #4]
 8002ffc:	e7af      	b.n	8002f5e <_malloc_r+0x3a>
 8002ffe:	230c      	movs	r3, #12
 8003000:	0030      	movs	r0, r6
 8003002:	6033      	str	r3, [r6, #0]
 8003004:	f000 f84e 	bl	80030a4 <__malloc_unlock>
 8003008:	e7cd      	b.n	8002fa6 <_malloc_r+0x82>
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	20000214 	.word	0x20000214

08003010 <_realloc_r>:
 8003010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003012:	0007      	movs	r7, r0
 8003014:	000e      	movs	r6, r1
 8003016:	0014      	movs	r4, r2
 8003018:	2900      	cmp	r1, #0
 800301a:	d105      	bne.n	8003028 <_realloc_r+0x18>
 800301c:	0011      	movs	r1, r2
 800301e:	f7ff ff81 	bl	8002f24 <_malloc_r>
 8003022:	0005      	movs	r5, r0
 8003024:	0028      	movs	r0, r5
 8003026:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003028:	2a00      	cmp	r2, #0
 800302a:	d103      	bne.n	8003034 <_realloc_r+0x24>
 800302c:	f7ff ff0e 	bl	8002e4c <_free_r>
 8003030:	0025      	movs	r5, r4
 8003032:	e7f7      	b.n	8003024 <_realloc_r+0x14>
 8003034:	f000 f83e 	bl	80030b4 <_malloc_usable_size_r>
 8003038:	9001      	str	r0, [sp, #4]
 800303a:	4284      	cmp	r4, r0
 800303c:	d803      	bhi.n	8003046 <_realloc_r+0x36>
 800303e:	0035      	movs	r5, r6
 8003040:	0843      	lsrs	r3, r0, #1
 8003042:	42a3      	cmp	r3, r4
 8003044:	d3ee      	bcc.n	8003024 <_realloc_r+0x14>
 8003046:	0021      	movs	r1, r4
 8003048:	0038      	movs	r0, r7
 800304a:	f7ff ff6b 	bl	8002f24 <_malloc_r>
 800304e:	1e05      	subs	r5, r0, #0
 8003050:	d0e8      	beq.n	8003024 <_realloc_r+0x14>
 8003052:	9b01      	ldr	r3, [sp, #4]
 8003054:	0022      	movs	r2, r4
 8003056:	429c      	cmp	r4, r3
 8003058:	d900      	bls.n	800305c <_realloc_r+0x4c>
 800305a:	001a      	movs	r2, r3
 800305c:	0031      	movs	r1, r6
 800305e:	0028      	movs	r0, r5
 8003060:	f7ff fed7 	bl	8002e12 <memcpy>
 8003064:	0031      	movs	r1, r6
 8003066:	0038      	movs	r0, r7
 8003068:	f7ff fef0 	bl	8002e4c <_free_r>
 800306c:	e7da      	b.n	8003024 <_realloc_r+0x14>
	...

08003070 <_sbrk_r>:
 8003070:	2300      	movs	r3, #0
 8003072:	b570      	push	{r4, r5, r6, lr}
 8003074:	4d06      	ldr	r5, [pc, #24]	; (8003090 <_sbrk_r+0x20>)
 8003076:	0004      	movs	r4, r0
 8003078:	0008      	movs	r0, r1
 800307a:	602b      	str	r3, [r5, #0]
 800307c:	f7fd fba0 	bl	80007c0 <_sbrk>
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d103      	bne.n	800308c <_sbrk_r+0x1c>
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d000      	beq.n	800308c <_sbrk_r+0x1c>
 800308a:	6023      	str	r3, [r4, #0]
 800308c:	bd70      	pop	{r4, r5, r6, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	2000021c 	.word	0x2000021c

08003094 <__malloc_lock>:
 8003094:	b510      	push	{r4, lr}
 8003096:	4802      	ldr	r0, [pc, #8]	; (80030a0 <__malloc_lock+0xc>)
 8003098:	f000 f814 	bl	80030c4 <__retarget_lock_acquire_recursive>
 800309c:	bd10      	pop	{r4, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	20000220 	.word	0x20000220

080030a4 <__malloc_unlock>:
 80030a4:	b510      	push	{r4, lr}
 80030a6:	4802      	ldr	r0, [pc, #8]	; (80030b0 <__malloc_unlock+0xc>)
 80030a8:	f000 f80d 	bl	80030c6 <__retarget_lock_release_recursive>
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	20000220 	.word	0x20000220

080030b4 <_malloc_usable_size_r>:
 80030b4:	1f0b      	subs	r3, r1, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1f18      	subs	r0, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da01      	bge.n	80030c2 <_malloc_usable_size_r+0xe>
 80030be:	580b      	ldr	r3, [r1, r0]
 80030c0:	18c0      	adds	r0, r0, r3
 80030c2:	4770      	bx	lr

080030c4 <__retarget_lock_acquire_recursive>:
 80030c4:	4770      	bx	lr

080030c6 <__retarget_lock_release_recursive>:
 80030c6:	4770      	bx	lr

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
